// Generated by Haxe 3.3.0
(function ($hx_exports, $global) { "use strict";
$hx_exports["troshx"] = $hx_exports["troshx"] || {};
$hx_exports["troshx"]["core"] = $hx_exports["troshx"]["core"] || {};
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var MainSOS = function() { };
MainSOS.__name__ = true;
MainSOS.main = function() {
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_ArraySort = function() { };
haxe_ds_ArraySort.__name__ = true;
haxe_ds_ArraySort.sort = function(a,cmp) {
	haxe_ds_ArraySort.rec(a,cmp,0,a.length);
};
haxe_ds_ArraySort.rec = function(a,cmp,from,to) {
	var middle = from + to >> 1;
	if(to - from < 12) {
		if(to <= from) {
			return;
		}
		var _g1 = from + 1;
		while(_g1 < to) {
			var j = _g1++;
			while(j > from) {
				if(cmp(a[j],a[j - 1]) < 0) {
					haxe_ds_ArraySort.swap(a,j - 1,j);
				} else {
					break;
				}
				--j;
			}
		}
		return;
	}
	haxe_ds_ArraySort.rec(a,cmp,from,middle);
	haxe_ds_ArraySort.rec(a,cmp,middle,to);
	haxe_ds_ArraySort.doMerge(a,cmp,from,middle,to,middle - from,to - middle);
};
haxe_ds_ArraySort.doMerge = function(a,cmp,from,pivot,to,len1,len2) {
	var first_cut;
	var second_cut;
	var len11;
	var len22;
	var new_mid;
	if(len1 == 0 || len2 == 0) {
		return;
	}
	if(len1 + len2 == 2) {
		if(cmp(a[pivot],a[from]) < 0) {
			haxe_ds_ArraySort.swap(a,pivot,from);
		}
		return;
	}
	if(len1 > len2) {
		len11 = len1 >> 1;
		first_cut = from + len11;
		second_cut = haxe_ds_ArraySort.lower(a,cmp,pivot,to,first_cut);
		len22 = second_cut - pivot;
	} else {
		len22 = len2 >> 1;
		second_cut = pivot + len22;
		first_cut = haxe_ds_ArraySort.upper(a,cmp,from,pivot,second_cut);
		len11 = first_cut - from;
	}
	haxe_ds_ArraySort.rotate(a,cmp,first_cut,pivot,second_cut);
	new_mid = first_cut + len22;
	haxe_ds_ArraySort.doMerge(a,cmp,from,first_cut,new_mid,len11,len22);
	haxe_ds_ArraySort.doMerge(a,cmp,new_mid,second_cut,to,len1 - len11,len2 - len22);
};
haxe_ds_ArraySort.rotate = function(a,cmp,from,mid,to) {
	var n;
	if(from == mid || mid == to) {
		return;
	}
	n = haxe_ds_ArraySort.gcd(to - from,mid - from);
	while(n-- != 0) {
		var val = a[from + n];
		var shift = mid - from;
		var p1 = from + n;
		var p2 = from + n + shift;
		while(p2 != from + n) {
			a[p1] = a[p2];
			p1 = p2;
			if(to - p2 > shift) {
				p2 += shift;
			} else {
				p2 = from + (shift - (to - p2));
			}
		}
		a[p1] = val;
	}
};
haxe_ds_ArraySort.gcd = function(m,n) {
	while(n != 0) {
		var t = m % n;
		m = n;
		n = t;
	}
	return m;
};
haxe_ds_ArraySort.upper = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[val],a[mid]) < 0) {
			len = half;
		} else {
			from = mid + 1;
			len = len - half - 1;
		}
	}
	return from;
};
haxe_ds_ArraySort.lower = function(a,cmp,from,to,val) {
	var len = to - from;
	var half;
	var mid;
	while(len > 0) {
		half = len >> 1;
		mid = from + half;
		if(cmp(a[mid],a[val]) < 0) {
			from = mid + 1;
			len = len - half - 1;
		} else {
			len = half;
		}
	}
	return from;
};
haxe_ds_ArraySort.swap = function(a,i,j) {
	var tmp = a[i];
	a[i] = a[j];
	a[j] = tmp;
};
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = intf[_g1++];
			if(i == cl || js_Boot.__interfLoop(i,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class && o.__name__ != null) {
			return true;
		}
		if(cl == Enum && o.__ename__ != null) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var troshx_components_Bout = function() {
	this.combatants = new List();
	this.state = new troshx_components_FightState();
};
troshx_components_Bout.__name__ = true;
troshx_components_Bout.prototype = {
	__class__: troshx_components_Bout
};
var troshx_components_FightNode = function() { };
troshx_components_FightNode.__name__ = true;
troshx_components_FightNode.prototype = {
	__class__: troshx_components_FightNode
};
var troshx_components_FightState = function() {
	this.lastAttacking = false;
	this.shortRangeAdvantage = false;
	this.attacking = false;
	this.rounds = 0;
	this.enemyManuevers = [];
	this.manuevers = [{ manuever : null, numDice : 0}];
	this.orientation = 0;
	this.flags = 0;
	this.targetedByFlags = 0;
	this.targetLocked = false;
	this.target__ = null;
	this.initiative = false;
	this.numEnemies = 0;
	this.side = 1;
	this.e = false;
	this.s = 0;
};
troshx_components_FightState.__name__ = true;
troshx_components_FightState.isAttackingChoice = function(choice) {
	if(choice.manuever != null) {
		return choice.manuever.type == 2;
	} else {
		return false;
	}
};
troshx_components_FightState.manueverNeedsElaboration = function(cManuever) {
	if(cManuever.numDice != 0) {
		if(cManuever.to != null) {
			return cManuever.targetZone == null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
troshx_components_FightState.prototype = {
	get_target: function() {
		return this.target__;
	}
	,set_target: function(value) {
		return this.target__ = value;
	}
	,get_paused: function() {
		if(this.target__ == null) {
			return this.targetedByFlags == 0;
		} else if(!(this.target__.target__ == this && !this.target__.initiative && !this.initiative)) {
			if(this.target__.target__ != this && !this.initiative) {
				return this.traceExceptionIsPaused();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,traceExceptionIsPaused: function() {
		console.log("traceExceptionIsPaused exception found");
		return true;
	}
	,hasOrientationInitiative: function(targetFight) {
		if(this.orientation != 3) {
			if(this.orientation != 1) {
				if(!(this.target__ == targetFight && targetFight.target__ != this)) {
					return this.orientation > targetFight.orientation;
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getInitiativeTowards: function(fightState) {
		if(this.orientation == 0) {
			if(this.initiative) {
				if(fightState.initiative) {
					return 1;
				} else {
					return 2;
				}
			} else {
				return 0;
			}
		} else if(this.orientation != 1) {
			if(this.orientation != fightState.orientation) {
				if(this.orientation > fightState.orientation) {
					return 2;
				} else {
					return 0;
				}
			} else if(this.orientation == 2) {
				if(fightState.orientation != 2) {
					throw new js__$Boot_HaxeError("Equal assertion cautious failed:" + fightState.orientation);
				}
				if(this.initiative != fightState.initiative) {
					return 10;
				} else {
					return -10;
				}
			} else if(this.orientation == 3) {
				if(fightState.orientation != 3) {
					throw new js__$Boot_HaxeError("Equal assertion aggressive failed:" + fightState.orientation);
				}
				return 1;
			} else {
				throw new js__$Boot_HaxeError("Missed out this case?? Orientation: " + this.orientation);
			}
		} else {
			return 0;
		}
	}
	,resetManueverObj: function(obj) {
		obj.manuever = null;
		obj.marginSuccess = null;
		obj.reflexScore = null;
		obj.successes = null;
		obj.numDice = 0;
		obj.from = null;
		obj.tn = 0;
		obj.to = null;
		obj.targetZone = null;
		obj.cost = null;
		obj.defManuever = null;
	}
	,resetManuevers: function() {
		var primary = this.manuevers[0];
		this.resetManueverObj(primary);
		this.manuevers.length = 1;
		this.enemyManuevers.length = 0;
	}
	,syncStepWith: function(fight) {
		if(fight.s >= this.s) {
			this.s = fight.s;
		} else {
			fight.s = this.s;
		}
	}
	,isSyncedWith: function(fight) {
		if(this.s == fight.s) {
			return this.e == fight.e;
		} else {
			return false;
		}
	}
	,step: function(nextExchange) {
		this.shock = 0;
		this.targetLocked = false;
		this.s++;
		if(nextExchange) {
			this.s = 0;
			this.e = !this.e;
			this.s = 0;
			this.orientation = 0;
			if(!this.e) {
				this.rounds++;
			}
		}
	}
	,clone: function() {
		var fState = new troshx_components_FightState();
		fState.side = this.side;
		return fState;
	}
	,checkContestAgainstDefense: function(defManueverChoice) {
		var primary = this.manuevers[0];
		var secondary = this.manuevers.length > 1?this.manuevers[1]:null;
		if(!(troshx_components_FightState.isAttackingChoice(primary) && primary.to == defManueverChoice.from)) {
			if(secondary != null && troshx_components_FightState.isAttackingChoice(secondary)) {
				return secondary.to == defManueverChoice.from;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getPrimaryManuever: function() {
		return this.manuevers[0];
	}
	,getSecondaryManuever: function() {
		if(this.manuevers.length > 1) {
			return this.manuevers[1];
		} else {
			return null;
		}
	}
	,getPrimaryEnemyManuever: function() {
		if(this.enemyManuevers.length > 0) {
			return this.enemyManuevers[0];
		} else {
			return null;
		}
	}
	,getEnemyManueverAt: function(index) {
		return this.enemyManuevers[index];
	}
	,getManueverAt: function(index) {
		return this.manuevers[index];
	}
	,isUnderAttack: function() {
		return this.enemyManuevers.length > 0;
	}
	,getTotalEnemyManuevers: function() {
		return this.enemyManuevers.length;
	}
	,noMoreCP: function() {
		return this.combatPool <= 0;
	}
	,setSideAggro: function(val) {
		this.side = val;
		return this;
	}
	,hostileTowards: function(fight) {
		return this.side != fight.side;
	}
	,matchScheduleWith: function(other) {
		this.s = other.s;
		this.e = other.e;
	}
	,reset: function(disengaged) {
		if(disengaged == null) {
			disengaged = false;
		}
		this.s = 0;
		this.e = false;
		this.orientation = 0;
		this.initiative = false;
		this.targetLocked = false;
		this.attacking = false;
		this.lastAttacking = false;
		this.shortRangeAdvantage = false;
		this.shock = 0;
		if(disengaged) {
			this.numEnemies = 0;
			this.flags = 0;
			this.targetedByFlags = 0;
			this.target__ = null;
			this.rounds = 0;
			this.resetManuevers();
		}
		return this;
	}
	,__class__: troshx_components_FightState
};
var troshx_core_BodyChar = $hx_exports["troshx"]["core"]["BodyChar"] = function() {
	this.zones = [];
	this.zones[0] = null;
	this.zonesB = [];
	this.zones[1] = null;
};
troshx_core_BodyChar.__name__ = true;
troshx_core_BodyChar.getEmptyBodyPartTypeDef = function() {
	return { BL : 0, KD : null, lev : 0, d : 0, ko : null, shock : 0, shockWP : 0, pain : 0, painWP : 0};
};
troshx_core_BodyChar.getEmptyWoundLocation = function(id) {
	return { id : id, cut : [], puncture : [], bludgeon : []};
};
troshx_core_BodyChar.getCleanArrayOfWound = function(dirtyArr) {
	var cleanArr = [];
	var _g1 = 0;
	var _g = dirtyArr.length;
	while(_g1 < _g) {
		var i = _g1++;
		cleanArr[i] = troshx_core_BodyChar.getBodyPartOf(dirtyArr[i]);
	}
	return cleanArr;
};
troshx_core_BodyChar.getBodyPartOf = function(obj) {
	var theBodyPart = troshx_core_BodyChar.getEmptyBodyPartTypeDef();
	var _g = 0;
	var _g1 = Reflect.fields(theBodyPart);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(obj,f)) {
			theBodyPart[f] = Reflect.field(obj,f);
		}
	}
	return theBodyPart;
};
troshx_core_BodyChar.prototype = {
	getAllWoundLocations: function() {
		var arr = [];
		var partsMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(this.partsCut);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(__map_reserved[f] != null) {
				partsMap.setReserved(f,true);
			} else {
				partsMap.h[f] = true;
			}
		}
		var _g2 = 0;
		var _g11 = Reflect.fields(this.partsBludgeon);
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			if(__map_reserved[f1] != null) {
				partsMap.setReserved(f1,true);
			} else {
				partsMap.h[f1] = true;
			}
		}
		var _g3 = 0;
		var _g12 = Reflect.fields(this.partsPuncture);
		while(_g3 < _g12.length) {
			var f2 = _g12[_g3];
			++_g3;
			if(__map_reserved[f2] != null) {
				partsMap.setReserved(f2,true);
			} else {
				partsMap.h[f2] = true;
			}
		}
		var tmp = partsMap.keys();
		while(tmp.hasNext()) {
			var f3 = tmp.next();
			var woundLocation = troshx_core_BodyChar.getEmptyWoundLocation(f3);
			if(Object.prototype.hasOwnProperty.call(this.partsCut,f3)) {
				woundLocation.cut = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsCut,f3));
			}
			if(Object.prototype.hasOwnProperty.call(this.partsPuncture,f3)) {
				woundLocation.puncture = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsPuncture,f3));
			}
			if(Object.prototype.hasOwnProperty.call(this.partsBludgeon,f3)) {
				woundLocation.bludgeon = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsBludgeon,f3));
			}
			arr.push(woundLocation);
		}
		return arr;
	}
	,getTargetZoneCost: function(index) {
		return 0;
	}
	,getWound: function(level,manuever,weapon,targetZone,rand) {
		if(rand == null) {
			rand = -1;
		}
		--level;
		var zs;
		var woundType;
		var damageTable;
		var damageTableStr;
		if(manuever.damageType == 3 || weapon.blunt) {
			zs = this.zonesB;
			damageTable = this.partsBludgeon;
			woundType = 4;
			damageTableStr = "bludgeoning";
		} else {
			zs = this.zones;
			var isThrusting = targetZone >= this.thrustStartIndex;
			if(isThrusting) {
				damageTable = this.partsPuncture;
			} else {
				damageTable = this.partsCut;
			}
			if(isThrusting) {
				woundType = 2;
			} else {
				woundType = 1;
			}
			if(isThrusting) {
				damageTableStr = "puncturing";
			} else {
				damageTableStr = "cutting";
			}
		}
		if(rand < 0) {
			rand = Math.random();
		}
		var part = zs[targetZone].getBodyPart(rand);
		if(part == "") {
			return null;
		}
		var row = Reflect.field(damageTable,part);
		if(row == null) {
			throw new js__$Boot_HaxeError("Could not find row:" + part + ", " + damageTableStr);
		}
		return { part : part, level : level, type : woundType, entry : row[level]};
	}
	,__class__: troshx_core_BodyChar
};
var troshx_core_BoutMessage = function() {
};
troshx_core_BoutMessage.__name__ = true;
troshx_core_BoutMessage.create = function(type,text) {
	if(type == null) {
		type = 0;
	}
	var me = new troshx_core_BoutMessage();
	me.type = type;
	me.text = text;
	return me;
};
troshx_core_BoutMessage.prototype = {
	__class__: troshx_core_BoutMessage
};
var troshx_core_IBoutController = function() { };
troshx_core_IBoutController.__name__ = true;
troshx_core_IBoutController.prototype = {
	__class__: troshx_core_IBoutController
};
var troshx_core_IBoutModel = function() { };
troshx_core_IBoutModel.__name__ = true;
troshx_core_IBoutModel.prototype = {
	__class__: troshx_core_IBoutModel
};
var troshx_core_ICharacterSheet = function() { };
troshx_core_ICharacterSheet.__name__ = true;
var troshx_core_IUid = function() { };
troshx_core_IUid.__name__ = true;
troshx_core_IUid.prototype = {
	__class__: troshx_core_IUid
};
var troshx_core_Manuever = $hx_exports["troshx"]["core"]["Manuever"] = function(id,name,cost) {
	if(cost == null) {
		cost = 0;
	}
	this.type = 0;
	this.id = id;
	this.name = name;
	this.cost = cost;
	this.usingHands = 0;
	this.defaultTN = 0;
	this.customRange = 0;
	this.customMinRange = 0;
	this.stanceModifier = 2;
	this.attackTypes = 1 | 2;
	this.damageType = 0;
	this.requiredLevel = 0;
	this.spamPenalty = 0;
	this.spamIndividualOnly = false;
	this.regionMask = 0;
	this.offHanded = false;
	this.evasive = 0;
	this.manueverType = 0;
};
troshx_core_Manuever.__name__ = true;
troshx_core_Manuever.isThrustingMotion = function(targetzone,toBody) {
	return targetzone >= toBody.thrustStartIndex;
};
troshx_core_Manuever.prototype = {
	gotResolveEvasive: function() {
		return (this.evasive & -2) != 0;
	}
	,isDefensiveOffHanded: function() {
		if(this.attackTypes != 1) {
			return this.offHanded;
		} else {
			return true;
		}
	}
	,_dmgType: function(val) {
		this.damageType = val;
		return this;
	}
	,_offHanded: function(val) {
		this.offHanded = val;
		return this;
	}
	,_evasive: function(val) {
		this.evasive = val | 1;
		return this;
	}
	,_tn: function(val) {
		this.defaultTN = val;
		return this;
	}
	,_atkTypes: function(val) {
		this.attackTypes = val;
		return this;
	}
	,_range: function(val) {
		this.customRange = val;
		return this;
	}
	,_rangeMin: function(val) {
		this.customMinRange = val;
		return this;
	}
	,_lev: function(val) {
		this.requiredLevel = val;
		return this;
	}
	,_spamPenalize: function(val,spamIndividualOnly) {
		if(spamIndividualOnly == null) {
			spamIndividualOnly = false;
		}
		this.spamPenalty = val;
		this.spamIndividualOnly = spamIndividualOnly;
		return this;
	}
	,_stanceModifier: function(val) {
		this.stanceModifier = val;
		return this;
	}
	,_regions: function(val) {
		this.regionMask = val;
		return this;
	}
	,_customRequire: function(requirements) {
		this.customRequirements = requirements;
		if(requirements == null) {
			this.devTempDisabled = true;
		}
		return this;
	}
	,_customPreResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customPostResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customDamage: function(method) {
		this.customDamageModiferMethod = method;
		return this;
	}
	,_customReflex: function() {
		return this;
	}
	,_customRange: function() {
		return this;
	}
	,_customSplit: function() {
		this.devTempDisabled = true;
		return this;
	}
	,isTypeAttacking: function() {
		return this.type == 2;
	}
	,__class__: troshx_core_Manuever
};
var troshx_core_ManueverStack = function() {
	this.stack = [];
};
troshx_core_ManueverStack.__name__ = true;
troshx_core_ManueverStack.prototype = {
	reset: function() {
		this.stack.length = 0;
	}
	,reverseOrder: function() {
		this.stack.reverse();
	}
	,pushManuever: function(manueverObj) {
		this.stack.push(manueverObj);
	}
	,sortOnLowestToHighestReflex: function() {
		haxe_ds_ArraySort.sort(this.stack,function(a,b) {
			if(a.reflexScore != b.reflexScore) {
				if(a.reflexScore > b.reflexScore) {
					return 1;
				} else {
					return -1;
				}
			} else {
				return 0;
			}
		});
	}
	,sortOnHighestToLowestReflex: function(property) {
		haxe_ds_ArraySort.sort(this.stack,function(a,b) {
			if(a.reflexScore != b.reflexScore) {
				if(a.reflexScore > b.reflexScore) {
					return -1;
				} else {
					return 1;
				}
			} else {
				return 0;
			}
		});
	}
	,__class__: troshx_core_ManueverStack
};
var troshx_core_Weapon = $hx_exports["troshx"]["core"]["Weapon"] = function(name,profGroups) {
	this.name = name;
	this.profeciencies = profGroups;
	this.attrBaseIndex = 0;
	this.drawCutModifier = 0;
	this.damage = 0;
	this.damage2 = 0;
	this.damage3 = 0;
	this.atn = 0;
	this.atn2 = 0;
	this.dtn = 0;
	this.dtn2 = 0;
	this.twoHanded = false;
	this.rangedWeapon = false;
	this.shield = false;
	this.shieldLimit = 0;
	this.cpPenalty = 0;
	this.movePenalty = 0;
	this.blunt = false;
	this.hooking = 0;
};
troshx_core_Weapon.__name__ = true;
troshx_core_Weapon.createDyn = function(name,profGroups,properties) {
	var weap = new troshx_core_Weapon(name,profGroups);
	var _g = 0;
	var _g1 = Reflect.fields(properties);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		weap[p] = Reflect.field(properties,p);
	}
	return weap;
};
troshx_core_Weapon.prototype = {
	getDamageTo: function(body,manuever,targetZone,margin,strength) {
		var dmg = this.damage3 != 0 && (this.blunt || manuever.damageType == 3)?this.damage3:targetZone >= body.thrustStartIndex?this.damage2:this.damage;
		dmg += margin;
		if(this.attrBaseIndex == 0) {
			dmg += strength;
		}
		return dmg;
	}
	,getHookingATN: function(tieBiasToThrust) {
		if(tieBiasToThrust == null) {
			tieBiasToThrust = false;
		}
		var strikeATN = (this.hooking & 1) != 0?this.atn:0;
		var thrustATN = (this.hooking & 2) != 0?this.atn2:0;
		if(strikeATN != 0 && thrustATN != 0) {
			if(!tieBiasToThrust) {
				if(thrustATN < strikeATN) {
					return -thrustATN;
				} else {
					return strikeATN;
				}
			} else if(strikeATN < thrustATN) {
				return strikeATN;
			} else {
				return -thrustATN;
			}
		} else if(strikeATN == 0) {
			return -thrustATN;
		} else {
			return strikeATN;
		}
	}
	,getHookingATNType: function(tieBiasToThrust) {
		if(tieBiasToThrust == null) {
			tieBiasToThrust = false;
		}
		var strikeATN = (this.hooking & 1) != 0?this.atn:0;
		var thrustATN = (this.hooking & 2) != 0?this.atn2:0;
		if(strikeATN != 0 && thrustATN != 0) {
			if(!tieBiasToThrust) {
				if(thrustATN < strikeATN) {
					return -thrustATN;
				} else {
					return strikeATN;
				}
			} else if(strikeATN < thrustATN) {
				return strikeATN;
			} else {
				return -thrustATN;
			}
		} else if(strikeATN == 0) {
			return -thrustATN;
		} else {
			return strikeATN;
		}
	}
	,getInlineTest: function() {
		var weap = this.weaponListInlineTest[0];
		var testVar = 8 + (Math.random() * this.dtn2 | 0);
		testVar += this.damage;
		var tmp = this.damage2 + testVar + 99999.22222;
		var testVar1 = 5 + (Math.random() * weap.dtn2 | 0);
		testVar1 += weap.damage;
		return tmp + (weap.damage2 + testVar1);
	}
	,getInlineTest2: function(val,val2) {
		if(val2 == null) {
			val2 = 5;
		}
		if(val == null) {
			val = 0;
		}
		var testVar = val + val2 + (Math.random() * this.dtn2 | 0);
		testVar += this.damage;
		return this.damage2 + testVar;
	}
	,__class__: troshx_core_Weapon
};
var troshx_core_ZoneBody = function() {
	this.weightsTotal = 0;
};
troshx_core_ZoneBody.__name__ = true;
troshx_core_ZoneBody.create = function(name,partWeights,parts,weightsTotal) {
	if(weightsTotal == null) {
		weightsTotal = 0;
	}
	var zb = new troshx_core_ZoneBody();
	zb.name = name;
	zb.parts = parts;
	zb.partWeights = partWeights;
	zb.weightsTotal = weightsTotal;
	if(weightsTotal == 0) {
		zb.recalcWeightsTotal();
	}
	return zb;
};
troshx_core_ZoneBody.prototype = {
	recalcWeightsTotal: function() {
		var accum = 0;
		var i = this.partWeights.length;
		while(--i > -1) accum += this.partWeights[i];
		this.weightsTotal = accum;
	}
	,getBodyPart: function(floatRatio) {
		floatRatio *= this.weightsTotal;
		var accum = 0;
		var result = 0;
		var _g1 = 0;
		var _g = this.partWeights.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(floatRatio < accum) {
				break;
			}
			accum += this.partWeights[i];
			result = i;
		}
		return this.parts[result];
	}
	,__class__: troshx_core_ZoneBody
};
var troshx_ds_IMatchArray = function() { };
troshx_ds_IMatchArray.__name__ = true;
troshx_ds_IMatchArray.prototype = {
	__class__: troshx_ds_IMatchArray
};
var troshx_ds_HashedArray = function() {
	this.hash = { };
	this.list = [];
};
troshx_ds_HashedArray.__name__ = true;
troshx_ds_HashedArray.__interfaces__ = [troshx_ds_IMatchArray];
troshx_ds_HashedArray.prototype = {
	add: function(item) {
		var uid = item.get_uid();
		if(!this.hashContains(item)) {
			this.hash[uid] = item;
			this.list.push(item);
		} else {
			var fw = Reflect.field(this.hash,uid);
			fw.updateAgainst(item);
		}
	}
	,'delete': function(item) {
		var uid = item.get_uid();
		if(this.hashContains(item)) {
			Reflect.deleteField(this.hash,uid);
		} else {
			console.log("Warning: No item found to be removed for uid:" + item.get_uid());
		}
		var index = this.list.indexOf(item);
		if(index >= 0) {
			this.list.splice(index,1);
		} else {
			console.log("Warning: No item found to be removed for array index:" + index);
		}
	}
	,contains: function(item) {
		return this.hashContains(item);
	}
	,hashContains: function(item) {
		var o = this.hash;
		var field = item.get_uid();
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	,listContains: function(item) {
		return this.list.indexOf(item) >= 0;
	}
	,__class__: troshx_ds_HashedArray
};
var troshx_ds_IDMatchArray = function() {
	this.list = [];
};
troshx_ds_IDMatchArray.__name__ = true;
troshx_ds_IDMatchArray.__interfaces__ = [troshx_ds_IMatchArray];
troshx_ds_IDMatchArray.prototype = {
	add: function(item) {
		item.get_uid();
		var matchingItem = this.getMatchingItem(item);
		if(matchingItem == null) {
			this.list.push(matchingItem);
		} else {
			matchingItem.updateAgainst(item);
			var testIndex;
			var tmp;
			if(item != matchingItem) {
				testIndex = this.list.indexOf(item);
				tmp = testIndex >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.list.splice(testIndex,1);
			}
		}
	}
	,'delete': function(item) {
		item.get_uid();
		if(!this.contains(item)) {
			console.log("Warning: No item found to be removed for uid:" + item.get_uid());
		}
		var index = this.list.indexOf(item);
		if(index >= 0) {
			this.list.splice(index,1);
		} else {
			console.log("Warning: No item found to be removed for array index:" + index);
		}
	}
	,contains: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) if(this.list[_g1++].get_uid() == item.get_uid()) {
			return true;
		}
		return false;
	}
	,getMatchingItem: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var a = this.list[_g1++];
			if(a.get_uid() == item.get_uid()) {
				return a;
			}
		}
		return null;
	}
	,listContains: function(item) {
		return this.list.indexOf(item) >= 0;
	}
	,__class__: troshx_ds_IDMatchArray
};
var troshx_ds_IUpdateWith = function() { };
troshx_ds_IUpdateWith.__name__ = true;
troshx_ds_IUpdateWith.prototype = {
	__class__: troshx_ds_IUpdateWith
};
var troshx_sos_BoutController = function(model) {
	this.model = model;
	var namespaceVal = Math.random() > 0?Math.random() + "aaw":"arawb";
	namespaceVal += "BBB";
	this.doThis(namespaceVal + "specialthing");
};
troshx_sos_BoutController.__name__ = true;
troshx_sos_BoutController.__interfaces__ = [troshx_core_IBoutController];
troshx_sos_BoutController.prototype = {
	waitForPlayer: function() {
		return null;
	}
	,testInlineConstantOptimization: function(value,$namespace) {
		if($namespace != null) {
			return this.doThis($namespace + "specialthing");
		} else {
			return this.doThis("specialthing");
		}
	}
	,testInlineConstantOptimization2: function(value,usenameSpace,$namespace) {
		if($namespace == null) {
			$namespace = "";
		}
		if(usenameSpace == null) {
			usenameSpace = false;
		}
		if(usenameSpace) {
			return this.doThis($namespace + "specialthing");
		} else {
			return this.doThis("specialthing");
		}
	}
	,doThis: function(str) {
		return str;
	}
	,step: function() {
		this.model.bout.state.step(this.model.bout.state.s == 2);
		var _g_head = this.model.bout.combatants.h;
		while(_g_head != null) {
			var val = _g_head.item;
			_g_head = _g_head.next;
			var _this = val.fight;
			var other = this.model.bout.state;
			_this.s = other.s;
			_this.e = other.e;
		}
	}
	,handleCurrentStep: function() {
		var step = this.model.bout.state.s;
		if(step == 0) {
			return true;
		} else if(step == 1) {
			return true;
		} else if(step == 2) {
			return true;
		} else {
			throw new js__$Boot_HaxeError("Unhandled step:" + step);
		}
	}
	,__class__: troshx_sos_BoutController
};
var troshx_sos_BoutModel = function() {
	this.defManueverStack = new troshx_core_ManueverStack();
	this.manueverStack = new troshx_core_ManueverStack();
	this._messages = [];
	this.bout = new troshx_components_Bout();
};
troshx_sos_BoutModel.__name__ = true;
troshx_sos_BoutModel.__interfaces__ = [troshx_core_IBoutModel];
troshx_sos_BoutModel.Get_something = function(state,getters,rootState,rootGetters) {
};
troshx_sos_BoutModel.prototype = {
	setBout: function(val) {
		this.bout = val;
	}
	,getMessages: function() {
		return this._messages;
	}
	,getMessagesCount: function() {
		return this._messages.length;
	}
	,clearMessages: function() {
		this._messages.length = 0;
	}
	,__class__: troshx_sos_BoutModel
};
var troshx_sos_core_Item = function(id,name) {
	if(name == null) {
		name = "";
	}
	this.weight = 0;
	this.id = id != null?id:"Item_" + troshx_sos_core_Item.UID_COUNT++;
	this.name = name;
};
troshx_sos_core_Item.__name__ = true;
troshx_sos_core_Item.prototype = {
	get_uid: function() {
		return this.id;
	}
	,__class__: troshx_sos_core_Item
};
var troshx_sos_core_Armor = function() {
	this.tags = "";
	this.coverage = { };
	this.AVB = 0;
	this.AVP = 0;
	this.AVC = 0;
	troshx_sos_core_Item.call(this);
};
troshx_sos_core_Armor.__name__ = true;
troshx_sos_core_Armor.__super__ = troshx_sos_core_Item;
troshx_sos_core_Armor.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_Armor
});
var troshx_sos_core_HitLocation = function() {
	this.id = "";
	this.name = "";
};
troshx_sos_core_HitLocation.__name__ = true;
troshx_sos_core_HitLocation.prototype = {
	get_uid: function() {
		var n = this.name;
		if(this.id != "" && this.id != null) {
			return this.id;
		} else {
			return n;
		}
	}
	,__class__: troshx_sos_core_HitLocation
};
var troshx_sos_core_Inventory = function() {
	this.weapons = [];
	this.shields = [];
	this.equipedNonMeleeItems = [];
	this.wornArmor = [];
	this.dropPack = false;
	this.packed = new troshx_ds_IDMatchArray();
	this.dropped = new troshx_ds_IDMatchArray();
};
troshx_sos_core_Inventory.__name__ = true;
troshx_sos_core_Inventory.prototype = {
	holdItem: function(item,preferOffhand) {
		if(preferOffhand == null) {
			preferOffhand = false;
		}
		if(js_Boot.__instanceof(item,troshx_sos_core_Weapon)) {
			this.holdWeapon(js_Boot.__instanceof(item,troshx_sos_core_Weapon)?item:null,preferOffhand);
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Shield)) {
			this.holdShield(js_Boot.__instanceof(item,troshx_sos_core_Shield)?item:null,true);
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Armor)) {
			console.log("You can't hold armor!! Equiping item instead!");
		} else {
			this.holdNonMeleeItem(item,preferOffhand);
		}
	}
	,unholdItem: function(item) {
		return 0;
	}
	,packItem: function(item) {
		if(this.unholdItem(item) == 1) {
			return;
		}
	}
	,dropItem: function(item) {
		if(this.unholdItem(item) == 2) {
			return;
		}
	}
	,equipItem: function(item,unheldRemark) {
		var unheld = 0;
		unheld = this.unholdItem(item);
		if(unheld == 4) {
			return;
		}
		if(js_Boot.__instanceof(item,troshx_sos_core_Weapon)) {
			this.weapons.push({ weapon : js_Boot.__instanceof(item,troshx_sos_core_Weapon)?item:null, held : 0, unheld : 4, unheldRemark : unheldRemark});
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Shield)) {
			this.shields.push({ shield : js_Boot.__instanceof(item,troshx_sos_core_Shield)?item:null, held : 0, unheld : 4, unheldRemark : unheldRemark});
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Armor)) {
			var a = js_Boot.__instanceof(item,troshx_sos_core_Armor)?item:null;
			if(this.wornArmor.indexOf(a) < 0) {
				console.log("Armor already equiped!");
				return;
			}
			this.wornArmor.push(a);
		} else {
			this.equipedNonMeleeItems.push({ item : item, held : 0, unheld : 4, unheldRemark : unheldRemark});
		}
	}
	,holdWeapon: function(weapon,preferOffhand) {
	}
	,holdShield: function(shield,preferOffhand) {
	}
	,holdNonMeleeItem: function(item,preferOffhand) {
	}
	,__class__: troshx_sos_core_Inventory
};
var troshx_sos_core_ItemQty = function() {
	this.item = null;
};
troshx_sos_core_ItemQty.__name__ = true;
troshx_sos_core_ItemQty.__interfaces__ = [troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_ItemQty.prototype = {
	ItemQty: function(item,qty) {
		if(qty == null) {
			qty = 1;
		}
		this.item = item != null?item:new troshx_sos_core_Item();
		this.qty = qty;
	}
	,updateAgainst: function(ref) {
		this.qty += ref.qty;
	}
	,get_uid: function() {
		return this.item.id;
	}
	,__class__: troshx_sos_core_ItemQty
};
var troshx_sos_core_Money = function() {
	this.cp = 0;
	this.sp = 0;
	this.gp = 0;
};
troshx_sos_core_Money.__name__ = true;
troshx_sos_core_Money.prototype = {
	__class__: troshx_sos_core_Money
};
var troshx_sos_core_Profeciency = function() {
	this.name = "";
};
troshx_sos_core_Profeciency.__name__ = true;
troshx_sos_core_Profeciency.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_Profeciency
};
var troshx_sos_core_School = function() {
	this.profLimit = 0;
	this.name = "";
};
troshx_sos_core_School.__name__ = true;
troshx_sos_core_School.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_School
};
var troshx_sos_core_Shield = function() {
	this.strapped = false;
	this.coverage = { };
	this.block = 0;
	this.AV = 0;
	troshx_sos_core_Item.call(this);
};
troshx_sos_core_Shield.__name__ = true;
troshx_sos_core_Shield.__super__ = troshx_sos_core_Item;
troshx_sos_core_Shield.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_Shield
});
var troshx_sos_core_Skill = function() {
	this.name = "";
};
troshx_sos_core_Skill.__name__ = true;
troshx_sos_core_Skill.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_Skill
};
var troshx_sos_core_Talent = function() {
	this.level = 0;
	this.name = "";
};
troshx_sos_core_Talent.__name__ = true;
troshx_sos_core_Talent.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_Talent.prototype = {
	get_uid: function() {
		return this.name + "_" + this.level;
	}
	,get_label: function() {
		return this.name + (this.level >= 1?"(" + this.level + ")":"");
	}
	,__class__: troshx_sos_core_Talent
};
var troshx_sos_core_Weapon = function() {
	this.twoHanded = false;
	troshx_sos_core_Item.call(this);
};
troshx_sos_core_Weapon.__name__ = true;
troshx_sos_core_Weapon.__super__ = troshx_sos_core_Item;
troshx_sos_core_Weapon.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_Weapon
});
var troshx_sos_core_Wound = function() {
	this.treated = false;
	this.BL = 0;
	this.pain = 0;
	this.stun = 0;
	this.damageType = 0;
	this.level = 0;
	this.location = null;
};
troshx_sos_core_Wound.__name__ = true;
troshx_sos_core_Wound.__interfaces__ = [troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_Wound.prototype = {
	get_labelLocation: function() {
		if(this.location != null) {
			return this.location.name;
		} else {
			return "";
		}
	}
	,updateAgainst: function(ref) {
		if(ref.stun > this.stun) {
			this.stun = ref.stun;
		}
		if(ref.pain > this.pain) {
			this.pain = ref.pain;
		}
		if(ref.BL > this.BL) {
			this.BL = ref.BL;
		}
		ref.treated = false;
	}
	,get_uid: function() {
		var _this = this.location;
		var n = _this.name;
		return (_this.id != "" && _this.id != null?_this.id:n) + "_" + this.level + "_" + (this.damageType >= 0?this.damageType:troshx_sos_core_Wound.UNIQUE_COUNT++);
	}
	,__class__: troshx_sos_core_Wound
};
var troshx_sos_sheets_CharSheet = function() {
	this.woundHash = { };
	this.wounds = [];
	this.inventory = new troshx_sos_core_Inventory();
	this.arcFlaw = "";
	this.arcGlory = "";
	this.arcBelief = "";
	this.arcEpic = "";
	this.arcSaga = "";
	this.arcSpent = 0;
	this.arcPointsAccum = 0;
	this.talents = [];
	this.skills = [];
	this.wealthAssets = [];
	this.money = new troshx_sos_core_Money();
	this.miscCPBonus = 0;
	this.fatique = 0;
	this.schoolProfeciencies = [];
	this.schoolLevel = 0;
	this.school = null;
	this.gritAccum = 0;
	this.perception = 4;
	this.intelligence = 4;
	this.wit = 4;
	this.willpower = 4;
	this.health = 4;
	this.endurance = 4;
	this.agility = 4;
	this.strength = 4;
	this.age = -1;
	this.sex = "";
	this.socialClass = "";
	this.race = "";
	this.name = "";
};
troshx_sos_sheets_CharSheet.__name__ = true;
troshx_sos_sheets_CharSheet.prototype = {
	applyWound: function(w) {
		var _this = w.location;
		var n = _this.name;
		var uid = (_this.id != "" && _this.id != null?_this.id:n) + "_" + w.level + "_" + (w.damageType >= 0?w.damageType:troshx_sos_core_Wound.UNIQUE_COUNT++);
		if(!Object.prototype.hasOwnProperty.call(this.woundHash,uid)) {
			this.woundHash[uid] = w;
		} else {
			var fw = Reflect.field(this.woundHash,uid);
			fw.updateAgainst(w);
		}
	}
	,removeWound: function(w) {
		var _this = w.location;
		var n = _this.name;
		var uid = (_this.id != "" && _this.id != null?_this.id:n) + "_" + w.level + "_" + (w.damageType >= 0?w.damageType:troshx_sos_core_Wound.UNIQUE_COUNT++);
		if(Object.prototype.hasOwnProperty.call(this.woundHash,uid)) {
			Reflect.deleteField(this.woundHash,uid);
		} else {
			var _this1 = w.location;
			var n1 = _this1.name;
			console.log("Warning: No wound found to be removed for uid:" + ((_this1.id != "" && _this1.id != null?_this1.id:n1) + "_" + w.level + "_" + (w.damageType >= 0?w.damageType:troshx_sos_core_Wound.UNIQUE_COUNT++)));
		}
		var index = this.wounds.indexOf(w);
		if(index >= 0) {
			this.wounds.splice(index,1);
		} else {
			console.log("Warning: No wound found to be removed for array index:" + index);
		}
	}
	,get_totalPain: function() {
		var c = 0;
		var _g1 = 0;
		var _g = this.wounds.length;
		while(_g1 < _g) c += this.wounds[_g1++].pain;
		return c;
	}
	,get_totalBloodLost: function() {
		var c = 0;
		var _g1 = 0;
		var _g = this.wounds.length;
		while(_g1 < _g) c += this.wounds[_g1++].BL;
		return c;
	}
	,get_ADR: function() {
		return (this.agility + this.wit) / 2 | 0;
	}
	,get_MOB: function() {
		return (this.strength + this.agility + this.endurance) / 2 | 0;
	}
	,get_CAR: function() {
		return this.strength + this.endurance;
	}
	,get_CHA: function() {
		return (this.willpower + this.wit + this.perception) / 2 | 0;
	}
	,get_GRIT: function() {
		return (this.willpower / 2 | 0) + this.gritAccum;
	}
	,get_baseGrit: function() {
		return this.willpower / 2 | 0;
	}
	,get_TOU: function() {
		return 4;
	}
	,get_SDB: function() {
		return this.strength / 2 | 0;
	}
	,get_labelRace: function() {
		return this.race;
	}
	,get_labelSex: function() {
		return this.sex;
	}
	,get_labelSchool: function() {
		if(this.school != null) {
			return this.school.name;
		} else {
			return "";
		}
	}
	,get_meleeCP: function() {
		return (this.schoolLevel >= 1?this.schoolLevel + 4:0) + ((this.agility + this.wit) / 2 | 0) + this.miscCPBonus - this.get_totalPain();
	}
	,get_schoolCP: function() {
		if(this.schoolLevel >= 1) {
			return this.schoolLevel + 4;
		} else {
			return 0;
		}
	}
	,get_skillPenalty: function() {
		return 0;
	}
	,get_recoveryRate: function() {
		return 0;
	}
	,get_encumbranceLvl: function() {
		return 0;
	}
	,get_exhaustionRate: function() {
		return 0;
	}
	,get_mobWithMods: function() {
		return (this.strength + this.agility + this.endurance) / 2 | 0;
	}
	,get_arcPointsAvailable: function() {
		return this.arcPointsAccum - this.arcSpent;
	}
	,__class__: troshx_sos_sheets_CharSheet
};
var troshx_util_DiceRoller = function() { };
troshx_util_DiceRoller.__name__ = true;
troshx_util_DiceRoller.getRollNumSuccesses = function(amountDice,tn) {
	var result;
	troshx_util_DiceRoller.NUM_ONES = 0;
	var i = amountDice;
	var numSuccesses = 0;
	var numStacks = 0;
	while(--i > -1) {
		result = (Math.random() * 10 | 0) + 1;
		if(result == 1) {
			troshx_util_DiceRoller.NUM_ONES++;
		}
		numSuccesses += result >= tn?1:0;
		numStacks += tn > 10 && result == 10?1:0;
	}
	while(numStacks > 0) {
		i = numStacks;
		while(--i > -1) {
			result = (Math.random() * 10 | 0) + 1;
			numSuccesses += result >= tn - 10?1:0;
		}
	}
	troshx_util_DiceRoller.LAST_ROLL_SUCCESSES = numSuccesses;
	return numSuccesses;
};
troshx_util_DiceRoller.makeChallengeRoll = function(amountDice,tn,requiredSuccesses) {
	var numSuccesses = troshx_util_DiceRoller.getRollNumSuccesses(amountDice,tn);
	if(numSuccesses >= requiredSuccesses) {
		return numSuccesses - requiredSuccesses;
	} else if(troshx_util_DiceRoller.NUM_ONES >= (amountDice > 1?2:1)) {
		return -2;
	} else {
		return -1;
	}
};
troshx_util_DiceRoller.makeIndividualRoll = function(amountDice,tn,tarObject) {
	if(tarObject != null) {
		tarObject = tarObject;
	} else {
		tarObject = { successes : 0, mayBotch : false};
	}
	tarObject.successes = troshx_util_DiceRoller.getRollNumSuccesses(amountDice,tn);
	tarObject.mayBotch = troshx_util_DiceRoller.NUM_ONES >= (amountDice > 1?2:1);
	return tarObject;
};
var troshx_util_LibUtil = function() { };
troshx_util_LibUtil.__name__ = true;
troshx_util_LibUtil.validInt = function(val) {
	if(val != null) {
		return !isNaN(val);
	} else {
		return false;
	}
};
troshx_util_LibUtil["as"] = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
troshx_util_LibUtil.asNoInline = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
troshx_util_LibUtil.tryParseFloat = function(val) {
	return parseFloat(val);
};
troshx_util_LibUtil.tryParseInt = function(val) {
	return Std.parseInt(val);
};
troshx_util_LibUtil.field = function(of,field) {
	return Reflect.field(of,field);
};
troshx_util_LibUtil.setField = function(of,field,value) {
	of[field] = value;
};
troshx_util_LibUtil.setFieldChain = function(of,field,value) {
	of[field] = value;
	return value;
};
troshx_util_LibUtil.arrayToList = function(arr) {
	var list = new List();
	var _g = 0;
	while(_g < arr.length) {
		var val = arr[_g];
		++_g;
		list.add(val);
	}
	return list;
};
troshx_util_LibUtil.getArrayItemAtIndex = function(arr,index) {
	return arr[index];
};
troshx_util_LibUtil.getListItemAtIndex = function(list,index) {
	if(index < 0 || index >= list.length) {
		return null;
	}
	var iter_head = list.h;
	var _g1 = 0;
	while(_g1 < index) {
		++_g1;
		iter_head = iter_head.next;
	}
	return iter_head.item;
};
troshx_util_LibUtil.clearArray = function(arr) {
	arr.length = 0;
};
troshx_util_LibUtil.truncateArray = function(arr,fromIndex) {
	arr.length = fromIndex;
};
troshx_util_LibUtil.findForList = function(list,f) {
	var _g_head = list.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		if(f(val)) {
			return val;
		}
	}
	return null;
};
troshx_util_LibUtil.minI = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.maxI = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.minI_ = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.maxI_ = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.removeArrayItemAtIndex = function(arr,index) {
	arr.splice(index,1);
};
var troshx_util_StringHashId = function() { };
troshx_util_StringHashId.__name__ = true;
troshx_util_StringHashId.get = function() {
	return "i" + troshx_util_StringHashId.COUNT++;
};
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
js_Boot.__toStr = { }.toString;
troshx_components_FightState.__meta__ = { fields : { target : { ref : null}}};
troshx_components_FightState.GOT_INITIATIVE = 2;
troshx_components_FightState.CONTESTING_INITIATIVE = 1;
troshx_components_FightState.NO_INITIATIVE = 0;
troshx_components_FightState.REROLL_INITIATIVE = -1;
troshx_components_FightState.UNCERTAIN_INITATIVE = -10;
troshx_components_FightState.UNCERTAIN_INITIATIVE_RESOLVED = 10;
troshx_components_FightState.ORIENTATION_NONE = 0;
troshx_components_FightState.ORIENTATION_DEFENSIVE = 1;
troshx_components_FightState.ORIENTATION_CAUTIOUS = 2;
troshx_components_FightState.ORIENTATION_AGGRESSIVE = 3;
troshx_components_FightState.ORIENTATION_STRINGS = ["None","Defensive","Cautious","Aggressive"];
troshx_core_BodyChar.D_DESTROY_PART = 1;
troshx_core_BodyChar.D_DEATH = 2;
troshx_core_BodyChar.WOUND_TYPE_CUT = 1;
troshx_core_BodyChar.WOUND_TYPE_PIERCE = 2;
troshx_core_BodyChar.WOUND_TYPE_BLUNT_TRAUMA = 4;
troshx_core_BodyChar.WOUND_D_DESTROY = 1;
troshx_core_BodyChar.WOUND_D_DEATH = 2;
troshx_core_BoutMessage.TYPE_NONE = 0;
troshx_core_BoutMessage.TYPE_PLAYERS_TURN = 1;
troshx_core_BoutMessage.TYPE_RESOLVE_MANUEVER = 2;
troshx_core_Manuever.EVASIVE_TRUE = 1;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE = 2;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE_TARGET = 4;
troshx_core_Manuever.EVASIVE_UNTARGET_FROM_ENEMY = 8;
troshx_core_Manuever.EVASIVE_UNTARGET = 16;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE_MUTUAL = 6;
troshx_core_Manuever.EVASIVE_UNTARGET_MUTUAL = 24;
troshx_core_Manuever.MANUEVER_HAND_NONE = 0;
troshx_core_Manuever.MANUEVER_HAND_MASTER = 1;
troshx_core_Manuever.MANUEVER_HAND_SECONDARY = 2;
troshx_core_Manuever.MANUEVER_HAND_BOTH = 3;
troshx_core_Manuever.MANUEVER_TYPE_MELEE = 0;
troshx_core_Manuever.MANUEVER_TYPE_RANGED = 1;
troshx_core_Manuever.DAMAGE_TYPE_NONE = 0;
troshx_core_Manuever.DAMAGE_TYPE_CUTTING = 1;
troshx_core_Manuever.DAMAGE_TYPE_PUNCTURING = 2;
troshx_core_Manuever.DAMAGE_TYPE_BLUDGEONING = 3;
troshx_core_Manuever.ATTACK_TYPE_STRIKE = 1;
troshx_core_Manuever.ATTACK_TYPE_THRUST = 2;
troshx_core_Manuever.DEFEND_TYPE_OFFHAND = 1;
troshx_core_Manuever.DEFEND_TYPE_MASTERHAND = 2;
troshx_core_Manuever.TYPE_NONE = 0;
troshx_core_Manuever.TYPE_DEFENSIVE = 1;
troshx_core_Manuever.TYPE_OFFENSIVE = 2;
troshx_core_Weapon.__rtti = "<class path=\"troshx.core.Weapon\" params=\"\">\n\t<ATTR_BASE_NONE public=\"1\" get=\"inline\" set=\"null\" expr=\"-1\" line=\"39\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>-1</e></m></meta>\n\t</ATTR_BASE_NONE>\n\t<ATTR_BASE_STRENGTH public=\"1\" get=\"inline\" set=\"null\" expr=\"0\" line=\"40\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>0</e></m></meta>\n\t</ATTR_BASE_STRENGTH>\n\t<HOOK_STRIKE get=\"inline\" set=\"null\" expr=\"1\" line=\"42\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>1</e></m></meta>\n\t</HOOK_STRIKE>\n\t<HOOK_THRUST get=\"inline\" set=\"null\" expr=\"2\" line=\"43\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>2</e></m></meta>\n\t</HOOK_THRUST>\n\t<createDyn public=\"1\" set=\"method\" line=\"129\" static=\"1\"><f a=\"name:profGroups:properties\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<d/>\n\t<c path=\"troshx.core.Weapon\"/>\n</f></createDyn>\n\t<atn public=\"1\"><x path=\"Int\"/></atn>\n\t<atn2 public=\"1\"><x path=\"Int\"/></atn2>\n\t<dtn public=\"1\"><x path=\"Int\"/></dtn>\n\t<dntT public=\"1\"><x path=\"Int\"/></dntT>\n\t<dtn2 public=\"1\"><x path=\"Int\"/></dtn2>\n\t<damage public=\"1\"><x path=\"Int\"/></damage>\n\t<damage2 public=\"1\"><x path=\"Int\"/></damage2>\n\t<damage3 public=\"1\"><x path=\"Int\"/></damage3>\n\t<shield public=\"1\"><x path=\"Bool\"/></shield>\n\t<profeciencies public=\"1\"><c path=\"Array\"><c path=\"String\"/></c></profeciencies>\n\t<name public=\"1\"><c path=\"String\"/></name>\n\t<drawCutModifier public=\"1\"><x path=\"Int\"/></drawCutModifier>\n\t<attrBaseIndex public=\"1\"><x path=\"Int\"/></attrBaseIndex>\n\t<twoHanded public=\"1\"><x path=\"Bool\"/></twoHanded>\n\t<rangedWeapon public=\"1\"><x path=\"Bool\"/></rangedWeapon>\n\t<cpPenalty public=\"1\"><x path=\"Float\"/></cpPenalty>\n\t<movePenalty public=\"1\"><x path=\"Float\"/></movePenalty>\n\t<shieldLimit public=\"1\"><x path=\"Int\"/></shieldLimit>\n\t<blunt public=\"1\"><x path=\"Bool\"/></blunt>\n\t<range public=\"1\"><x path=\"Int\"/></range>\n\t<hooking public=\"1\"><x path=\"Int\"/></hooking>\n\t<getDamageTo public=\"1\" set=\"method\" line=\"46\"><f a=\"body:manuever:targetZone:margin:strength\">\n\t<c path=\"troshx.core.BodyChar\"/>\n\t<c path=\"troshx.core.Manuever\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></getDamageTo>\n\t<getHookingATN public=\"1\" set=\"method\" line=\"65\">\n\t\t<f a=\"?tieBiasToThrust\" v=\"false\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ tieBiasToThrust : false }</e></m></meta>\n\t</getHookingATN>\n\t<getHookingATNType public=\"1\" set=\"method\" line=\"79\">\n\t\t<f a=\"?tieBiasToThrust\" v=\"false\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ tieBiasToThrust : false }</e></m></meta>\n\t</getHookingATNType>\n\t<getInlineTest public=\"1\" get=\"inline\" set=\"null\" line=\"87\"><f a=\"\"><x path=\"Float\"/></f></getInlineTest>\n\t<weaponListInlineTest public=\"1\"><c path=\"Array\"><c path=\"troshx.core.Weapon\"/></c></weaponListInlineTest>\n\t<getInlineTest2 public=\"1\" get=\"inline\" set=\"null\" line=\"97\">\n\t\t<f a=\"?val:?val2\" v=\"0:5\">\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ val2 : 5, val : 0 }</e></m></meta>\n\t</getInlineTest2>\n\t<new public=\"1\" set=\"method\" line=\"106\"><f a=\"name:profGroups\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
troshx_core_Weapon.ATTR_BASE_NONE = -1;
troshx_core_Weapon.ATTR_BASE_STRENGTH = 0;
troshx_core_Weapon.HOOK_STRIKE = 1;
troshx_core_Weapon.HOOK_THRUST = 2;
troshx_sos_BoutController.STEP_ORIENTATION_OR_RESOLVE = 0;
troshx_sos_BoutController.STEP_TARGET_SELECTION = 1;
troshx_sos_BoutController.STEP_DECLARATION = 2;
troshx_sos_BoutController.TOTAL_STEPS = 3;
troshx_sos_core_Item.UID_COUNT = 0;
troshx_sos_core_Inventory.HELD_LEFT = 1;
troshx_sos_core_Inventory.HELD_RIGHT = 2;
troshx_sos_core_Inventory.HELD_BOTH = 3;
troshx_sos_core_Inventory.UNHELD_PACKED = 1;
troshx_sos_core_Inventory.UNHELD_DROPPED = 2;
troshx_sos_core_Inventory.UNHELD_EQUIPPED = 4;
troshx_sos_core_Wound.UNIQUE_COUNT = 0;
troshx_util_DiceRoller.NUM_ONES = 0;
troshx_util_DiceRoller.LAST_ROLL_SUCCESSES = 0;
troshx_util_DiceRoller.ROLL_RESULT_BOTCH = -2;
troshx_util_DiceRoller.ROLL_RESULT_DRAW = 0;
troshx_util_DiceRoller.ROLL_RESULT_FAILED = -1;
troshx_util_StringHashId.COUNT = 0;
MainSOS.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);

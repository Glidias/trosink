// Generated by Haxe 3.4.2 (git build master @ 890f8c7)
(function ($hx_exports, $global) { "use strict";
$hx_exports["troshx"] = $hx_exports["troshx"] || {};
$hx_exports["troshx"]["tros"] = $hx_exports["troshx"]["tros"] || {};
;$hx_exports["troshx"]["core"] = $hx_exports["troshx"]["core"] || {};
var $estr = function() { return js_Boot.__string_rec(this,''); };
function $extend(from, fields) {
	function Inherit() {} Inherit.prototype = from; var proto = new Inherit();
	for (var name in fields) proto[name] = fields[name];
	if( fields.toString !== Object.prototype.toString ) proto.toString = fields.toString;
	return proto;
}
var HxOverrides = function() { };
HxOverrides.__name__ = true;
HxOverrides.cca = function(s,index) {
	var x = s.charCodeAt(index);
	if(x != x) {
		return undefined;
	}
	return x;
};
HxOverrides.substr = function(s,pos,len) {
	if(len == null) {
		len = s.length;
	} else if(len < 0) {
		if(pos == 0) {
			len = s.length + len;
		} else {
			return "";
		}
	}
	return s.substr(pos,len);
};
HxOverrides.iter = function(a) {
	return { cur : 0, arr : a, hasNext : function() {
		return this.cur < this.arr.length;
	}, next : function() {
		return this.arr[this.cur++];
	}};
};
var List = function() {
	this.length = 0;
};
List.__name__ = true;
List.prototype = {
	add: function(item) {
		var x = new _$List_ListNode(item,null);
		if(this.h == null) {
			this.h = x;
		} else {
			this.q.next = x;
		}
		this.q = x;
		this.length++;
	}
	,iterator: function() {
		return new _$List_ListIterator(this.h);
	}
	,__class__: List
};
var _$List_ListNode = function(item,next) {
	this.item = item;
	this.next = next;
};
_$List_ListNode.__name__ = true;
_$List_ListNode.prototype = {
	__class__: _$List_ListNode
};
var _$List_ListIterator = function(head) {
	this.head = head;
};
_$List_ListIterator.__name__ = true;
_$List_ListIterator.prototype = {
	hasNext: function() {
		return this.head != null;
	}
	,next: function() {
		var val = this.head.item;
		this.head = this.head.next;
		return val;
	}
	,__class__: _$List_ListIterator
};
var MainSOSCharGenTest = function() {
	this.boot = new haxevx_vuex_core_VxBoot();
	this.boot.startVueWithRootComponent("#app",new troshx_sos_vue_CharGen());
	haxevx_vuex_core_VxBoot.notifyStarted();
};
MainSOSCharGenTest.__name__ = true;
MainSOSCharGenTest.main = function() {
	new MainSOSCharGenTest();
};
MainSOSCharGenTest.prototype = {
	__class__: MainSOSCharGenTest
};
Math.__name__ = true;
var Reflect = function() { };
Reflect.__name__ = true;
Reflect.field = function(o,field) {
	try {
		return o[field];
	} catch( e ) {
		return null;
	}
};
Reflect.fields = function(o) {
	var a = [];
	if(o != null) {
		var hasOwnProperty = Object.prototype.hasOwnProperty;
		for( var f in o ) {
		if(f != "__id__" && f != "hx__closures__" && hasOwnProperty.call(o,f)) {
			a.push(f);
		}
		}
	}
	return a;
};
Reflect.isFunction = function(f) {
	if(typeof(f) == "function") {
		return !(f.__name__ || f.__ename__);
	} else {
		return false;
	}
};
Reflect.compareMethods = function(f1,f2) {
	if(f1 == f2) {
		return true;
	}
	if(!Reflect.isFunction(f1) || !Reflect.isFunction(f2)) {
		return false;
	}
	if(f1.scope == f2.scope && f1.method == f2.method) {
		return f1.method != null;
	} else {
		return false;
	}
};
Reflect.deleteField = function(o,field) {
	if(!Object.prototype.hasOwnProperty.call(o,field)) {
		return false;
	}
	delete(o[field]);
	return true;
};
var Std = function() { };
Std.__name__ = true;
Std.parseInt = function(x) {
	var v = parseInt(x,10);
	if(v == 0 && (HxOverrides.cca(x,1) == 120 || HxOverrides.cca(x,1) == 88)) {
		v = parseInt(x);
	}
	if(isNaN(v)) {
		return null;
	}
	return v;
};
var StringTools = function() { };
StringTools.__name__ = true;
StringTools.isSpace = function(s,pos) {
	var c = HxOverrides.cca(s,pos);
	if(!(c > 8 && c < 14)) {
		return c == 32;
	} else {
		return true;
	}
};
StringTools.ltrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,r)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,r,l - r);
	} else {
		return s;
	}
};
StringTools.rtrim = function(s) {
	var l = s.length;
	var r = 0;
	while(r < l && StringTools.isSpace(s,l - r - 1)) ++r;
	if(r > 0) {
		return HxOverrides.substr(s,0,l - r);
	} else {
		return s;
	}
};
StringTools.trim = function(s) {
	return StringTools.ltrim(StringTools.rtrim(s));
};
var ValueType = { __ename__ : true, __constructs__ : ["TNull","TInt","TFloat","TBool","TObject","TFunction","TClass","TEnum","TUnknown"] };
ValueType.TNull = ["TNull",0];
ValueType.TNull.toString = $estr;
ValueType.TNull.__enum__ = ValueType;
ValueType.TInt = ["TInt",1];
ValueType.TInt.toString = $estr;
ValueType.TInt.__enum__ = ValueType;
ValueType.TFloat = ["TFloat",2];
ValueType.TFloat.toString = $estr;
ValueType.TFloat.__enum__ = ValueType;
ValueType.TBool = ["TBool",3];
ValueType.TBool.toString = $estr;
ValueType.TBool.__enum__ = ValueType;
ValueType.TObject = ["TObject",4];
ValueType.TObject.toString = $estr;
ValueType.TObject.__enum__ = ValueType;
ValueType.TFunction = ["TFunction",5];
ValueType.TFunction.toString = $estr;
ValueType.TFunction.__enum__ = ValueType;
ValueType.TClass = function(c) { var $x = ["TClass",6,c]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TEnum = function(e) { var $x = ["TEnum",7,e]; $x.__enum__ = ValueType; $x.toString = $estr; return $x; };
ValueType.TUnknown = ["TUnknown",8];
ValueType.TUnknown.toString = $estr;
ValueType.TUnknown.__enum__ = ValueType;
var Type = function() { };
Type.__name__ = true;
Type.createInstance = function(cl,args) {
	var _g = args.length;
	switch(_g) {
	case 0:
		return new cl();
	case 1:
		return new cl(args[0]);
	case 2:
		return new cl(args[0],args[1]);
	case 3:
		return new cl(args[0],args[1],args[2]);
	case 4:
		return new cl(args[0],args[1],args[2],args[3]);
	case 5:
		return new cl(args[0],args[1],args[2],args[3],args[4]);
	case 6:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5]);
	case 7:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6]);
	case 8:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7]);
	case 9:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8]);
	case 10:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9]);
	case 11:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10]);
	case 12:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11]);
	case 13:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12]);
	case 14:
		return new cl(args[0],args[1],args[2],args[3],args[4],args[5],args[6],args[7],args[8],args[9],args[10],args[11],args[12],args[13]);
	default:
		throw new js__$Boot_HaxeError("Too many arguments");
	}
};
Type["typeof"] = function(v) {
	var _g = typeof(v);
	switch(_g) {
	case "boolean":
		return ValueType.TBool;
	case "function":
		if(v.__name__ || v.__ename__) {
			return ValueType.TObject;
		}
		return ValueType.TFunction;
	case "number":
		if(Math.ceil(v) == v % 2147483648.0) {
			return ValueType.TInt;
		}
		return ValueType.TFloat;
	case "object":
		if(v == null) {
			return ValueType.TNull;
		}
		var e = v.__enum__;
		if(e != null) {
			return ValueType.TEnum(e);
		}
		var c = js_Boot.getClass(v);
		if(c != null) {
			return ValueType.TClass(c);
		}
		return ValueType.TObject;
	case "string":
		return ValueType.TClass(String);
	case "undefined":
		return ValueType.TNull;
	default:
		return ValueType.TUnknown;
	}
};
var haxe_IMap = function() { };
haxe_IMap.__name__ = true;
var haxe_ds_StringMap = function() {
	this.h = { };
};
haxe_ds_StringMap.__name__ = true;
haxe_ds_StringMap.__interfaces__ = [haxe_IMap];
haxe_ds_StringMap.prototype = {
	setReserved: function(key,value) {
		if(this.rh == null) {
			this.rh = { };
		}
		this.rh["$" + key] = value;
	}
	,getReserved: function(key) {
		if(this.rh == null) {
			return null;
		} else {
			return this.rh["$" + key];
		}
	}
	,existsReserved: function(key) {
		if(this.rh == null) {
			return false;
		}
		return this.rh.hasOwnProperty("$" + key);
	}
	,keys: function() {
		return HxOverrides.iter(this.arrayKeys());
	}
	,arrayKeys: function() {
		var out = [];
		for( var key in this.h ) {
		if(this.h.hasOwnProperty(key)) {
			out.push(key);
		}
		}
		if(this.rh != null) {
			for( var key in this.rh ) {
			if(key.charCodeAt(0) == 36) {
				out.push(key.substr(1));
			}
			}
		}
		return out;
	}
	,__class__: haxe_ds_StringMap
};
var haxevx_vuex_core_IBuildListed = function() { };
haxevx_vuex_core_IBuildListed.__name__ = true;
var haxevx_vuex_core_IPayload = function() { };
haxevx_vuex_core_IPayload.__name__ = true;
haxevx_vuex_core_IPayload.prototype = {
	__class__: haxevx_vuex_core_IPayload
};
var haxevx_vuex_core_NoneT = function() { };
haxevx_vuex_core_NoneT.__name__ = true;
haxevx_vuex_core_NoneT.prototype = {
	toString: function() {
		return "NoneT";
	}
	,__class__: haxevx_vuex_core_NoneT
};
var haxevx_vuex_core_VComponent = function() {
	this._Init();
};
haxevx_vuex_core_VComponent.__name__ = true;
haxevx_vuex_core_VComponent.__super__ = Object;
haxevx_vuex_core_VComponent.prototype = $extend(Object.prototype,{
	_Init: function() {
	}
	,get__props: function() {
		return this;
	}
	,get__vData: function() {
		return this.$data;
	}
	,PropsData: function() {
		return null;
	}
	,Data: function() {
		return null;
	}
	,Created: function() {
	}
	,BeforeCreate: function() {
	}
	,BeforeDestroy: function() {
	}
	,Destroy: function() {
	}
	,BeforeMount: function() {
	}
	,Mounted: function() {
	}
	,BeforeUpdate: function() {
	}
	,Updated: function() {
	}
	,Activated: function() {
	}
	,Deactivated: function() {
	}
	,El: function() {
		return null;
	}
	,Render: function(c) {
		return null;
	}
	,Template: function() {
		return null;
	}
	,Components: function() {
		return null;
	}
	,GetDefaultPropSettings: function() {
		return null;
	}
	,GetDefaultPropValues: function() {
		return null;
	}
	,__class__: haxevx_vuex_core_VComponent
});
var haxevx_vuex_core_VxBoot = function() {
};
haxevx_vuex_core_VxBoot.__name__ = true;
haxevx_vuex_core_VxBoot.registerModuleWithStore = function(name,mod,store) {
	mod._Init(name + "/");
	store[name] = mod;
	store.registerModule(name,mod);
	haxevx_vuex_core_VxBoot.clearModuleInjStack(store);
};
haxevx_vuex_core_VxBoot.clearModuleInjStack = function(store) {
	var storeGetters = store.getters;
	var stack = haxevx_vuex_core_ModuleStack.stack;
	var i = stack.length;
	while(--i > -1) stack[i]._InjNative(storeGetters);
	haxevx_vuex_core_ModuleStack.stack = [];
};
haxevx_vuex_core_VxBoot.notifyStarted = function() {
};
haxevx_vuex_core_VxBoot.getRenderComponentMethod = function(nativeComp) {
	return function(h) {
		return h(nativeComp,null,null);
	};
};
haxevx_vuex_core_VxBoot.prototype = {
	startStore: function(storeParams) {
		if(this.STORE != null) {
			throw new js__$Boot_HaxeError("Vuex store already started! Only 1 store is allowed");
		}
		var metaFields;
		var md;
		var noNamespaceGetterProps;
		var store = new Vuex.Store(storeParams);
		var o;
		var storeGetters = store.getters;
		var stack = haxevx_vuex_core_ModuleStack.stack;
		var i = stack.length;
		while(--i > -1) stack[i]._InjNative(storeGetters);
		stack = [];
		if(storeParams.modules != null) {
			var _g = 0;
			o = storeParams.modules;
			var _g1 = Reflect.fields(o);
			while(_g < _g1.length) {
				var p = _g1[_g];
				++_g;
				var m = Reflect.field(o,p);
				md = storeParams[p];
				store[p] = md;
			}
		}
		this.STORE = store;
		return store;
	}
	,startVueWithRootComponent: function(el,rootComponent) {
		var bootVueParams = { };
		bootVueParams.el = el;
		if(this.STORE != null) {
			bootVueParams["store"] = this.STORE;
		}
		bootVueParams.render = haxevx_vuex_core_VxBoot.getRenderComponentMethod(rootComponent);
		var vm = new Vue(bootVueParams);
		haxevx_vuex_core_VxBoot.notifyStarted();
		return vm;
	}
	,__class__: haxevx_vuex_core_VxBoot
};
var haxevx_vuex_core_ModuleStack = function() { };
haxevx_vuex_core_ModuleStack.__name__ = true;
var haxevx_vuex_core_VxMacroUtil = function() { };
haxevx_vuex_core_VxMacroUtil.__name__ = true;
haxevx_vuex_core_VxMacroUtil.dynamicSet = function(dyn,key,value) {
	dyn[key] = value;
};
haxevx_vuex_core_VxMacroUtil.dynamicSetPropValueInto = function(into,propSettingField,from) {
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var curSetting = Reflect.field(into,f);
		if(curSetting == null) {
			curSetting = { };
			into[f] = curSetting;
		}
		curSetting[propSettingField] = Reflect.field(from,f);
	}
};
haxevx_vuex_core_VxMacroUtil.dynamicSetPropSettingInto = function(into,from) {
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		var setting = Reflect.field(from,f);
		var curSetting = Reflect.field(into,f);
		if(curSetting != null) {
			var _g2 = 0;
			var _g3 = Reflect.fields(setting);
			while(_g2 < _g3.length) {
				var d = _g3[_g2];
				++_g2;
				curSetting[d] = Reflect.field(setting,d);
			}
		} else {
			into[f] = setting;
		}
	}
};
haxevx_vuex_core_VxMacroUtil.dynamicSetOverwrite = function(into,from) {
	var _g = 0;
	var _g1 = Reflect.fields(from);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		into[f] = Reflect.field(from,f);
	}
};
var haxevx_vuex_native_ActionContext = function() { };
haxevx_vuex_native_ActionContext.__name__ = true;
haxevx_vuex_native_ActionContext.prototype = {
	__class__: haxevx_vuex_native_ActionContext
};
var haxevx_vuex_util_VHTMacros = function() { };
haxevx_vuex_util_VHTMacros.__name__ = true;
var js__$Boot_HaxeError = function(val) {
	Error.call(this);
	this.val = val;
	this.message = String(val);
	if(Error.captureStackTrace) {
		Error.captureStackTrace(this,js__$Boot_HaxeError);
	}
};
js__$Boot_HaxeError.__name__ = true;
js__$Boot_HaxeError.wrap = function(val) {
	if((val instanceof Error)) {
		return val;
	} else {
		return new js__$Boot_HaxeError(val);
	}
};
js__$Boot_HaxeError.__super__ = Error;
js__$Boot_HaxeError.prototype = $extend(Error.prototype,{
	__class__: js__$Boot_HaxeError
});
var js_Boot = function() { };
js_Boot.__name__ = true;
js_Boot.getClass = function(o) {
	if((o instanceof Array) && o.__enum__ == null) {
		return Array;
	} else {
		var cl = o.__class__;
		if(cl != null) {
			return cl;
		}
		var name = js_Boot.__nativeClassName(o);
		if(name != null) {
			return js_Boot.__resolveNativeClass(name);
		}
		return null;
	}
};
js_Boot.__string_rec = function(o,s) {
	if(o == null) {
		return "null";
	}
	if(s.length >= 5) {
		return "<...>";
	}
	var t = typeof(o);
	if(t == "function" && (o.__name__ || o.__ename__)) {
		t = "object";
	}
	switch(t) {
	case "function":
		return "<function>";
	case "object":
		if(o instanceof Array) {
			if(o.__enum__) {
				if(o.length == 2) {
					return o[0];
				}
				var str = o[0] + "(";
				s += "\t";
				var _g1 = 2;
				var _g = o.length;
				while(_g1 < _g) {
					var i = _g1++;
					if(i != 2) {
						str += "," + js_Boot.__string_rec(o[i],s);
					} else {
						str += js_Boot.__string_rec(o[i],s);
					}
				}
				return str + ")";
			}
			var l = o.length;
			var i1;
			var str1 = "[";
			s += "\t";
			var _g11 = 0;
			var _g2 = l;
			while(_g11 < _g2) {
				var i2 = _g11++;
				str1 += (i2 > 0 ? "," : "") + js_Boot.__string_rec(o[i2],s);
			}
			str1 += "]";
			return str1;
		}
		var tostr;
		try {
			tostr = o.toString;
		} catch( e ) {
			return "???";
		}
		if(tostr != null && tostr != Object.toString && typeof(tostr) == "function") {
			var s2 = o.toString();
			if(s2 != "[object Object]") {
				return s2;
			}
		}
		var k = null;
		var str2 = "{\n";
		s += "\t";
		var hasp = o.hasOwnProperty != null;
		for( var k in o ) {
		if(hasp && !o.hasOwnProperty(k)) {
			continue;
		}
		if(k == "prototype" || k == "__class__" || k == "__super__" || k == "__interfaces__" || k == "__properties__") {
			continue;
		}
		if(str2.length != 2) {
			str2 += ", \n";
		}
		str2 += s + k + " : " + js_Boot.__string_rec(o[k],s);
		}
		s = s.substring(1);
		str2 += "\n" + s + "}";
		return str2;
	case "string":
		return o;
	default:
		return String(o);
	}
};
js_Boot.__interfLoop = function(cc,cl) {
	if(cc == null) {
		return false;
	}
	if(cc == cl) {
		return true;
	}
	var intf = cc.__interfaces__;
	if(intf != null) {
		var _g1 = 0;
		var _g = intf.length;
		while(_g1 < _g) {
			var i = _g1++;
			var i1 = intf[i];
			if(i1 == cl || js_Boot.__interfLoop(i1,cl)) {
				return true;
			}
		}
	}
	return js_Boot.__interfLoop(cc.__super__,cl);
};
js_Boot.__instanceof = function(o,cl) {
	if(cl == null) {
		return false;
	}
	switch(cl) {
	case Array:
		if((o instanceof Array)) {
			return o.__enum__ == null;
		} else {
			return false;
		}
		break;
	case Bool:
		return typeof(o) == "boolean";
	case Dynamic:
		return true;
	case Float:
		return typeof(o) == "number";
	case Int:
		if(typeof(o) == "number") {
			return (o|0) === o;
		} else {
			return false;
		}
		break;
	case String:
		return typeof(o) == "string";
	default:
		if(o != null) {
			if(typeof(cl) == "function") {
				if(o instanceof cl) {
					return true;
				}
				if(js_Boot.__interfLoop(js_Boot.getClass(o),cl)) {
					return true;
				}
			} else if(typeof(cl) == "object" && js_Boot.__isNativeObj(cl)) {
				if(o instanceof cl) {
					return true;
				}
			}
		} else {
			return false;
		}
		if(cl == Class ? o.__name__ != null : false) {
			return true;
		}
		if(cl == Enum ? o.__ename__ != null : false) {
			return true;
		}
		return o.__enum__ == cl;
	}
};
js_Boot.__nativeClassName = function(o) {
	var name = js_Boot.__toStr.call(o).slice(8,-1);
	if(name == "Object" || name == "Function" || name == "Math" || name == "JSON") {
		return null;
	}
	return name;
};
js_Boot.__isNativeObj = function(o) {
	return js_Boot.__nativeClassName(o) != null;
};
js_Boot.__resolveNativeClass = function(name) {
	return $global[name];
};
var msignal_Signal = function(valueClasses) {
	if(valueClasses == null) {
		valueClasses = [];
	}
	this.valueClasses = valueClasses;
	this.slots = msignal_SlotList.NIL;
	this.priorityBased = false;
};
msignal_Signal.__name__ = true;
msignal_Signal.prototype = {
	add: function(listener) {
		return this.registerListener(listener);
	}
	,addOnce: function(listener) {
		return this.registerListener(listener,true);
	}
	,addWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,false,priority);
	}
	,addOnceWithPriority: function(listener,priority) {
		if(priority == null) {
			priority = 0;
		}
		return this.registerListener(listener,true,priority);
	}
	,remove: function(listener) {
		var slot = this.slots.find(listener);
		if(slot == null) {
			return null;
		}
		this.slots = this.slots.filterNot(listener);
		return slot;
	}
	,removeAll: function() {
		this.slots = msignal_SlotList.NIL;
	}
	,registerListener: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		if(this.registrationPossible(listener,once)) {
			var newSlot = this.createSlot(listener,once,priority);
			if(!this.priorityBased && priority != 0) {
				this.priorityBased = true;
			}
			if(!this.priorityBased && priority == 0) {
				this.slots = this.slots.prepend(newSlot);
			} else {
				this.slots = this.slots.insertWithPriority(newSlot);
			}
			return newSlot;
		}
		return this.slots.find(listener);
	}
	,registrationPossible: function(listener,once) {
		if(!this.slots.nonEmpty) {
			return true;
		}
		var existingSlot = this.slots.find(listener);
		if(existingSlot == null) {
			return true;
		}
		return false;
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return null;
	}
	,get_numListeners: function() {
		return this.slots.get_length();
	}
	,__class__: msignal_Signal
};
var msignal_Signal0 = function() {
	msignal_Signal.call(this);
};
msignal_Signal0.__name__ = true;
msignal_Signal0.__super__ = msignal_Signal;
msignal_Signal0.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function() {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute();
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot0(this,listener,once,priority);
	}
	,__class__: msignal_Signal0
});
var msignal_Signal1 = function(type) {
	msignal_Signal.call(this,[type]);
};
msignal_Signal1.__name__ = true;
msignal_Signal1.__super__ = msignal_Signal;
msignal_Signal1.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot1(this,listener,once,priority);
	}
	,__class__: msignal_Signal1
});
var msignal_Signal2 = function(type1,type2) {
	msignal_Signal.call(this,[type1,type2]);
};
msignal_Signal2.__name__ = true;
msignal_Signal2.__super__ = msignal_Signal;
msignal_Signal2.prototype = $extend(msignal_Signal.prototype,{
	dispatch: function(value1,value2) {
		var slotsToProcess = this.slots;
		while(slotsToProcess.nonEmpty) {
			slotsToProcess.head.execute(value1,value2);
			slotsToProcess = slotsToProcess.tail;
		}
	}
	,createSlot: function(listener,once,priority) {
		if(priority == null) {
			priority = 0;
		}
		if(once == null) {
			once = false;
		}
		return new msignal_Slot2(this,listener,once,priority);
	}
	,__class__: msignal_Signal2
});
var msignal_Slot = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	this.signal = signal;
	this.set_listener(listener);
	this.once = once;
	this.priority = priority;
	this.enabled = true;
};
msignal_Slot.__name__ = true;
msignal_Slot.prototype = {
	remove: function() {
		this.signal.remove(this.listener);
	}
	,set_listener: function(value) {
		return this.listener = value;
	}
	,__class__: msignal_Slot
};
var msignal_Slot0 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot0.__name__ = true;
msignal_Slot0.__super__ = msignal_Slot;
msignal_Slot0.prototype = $extend(msignal_Slot.prototype,{
	execute: function() {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		this.listener();
	}
	,__class__: msignal_Slot0
});
var msignal_Slot1 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot1.__name__ = true;
msignal_Slot1.__super__ = msignal_Slot;
msignal_Slot1.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param != null) {
			value1 = this.param;
		}
		this.listener(value1);
	}
	,__class__: msignal_Slot1
});
var msignal_Slot2 = function(signal,listener,once,priority) {
	if(priority == null) {
		priority = 0;
	}
	if(once == null) {
		once = false;
	}
	msignal_Slot.call(this,signal,listener,once,priority);
};
msignal_Slot2.__name__ = true;
msignal_Slot2.__super__ = msignal_Slot;
msignal_Slot2.prototype = $extend(msignal_Slot.prototype,{
	execute: function(value1,value2) {
		if(!this.enabled) {
			return;
		}
		if(this.once) {
			this.remove();
		}
		if(this.param1 != null) {
			value1 = this.param1;
		}
		if(this.param2 != null) {
			value2 = this.param2;
		}
		this.listener(value1,value2);
	}
	,__class__: msignal_Slot2
});
var msignal_SlotList = function(head,tail) {
	this.nonEmpty = false;
	if(head == null && tail == null) {
		this.nonEmpty = false;
	} else if(head != null) {
		this.head = head;
		this.tail = tail == null ? msignal_SlotList.NIL : tail;
		this.nonEmpty = true;
	}
};
msignal_SlotList.__name__ = true;
msignal_SlotList.prototype = {
	get_length: function() {
		if(!this.nonEmpty) {
			return 0;
		}
		if(this.tail == msignal_SlotList.NIL) {
			return 1;
		}
		var result = 0;
		var p = this;
		while(p.nonEmpty) {
			++result;
			p = p.tail;
		}
		return result;
	}
	,prepend: function(slot) {
		return new msignal_SlotList(slot,this);
	}
	,append: function(slot) {
		if(slot == null) {
			return this;
		}
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		if(this.tail == msignal_SlotList.NIL) {
			return new msignal_SlotList(slot).prepend(this.head);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,insertWithPriority: function(slot) {
		if(!this.nonEmpty) {
			return new msignal_SlotList(slot);
		}
		var priority = slot.priority;
		if(priority >= this.head.priority) {
			return this.prepend(slot);
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(priority > current.head.priority) {
				subClone.tail = current.prepend(slot);
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		subClone.tail = new msignal_SlotList(slot);
		return wholeClone;
	}
	,filterNot: function(listener) {
		if(!this.nonEmpty || listener == null) {
			return this;
		}
		if(Reflect.compareMethods(this.head.listener,listener)) {
			return this.tail;
		}
		var wholeClone = new msignal_SlotList(this.head);
		var subClone = wholeClone;
		var current = this.tail;
		while(current.nonEmpty) {
			if(Reflect.compareMethods(current.head.listener,listener)) {
				subClone.tail = current.tail;
				return wholeClone;
			}
			subClone = subClone.tail = new msignal_SlotList(current.head);
			current = current.tail;
		}
		return this;
	}
	,contains: function(listener) {
		if(!this.nonEmpty) {
			return false;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return true;
			}
			p = p.tail;
		}
		return false;
	}
	,find: function(listener) {
		if(!this.nonEmpty) {
			return null;
		}
		var p = this;
		while(p.nonEmpty) {
			if(Reflect.compareMethods(p.head.listener,listener)) {
				return p.head;
			}
			p = p.tail;
		}
		return null;
	}
	,__class__: msignal_SlotList
};
var troshx_components_FightState = function() {
	this.lastAttacking = false;
	this.shortRangeAdvantage = false;
	this.attacking = false;
	this.rounds = 0;
	this.enemyManuevers = [];
	this.manuevers = [{ manuever : null, numDice : 0}];
	this.orientation = 0;
	this.flags = 0;
	this.targetedByFlags = 0;
	this.targetLocked = false;
	this.target__ = null;
	this.initiative = false;
	this.numEnemies = 0;
	this.side = 1;
	this.e = false;
	this.s = 0;
};
troshx_components_FightState.__name__ = true;
troshx_components_FightState.isAttackingChoice = function(choice) {
	if(choice.manuever != null) {
		return choice.manuever.type == 2;
	} else {
		return false;
	}
};
troshx_components_FightState.manueverNeedsElaboration = function(cManuever) {
	if(cManuever.numDice != 0) {
		if(cManuever.to != null) {
			return cManuever.targetZone == null;
		} else {
			return false;
		}
	} else {
		return true;
	}
};
troshx_components_FightState.prototype = {
	get_target: function() {
		return this.target__;
	}
	,set_target: function(value) {
		return this.target__ = value;
	}
	,get_paused: function() {
		if(this.target__ == null) {
			return this.targetedByFlags == 0;
		} else if(!(this.target__.target__ == this && !this.target__.initiative && !this.initiative)) {
			if(this.target__.target__ != this && !this.initiative) {
				return this.traceExceptionIsPaused();
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,traceExceptionIsPaused: function() {
		console.log("traceExceptionIsPaused exception found");
		return true;
	}
	,hasOrientationInitiative: function(targetFight) {
		if(this.orientation != 3) {
			if(this.orientation != 1) {
				if(!(this.target__ == targetFight && targetFight.target__ != this)) {
					return this.orientation > targetFight.orientation;
				} else {
					return true;
				}
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getInitiativeTowards: function(fightState) {
		if(this.orientation == 0) {
			if(this.initiative) {
				if(fightState.initiative) {
					return 1;
				} else {
					return 2;
				}
			} else {
				return 0;
			}
		} else if(this.orientation != 1) {
			if(this.orientation != fightState.orientation) {
				if(this.orientation > fightState.orientation) {
					return 2;
				} else {
					return 0;
				}
			} else if(this.orientation == 2) {
				if(fightState.orientation != 2) {
					throw new js__$Boot_HaxeError("Equal assertion cautious failed:" + fightState.orientation);
				}
				if(this.initiative != fightState.initiative) {
					return 10;
				} else {
					return -10;
				}
			} else if(this.orientation == 3) {
				if(fightState.orientation != 3) {
					throw new js__$Boot_HaxeError("Equal assertion aggressive failed:" + fightState.orientation);
				}
				return 1;
			} else {
				throw new js__$Boot_HaxeError("Missed out this case?? Orientation: " + this.orientation);
			}
		} else {
			return 0;
		}
	}
	,resetManueverObj: function(obj) {
		obj.manuever = null;
		obj.marginSuccess = null;
		obj.reflexScore = null;
		obj.successes = null;
		obj.numDice = 0;
		obj.from = null;
		obj.tn = 0;
		obj.to = null;
		obj.targetZone = null;
		obj.cost = null;
		obj.defManuever = null;
	}
	,resetManuevers: function() {
		var primary = this.manuevers[0];
		this.resetManueverObj(primary);
		this.manuevers.length = 1;
		this.enemyManuevers.length = 0;
	}
	,syncStepWith: function(fight) {
		if(fight.s >= this.s) {
			this.s = fight.s;
		} else {
			fight.s = this.s;
		}
	}
	,isSyncedWith: function(fight) {
		if(this.s == fight.s) {
			return this.e == fight.e;
		} else {
			return false;
		}
	}
	,step: function(nextExchange) {
		this.shock = 0;
		this.targetLocked = false;
		this.s++;
		if(nextExchange) {
			this.s = 0;
			this.e = !this.e;
			this.s = 0;
			this.orientation = 0;
			if(!this.e) {
				this.rounds++;
			}
		}
	}
	,clone: function() {
		var fState = new troshx_components_FightState();
		fState.side = this.side;
		return fState;
	}
	,checkContestAgainstDefense: function(defManueverChoice) {
		var primary = this.manuevers[0];
		var secondary = this.manuevers.length > 1 ? this.manuevers[1] : null;
		if(!(troshx_components_FightState.isAttackingChoice(primary) && primary.to == defManueverChoice.from)) {
			if(secondary != null && troshx_components_FightState.isAttackingChoice(secondary)) {
				return secondary.to == defManueverChoice.from;
			} else {
				return false;
			}
		} else {
			return true;
		}
	}
	,getPrimaryManuever: function() {
		return this.manuevers[0];
	}
	,getSecondaryManuever: function() {
		if(this.manuevers.length > 1) {
			return this.manuevers[1];
		} else {
			return null;
		}
	}
	,getPrimaryEnemyManuever: function() {
		if(this.enemyManuevers.length > 0) {
			return this.enemyManuevers[0];
		} else {
			return null;
		}
	}
	,getEnemyManueverAt: function(index) {
		return this.enemyManuevers[index];
	}
	,getManueverAt: function(index) {
		return this.manuevers[index];
	}
	,isUnderAttack: function() {
		return this.enemyManuevers.length > 0;
	}
	,getTotalEnemyManuevers: function() {
		return this.enemyManuevers.length;
	}
	,noMoreCP: function() {
		return this.combatPool <= 0;
	}
	,setSideAggro: function(val) {
		this.side = val;
		return this;
	}
	,hostileTowards: function(fight) {
		return this.side != fight.side;
	}
	,matchScheduleWith: function(other) {
		this.s = other.s;
		this.e = other.e;
	}
	,reset: function(disengaged) {
		if(disengaged == null) {
			disengaged = false;
		}
		this.s = 0;
		this.e = false;
		this.orientation = 0;
		this.initiative = false;
		this.targetLocked = false;
		this.attacking = false;
		this.lastAttacking = false;
		this.shortRangeAdvantage = false;
		this.shock = 0;
		if(disengaged) {
			this.numEnemies = 0;
			this.flags = 0;
			this.targetedByFlags = 0;
			this.target__ = null;
			this.rounds = 0;
			this.resetManuevers();
		}
		return this;
	}
	,__class__: troshx_components_FightState
};
var troshx_core_BodyChar = $hx_exports["troshx"]["core"]["BodyChar"] = function() {
	this.zones = [];
	this.zones[0] = null;
	this.zonesB = [];
	this.zones[1] = null;
};
troshx_core_BodyChar.__name__ = true;
troshx_core_BodyChar.getEmptyBodyPartTypeDef = function() {
	return { BL : 0, KD : null, lev : 0, d : 0, ko : null, shock : 0, shockWP : 0, pain : 0, painWP : 0};
};
troshx_core_BodyChar.getEmptyWoundLocation = function(id) {
	return { id : id, cut : [], puncture : [], bludgeon : []};
};
troshx_core_BodyChar.getCleanArrayOfWound = function(dirtyArr) {
	var cleanArr = [];
	var _g1 = 0;
	var _g = dirtyArr.length;
	while(_g1 < _g) {
		var i = _g1++;
		cleanArr[i] = troshx_core_BodyChar.getBodyPartOf(dirtyArr[i]);
	}
	return cleanArr;
};
troshx_core_BodyChar.getBodyPartOf = function(obj) {
	var theBodyPart = troshx_core_BodyChar.getEmptyBodyPartTypeDef();
	var _g = 0;
	var _g1 = Reflect.fields(theBodyPart);
	while(_g < _g1.length) {
		var f = _g1[_g];
		++_g;
		if(Object.prototype.hasOwnProperty.call(obj,f)) {
			theBodyPart[f] = Reflect.field(obj,f);
		}
	}
	return theBodyPart;
};
troshx_core_BodyChar.prototype = {
	getAllWoundLocations: function() {
		var arr = [];
		var partsMap = new haxe_ds_StringMap();
		var _g = 0;
		var _g1 = Reflect.fields(this.partsCut);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			if(__map_reserved[f] != null) {
				partsMap.setReserved(f,true);
			} else {
				partsMap.h[f] = true;
			}
		}
		var _g2 = 0;
		var _g11 = Reflect.fields(this.partsBludgeon);
		while(_g2 < _g11.length) {
			var f1 = _g11[_g2];
			++_g2;
			if(__map_reserved[f1] != null) {
				partsMap.setReserved(f1,true);
			} else {
				partsMap.h[f1] = true;
			}
		}
		var _g3 = 0;
		var _g12 = Reflect.fields(this.partsPuncture);
		while(_g3 < _g12.length) {
			var f2 = _g12[_g3];
			++_g3;
			if(__map_reserved[f2] != null) {
				partsMap.setReserved(f2,true);
			} else {
				partsMap.h[f2] = true;
			}
		}
		var f3 = partsMap.keys();
		while(f3.hasNext()) {
			var f4 = f3.next();
			var woundLocation = troshx_core_BodyChar.getEmptyWoundLocation(f4);
			if(Object.prototype.hasOwnProperty.call(this.partsCut,f4)) {
				woundLocation.cut = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsCut,f4));
			}
			if(Object.prototype.hasOwnProperty.call(this.partsPuncture,f4)) {
				woundLocation.puncture = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsPuncture,f4));
			}
			if(Object.prototype.hasOwnProperty.call(this.partsBludgeon,f4)) {
				woundLocation.bludgeon = troshx_core_BodyChar.getCleanArrayOfWound(Reflect.field(this.partsBludgeon,f4));
			}
			arr.push(woundLocation);
		}
		return arr;
	}
	,getTargetZoneCost: function(index) {
		return 0;
	}
	,getWound: function(level,manuever,weapon,targetZone,rand) {
		if(rand == null) {
			rand = -1;
		}
		--level;
		var zs;
		var woundType;
		var damageTable;
		var damageTableStr;
		if(manuever.damageType == 3 || weapon.blunt) {
			zs = this.zonesB;
			damageTable = this.partsBludgeon;
			woundType = 4;
			damageTableStr = "bludgeoning";
		} else {
			zs = this.zones;
			var isThrusting = targetZone >= this.thrustStartIndex;
			if(isThrusting) {
				damageTable = this.partsPuncture;
			} else {
				damageTable = this.partsCut;
			}
			if(isThrusting) {
				woundType = 2;
			} else {
				woundType = 1;
			}
			if(isThrusting) {
				damageTableStr = "puncturing";
			} else {
				damageTableStr = "cutting";
			}
		}
		if(rand < 0) {
			rand = Math.random();
		}
		var part = zs[targetZone].getBodyPart(rand);
		if(part == "") {
			return null;
		}
		var row = Reflect.field(damageTable,part);
		if(row == null) {
			throw new js__$Boot_HaxeError("Could not find row:" + part + ", " + damageTableStr);
		}
		var damagePart = row[level];
		return { part : part, level : level, type : woundType, entry : damagePart};
	}
	,__class__: troshx_core_BodyChar
};
var troshx_core_CharSheet = function() {
	this.cpDepletion = 0;
	this.bloodLostSoFar = 0;
	this.profeciencies = { };
};
troshx_core_CharSheet.__name__ = true;
troshx_core_CharSheet.createBase = function(name,profeciencies,bodyType,weapon,weaponOffHand,baseAttr) {
	if(baseAttr == null) {
		baseAttr = 5;
	}
	var c = new troshx_core_CharSheet();
	c.name = name;
	c.wounds = { };
	c.profeciencies = profeciencies;
	c.weapon = weapon;
	c.weaponOffhand = weaponOffHand;
	c.resetAllAttributes(baseAttr);
	c.refreshDefaultProfs();
	c.bodyType = bodyType;
	return c;
};
troshx_core_CharSheet.prototype = {
	refreshDefaultProfs: function() {
		var profReference = this.cloneObj(this.profeciencies);
		var _g = 0;
		var _g1 = Reflect.fields(profReference);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var baseScore = profReference[p];
			var prof = troshx_tros_ProfeciencySheet.getProfeciency(p);
			if(prof == null) {
				throw new js__$Boot_HaxeError("SHould not be!:" + p);
			}
			var defaults = prof.defaults;
			var _g2 = 0;
			var _g3 = Reflect.fields(defaults);
			while(_g2 < _g3.length) {
				var d = _g3[_g2];
				++_g2;
				if(troshx_tros_ProfeciencySheet.getProfeciency(d) == null) {
					continue;
				}
				var defaultedScore = baseScore - defaults[d] | 0;
				var curCompareScore = Object.prototype.hasOwnProperty.call(this.profeciencies,d) ? Reflect.field(this.profeciencies,d) : 0;
				if(defaultedScore > 6) {
					defaultedScore = 6;
				}
				if(defaultedScore > curCompareScore) {
					this.profeciencies[d] = defaultedScore;
				}
			}
		}
	}
	,clone: function() {
		var c = new troshx_core_CharSheet();
		c.name = this.name;
		c.strength = this.strength;
		c.agility = this.agility;
		c.toughness = this.toughness;
		c.endurance = this.endurance;
		c.health = this.health;
		c.willpower = this.willpower;
		c.wit = this.wit;
		c.mentalapt = this.mentalapt;
		c.social = this.social;
		c.perception = this.perception;
		c.profeciencies = this.cloneObj(this.profeciencies);
		c.weapon = this.weapon;
		c.weaponOffhand = this.weaponOffhand;
		c.profeciencyIdCache = this.profeciencyIdCache;
		c.bodyType = this.bodyType;
		c.wounds = { };
		return c;
	}
	,cloneObj: function(obj) {
		var o = { };
		var _g = 0;
		var _g1 = Reflect.fields(obj);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			o[p] = Reflect.field(obj,p);
		}
		return o;
	}
	,resetAllAttributes: function(val) {
		this.strength = val;
		this.agility = val;
		this.toughness = val;
		this.endurance = val;
		this.health = val;
		this.willpower = val;
		this.wit = val;
		this.mentalapt = val;
		this.social = val;
		this.perception = val;
	}
	,invalidateHandEquipment: function() {
		this.profeciencyIdCache = null;
	}
	,getReflex: function() {
		return (this.agility + this.wit) / 2 | 0;
	}
	,getAim: function() {
		return (this.agility + this.perception) / 2 | 0;
	}
	,getKnockdown: function() {
		return (this.strength + this.agility) / 2 | 0;
	}
	,getKnockout: function() {
		return this.toughness + this.willpower / 2 | 0;
	}
	,getSpeed: function() {
		return (this.strength + this.agility + this.endurance) / 2 | 0;
	}
	,getTotalBloodLost: function() {
		var accum = 0;
		var _g = 0;
		var _g1 = Reflect.fields(this.wounds);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var w = Reflect.field(this.wounds,p);
			if(w.BL) {
				accum += w.BL;
			}
		}
		return accum;
	}
	,getCurrentHealth: function() {
		return this.health - this.bloodLostSoFar;
	}
	,criticalCondition: function() {
		return this.getCurrentHealth() == 1;
	}
	,isDeadOrComa: function() {
		return this.getCurrentHealth() <= 0;
	}
	,canNoLongerFight: function() {
		return this.getMeleeCombatPoolAmount() <= 0;
	}
	,outOfAction: function() {
		if(!this.canNoLongerFight()) {
			return this.isDeadOrComa();
		} else {
			return true;
		}
	}
	,getTotalPain: function() {
		var accum = 0;
		var _g = 0;
		var _g1 = Reflect.fields(this.wounds);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var w = Reflect.field(this.wounds,p);
			accum += w.pain;
		}
		return accum;
	}
	,pickBestProfeciency: function(weapProfs) {
		var highestScore = 0;
		var highestProf = "";
		var _g = 0;
		var _g1 = Reflect.fields(this.profeciencies);
		while(_g < _g1.length) {
			var p = _g1[_g];
			++_g;
			var _g3 = 0;
			var _g2 = weapProfs.length;
			while(_g3 < _g2) {
				var k = _g3++;
				var profId = weapProfs[k];
				if(profId == p) {
					var score = Reflect.field(this.profeciencies,profId);
					if(score > highestScore) {
						highestScore = score;
						highestProf = profId;
					}
				}
			}
		}
		return highestProf;
	}
	,getMeleeProfeciencyId: function() {
		this.profeciencyIdCache = "";
		if(this.weapon != null) {
			this.profeciencyIdCache = this.pickBestProfeciency(this.weapon.profeciencies);
		} else if(this.weaponOffhand == null || !this.weaponOffhand.shield) {
			this.profeciencyIdCache = "pugilism";
		}
		var tmp = this.weaponOffhand != null;
		return this.profeciencyIdCache;
	}
	,getMeleeProfeciencyIdCached: function() {
		if(this.profeciencyIdCache != null) {
			return this.profeciencyIdCache;
		} else {
			return this.getMeleeProfeciencyId();
		}
	}
	,getMeleeProfeciencyLevel: function() {
		if(this.profeciencyIdCache == null) {
			this.profeciencyIdCache = this.getMeleeProfeciencyId();
		}
		if(this.profeciencyIdCache != "") {
			if(Reflect.field(this.profeciencies,this.profeciencyIdCache) != null) {
				return Reflect.field(this.profeciencies,this.profeciencyIdCache);
			} else {
				return 0;
			}
		} else {
			return 0;
		}
	}
	,getMeleeCombatPoolAmount: function(carryOverShock) {
		if(carryOverShock == null) {
			carryOverShock = 0;
		}
		var amount = this.getMeleeProfeciencyLevel() + this.getReflex() - (this.cpDepletion = Math.max(this.getTotalPain(),carryOverShock) | 0);
		if(amount > 0 && this.criticalCondition()) {
			amount = amount * .5 | 0;
		}
		if(amount < 0) {
			amount = 0;
		}
		return amount;
	}
	,getManueverTN: function(manuever,attacking,enemyManuever,enemyDiceRolled,enemyTargetZone) {
		if(enemyTargetZone == null) {
			enemyTargetZone = 0;
		}
		if(enemyDiceRolled == null) {
			enemyDiceRolled = 0;
		}
		if(manuever.defaultTN != 0) {
			return manuever.defaultTN;
		}
		var useWeapon;
		if(attacking) {
			if(manuever.offHanded) {
				useWeapon = this.weaponOffhand;
			} else {
				useWeapon = this.weapon;
			}
			if(useWeapon == null) {
				useWeapon = this.getUnarmedWeapon();
			}
			if(manuever.attackTypes == 1) {
				return useWeapon.atn;
			} else if(manuever.attackTypes == 2) {
				return useWeapon.atn2;
			} else if(manuever.damageType == 0) {
				if(useWeapon.blunt) {
					if(useWeapon.atn2 != 0) {
						return useWeapon.atn2;
					} else {
						return useWeapon.atn;
					}
				} else {
					return useWeapon.atn;
				}
			} else if(manuever.damageType == 2) {
				return useWeapon.atn2;
			} else {
				return useWeapon.atn;
			}
		} else {
			var usingOffhand = manuever.isDefensiveOffHanded();
			if(usingOffhand) {
				useWeapon = this.weaponOffhand;
			} else {
				useWeapon = this.weapon;
			}
			if(useWeapon == null) {
				useWeapon = this.getUnarmedWeapon();
			}
			if(usingOffhand && useWeapon.shieldLimit != 0 && enemyDiceRolled > useWeapon.shieldLimit) {
				return 0;
			}
			if(manuever.manueverType == 0) {
				if(enemyDiceRolled <= 4 && enemyTargetZone >= this.bodyType.thrustStartIndex) {
					if(useWeapon.dntT != 0) {
						return useWeapon.dntT;
					} else {
						return useWeapon.dtn;
					}
				} else {
					return useWeapon.dtn;
				}
			} else {
				return useWeapon.dtn;
			}
		}
	}
	,getUnarmedWeapon: function() {
		var _this = troshx_tros_WeaponSheet.HASH;
		if(__map_reserved["name"] != null) {
			return _this.getReserved("name");
		} else {
			return _this.h["name"];
		}
	}
	,getAtkZoneDesc: function(index,weapon) {
		if(weapon == null) {
			weapon = this.getUnarmedWeapon();
		}
		var zoneArr = weapon.blunt ? this.bodyType.zonesB : this.bodyType.zones;
		return zoneArr[index].name;
	}
	,getPrimaryWeaponUsed: function() {
		if(this.weapon != null) {
			return this.weapon;
		} else {
			return this.getUnarmedWeapon();
		}
	}
	,inflictWound: function(level,manuever,weapon,targetZone) {
		var painInflicted;
		var shockInflicted;
		if(level > 5) {
			throw new js__$Boot_HaxeError("should not be level >5");
		}
		var wound = this.bodyType.getWound(level,manuever,weapon,targetZone);
		if(wound == null) {
			return null;
		}
		var existingWound = Object.prototype.hasOwnProperty.call(this.wounds,wound.part) ? this.wounds[wound.part] : troshx_util_LibUtil.setFieldChain(this.wounds,wound.part,{ pain : 0, BL : 0, shock : 0, woundTypes : 0});
		existingWound.woundTypes |= wound.type;
		var woundEntry = wound.entry;
		if(woundEntry.shock == -1) {
			shockInflicted = this.getMeleeProfeciencyLevel() + this.getReflex();
		} else {
			shockInflicted = woundEntry.shock;
		}
		if(woundEntry.pain == -1) {
			painInflicted = this.getMeleeProfeciencyLevel() + this.getReflex();
		} else {
			painInflicted = woundEntry.pain;
		}
		shockInflicted -= woundEntry.shockWP * this.willpower;
		painInflicted -= woundEntry.painWP * this.willpower;
		if(painInflicted > existingWound.pain) {
			existingWound.pain = painInflicted;
		}
		if(shockInflicted > existingWound.shock) {
			existingWound.shock = shockInflicted;
		}
		if(woundEntry.BL > existingWound.BL) {
			existingWound.BL = woundEntry.BL;
		}
		existingWound.d = woundEntry.d;
		if(isNaN(shockInflicted)) {
			throw new js__$Boot_HaxeError("SHock inflicted is NAN:" + wound.part + ", " + level);
		}
		wound.shock = shockInflicted;
		wound.d = woundEntry.d;
		return wound;
	}
	,__class__: troshx_core_CharSheet
};
var troshx_core_IUid = function() { };
troshx_core_IUid.__name__ = true;
troshx_core_IUid.prototype = {
	__class__: troshx_core_IUid
};
var troshx_core_Manuever = $hx_exports["troshx"]["core"]["Manuever"] = function(id,name,cost) {
	if(cost == null) {
		cost = 0;
	}
	this.type = 0;
	this.id = id;
	this.name = name;
	this.cost = cost;
	this.usingHands = 0;
	this.defaultTN = 0;
	this.customRange = 0;
	this.customMinRange = 0;
	this.stanceModifier = 2;
	this.attackTypes = 1 | 2;
	this.damageType = 0;
	this.requiredLevel = 0;
	this.spamPenalty = 0;
	this.spamIndividualOnly = false;
	this.regionMask = 0;
	this.offHanded = false;
	this.evasive = 0;
	this.manueverType = 0;
};
troshx_core_Manuever.__name__ = true;
troshx_core_Manuever.isThrustingMotion = function(targetzone,toBody) {
	return targetzone >= toBody.thrustStartIndex;
};
troshx_core_Manuever.prototype = {
	gotResolveEvasive: function() {
		return (this.evasive & -2) != 0;
	}
	,isDefensiveOffHanded: function() {
		if(this.attackTypes != 1) {
			return this.offHanded;
		} else {
			return true;
		}
	}
	,_dmgType: function(val) {
		this.damageType = val;
		return this;
	}
	,_offHanded: function(val) {
		this.offHanded = val;
		return this;
	}
	,_evasive: function(val) {
		this.evasive = val | 1;
		return this;
	}
	,_tn: function(val) {
		this.defaultTN = val;
		return this;
	}
	,_atkTypes: function(val) {
		this.attackTypes = val;
		return this;
	}
	,_range: function(val) {
		this.customRange = val;
		return this;
	}
	,_rangeMin: function(val) {
		this.customMinRange = val;
		return this;
	}
	,_lev: function(val) {
		this.requiredLevel = val;
		return this;
	}
	,_spamPenalize: function(val,spamIndividualOnly) {
		if(spamIndividualOnly == null) {
			spamIndividualOnly = false;
		}
		this.spamPenalty = val;
		this.spamIndividualOnly = spamIndividualOnly;
		return this;
	}
	,_stanceModifier: function(val) {
		this.stanceModifier = val;
		return this;
	}
	,_regions: function(val) {
		this.regionMask = val;
		return this;
	}
	,_customRequire: function(requirements) {
		this.customRequirements = requirements;
		if(requirements == null) {
			this.devTempDisabled = true;
		}
		return this;
	}
	,_customPreResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customPostResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customResolve: function() {
		this.devTempDisabled = true;
		return this;
	}
	,_customDamage: function(method) {
		this.customDamageModiferMethod = method;
		return this;
	}
	,_customReflex: function() {
		return this;
	}
	,_customRange: function() {
		return this;
	}
	,_customSplit: function() {
		this.devTempDisabled = true;
		return this;
	}
	,isTypeAttacking: function() {
		return this.type == 2;
	}
	,__class__: troshx_core_Manuever
};
var troshx_core_Profeciency = function(id,name,offensiveManuevers,defensiveManuevers,atkCosts,defCosts,defaults) {
	this.id = id;
	this.name = name;
	this.offensiveManuevers = offensiveManuevers;
	this.defensiveManuevers = defensiveManuevers;
	this.atkCosts = atkCosts != null ? atkCosts : { };
	this.defCosts = defCosts != null ? defCosts : { };
	this.defaults = defaults != null ? defaults : { };
};
troshx_core_Profeciency.__name__ = true;
troshx_core_Profeciency.prototype = {
	__class__: troshx_core_Profeciency
};
var troshx_core_Weapon = $hx_exports["troshx"]["core"]["Weapon"] = function(name,profGroups) {
	this.name = name;
	this.profeciencies = profGroups;
	this.attrBaseIndex = 0;
	this.drawCutModifier = 0;
	this.damage = 0;
	this.damage2 = 0;
	this.damage3 = 0;
	this.atn = 0;
	this.atn2 = 0;
	this.dtn = 0;
	this.dtn2 = 0;
	this.twoHanded = false;
	this.rangedWeapon = false;
	this.shield = false;
	this.shieldLimit = 0;
	this.cpPenalty = 0;
	this.movePenalty = 0;
	this.blunt = false;
	this.hooking = 0;
};
troshx_core_Weapon.__name__ = true;
troshx_core_Weapon.createDyn = function(name,profGroups,properties) {
	var weap = new troshx_core_Weapon(name,profGroups);
	var _g = 0;
	var _g1 = Reflect.fields(properties);
	while(_g < _g1.length) {
		var p = _g1[_g];
		++_g;
		weap[p] = Reflect.field(properties,p);
	}
	return weap;
};
troshx_core_Weapon.prototype = {
	getDamageTo: function(body,manuever,targetZone,margin,strength) {
		var dmg;
		if(this.damage3 != 0 && (this.blunt || manuever.damageType == 3)) {
			dmg = this.damage3;
		} else if(targetZone >= body.thrustStartIndex) {
			dmg = this.damage2;
		} else {
			dmg = this.damage;
		}
		dmg += margin;
		if(this.attrBaseIndex == 0) {
			dmg += strength;
		}
		return dmg;
	}
	,getHookingATN: function(tieBiasToThrust) {
		if(tieBiasToThrust == null) {
			tieBiasToThrust = false;
		}
		var strikeATN = (this.hooking & 1) != 0 ? this.atn : 0;
		var thrustATN = (this.hooking & 2) != 0 ? this.atn2 : 0;
		if(strikeATN != 0 && thrustATN != 0) {
			if(!tieBiasToThrust) {
				if(thrustATN < strikeATN) {
					return -thrustATN;
				} else {
					return strikeATN;
				}
			} else if(strikeATN < thrustATN) {
				return strikeATN;
			} else {
				return -thrustATN;
			}
		} else if(strikeATN == 0) {
			return -thrustATN;
		} else {
			return strikeATN;
		}
	}
	,getHookingATNType: function(tieBiasToThrust) {
		if(tieBiasToThrust == null) {
			tieBiasToThrust = false;
		}
		var strikeATN = (this.hooking & 1) != 0 ? this.atn : 0;
		var thrustATN = (this.hooking & 2) != 0 ? this.atn2 : 0;
		if(strikeATN != 0 && thrustATN != 0) {
			if(!tieBiasToThrust) {
				if(thrustATN < strikeATN) {
					return -thrustATN;
				} else {
					return strikeATN;
				}
			} else if(strikeATN < thrustATN) {
				return strikeATN;
			} else {
				return -thrustATN;
			}
		} else if(strikeATN == 0) {
			return -thrustATN;
		} else {
			return strikeATN;
		}
	}
	,getInlineTest: function() {
		var abc = 3;
		var weap = this.weaponListInlineTest[0];
		var testVar = abc + 5 + (Math.random() * this.dtn2 | 0);
		testVar += this.damage;
		var resultant = this.damage2 + testVar + 99999.22222;
		var testVar1 = 5 + (Math.random() * weap.dtn2 | 0);
		testVar1 += weap.damage;
		var resultant1 = resultant + (weap.damage2 + testVar1);
		return resultant1;
	}
	,getInlineTest2: function(val,val2) {
		if(val2 == null) {
			val2 = 5;
		}
		if(val == null) {
			val = 0;
		}
		var testVar = val + val2 + (Math.random() * this.dtn2 | 0);
		testVar += this.damage;
		return this.damage2 + testVar;
	}
	,__class__: troshx_core_Weapon
};
var troshx_core_ZoneBody = function() {
	this.weightsTotal = 0;
};
troshx_core_ZoneBody.__name__ = true;
troshx_core_ZoneBody.create = function(name,partWeights,parts,weightsTotal) {
	if(weightsTotal == null) {
		weightsTotal = 0;
	}
	var zb = new troshx_core_ZoneBody();
	zb.name = name;
	zb.parts = parts;
	zb.partWeights = partWeights;
	zb.weightsTotal = weightsTotal;
	if(weightsTotal == 0) {
		zb.recalcWeightsTotal();
	}
	return zb;
};
troshx_core_ZoneBody.prototype = {
	recalcWeightsTotal: function() {
		var accum = 0;
		var i = this.partWeights.length;
		while(--i > -1) accum += this.partWeights[i];
		this.weightsTotal = accum;
	}
	,getBodyPart: function(floatRatio) {
		floatRatio *= this.weightsTotal;
		var accum = 0;
		var result = 0;
		var _g1 = 0;
		var _g = this.partWeights.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(floatRatio < accum) {
				break;
			}
			accum += this.partWeights[i];
			result = i;
		}
		return this.parts[result];
	}
	,__class__: troshx_core_ZoneBody
};
var troshx_ds_IMatchArray = function() { };
troshx_ds_IMatchArray.__name__ = true;
troshx_ds_IMatchArray.prototype = {
	__class__: troshx_ds_IMatchArray
};
var troshx_ds_HashedArray = function() {
	this.hash = { };
	this.list = [];
};
troshx_ds_HashedArray.__name__ = true;
troshx_ds_HashedArray.__interfaces__ = [troshx_ds_IMatchArray];
troshx_ds_HashedArray.prototype = {
	rehash: function() {
		this.hash = { };
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var item = this.list[i];
			this.hash[item.get_uid()] = item;
		}
	}
	,add: function(item) {
		var uid = item.get_uid();
		if(!this.hashContains(item)) {
			this.hash[uid] = item;
			this.list.push(item);
		} else {
			var fw = this.hash[uid];
			fw.updateAgainst(item);
		}
	}
	,indexOf: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.list[i].get_uid() == item.get_uid()) {
				return i;
			}
		}
		return -1;
	}
	,'delete': function(item) {
		var uid = item.get_uid();
		if(this.hashContains(item)) {
			Reflect.deleteField(this.hash,uid);
		} else {
			console.log("Warning: No item found to be removed for uid:" + item.get_uid());
		}
		var index = this.indexOf(item);
		if(index >= 0) {
			this.list.splice(index,1);
		} else {
			console.log("Warning: No item found to be removed for array index:" + index);
		}
	}
	,contains: function(item) {
		return this.hashContains(item);
	}
	,hashContains: function(item) {
		var o = this.hash;
		var field = item.get_uid();
		return Object.prototype.hasOwnProperty.call(o,field);
	}
	,listContains: function(item) {
		return this.indexOf(item) >= 0;
	}
	,__class__: troshx_ds_HashedArray
};
var troshx_ds_IDMatchArray = function() {
	this.list = [];
};
troshx_ds_IDMatchArray.__name__ = true;
troshx_ds_IDMatchArray.__interfaces__ = [troshx_ds_IMatchArray];
troshx_ds_IDMatchArray.prototype = {
	add: function(item) {
		var uid = item.get_uid();
		var matchingItem = this.getMatchingItem(item);
		if(matchingItem == null) {
			this.list.push(item);
		} else {
			matchingItem.updateAgainst(item);
			var testIndex;
			var tmp;
			if(item != matchingItem) {
				testIndex = this.list.indexOf(item);
				tmp = testIndex >= 0;
			} else {
				tmp = false;
			}
			if(tmp) {
				this.list.splice(testIndex,1);
			}
		}
	}
	,'delete': function(item) {
		var uid = item.get_uid();
		if(!this.contains(item)) {
			console.log("Warning: No item found to be removed for uid:" + item.get_uid());
		}
		var index = this.list.indexOf(item);
		if(index >= 0) {
			this.list.splice(index,1);
		} else {
			console.log("Warning: No item found to be removed for array index:" + index);
		}
	}
	,contains: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(this.list[i].get_uid() == item.get_uid()) {
				return true;
			}
		}
		return false;
	}
	,splicedAgainst: function(item) {
		var spliceIndex = -1;
		var spliceItem = null;
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var a = this.list[i];
			if(a.get_uid() == item.get_uid()) {
				spliceItem = a;
				spliceIndex = i;
				break;
			}
		}
		if(spliceItem != null) {
			if(spliceItem.spliceAgainst(item) <= 0) {
				this.list.splice(spliceIndex,1);
			}
			return true;
		}
		return false;
	}
	,getMatchingItem: function(item) {
		var _g1 = 0;
		var _g = this.list.length;
		while(_g1 < _g) {
			var i = _g1++;
			var a = this.list[i];
			if(a.get_uid() == item.get_uid()) {
				return a;
			}
		}
		return null;
	}
	,listContains: function(item) {
		return this.list.indexOf(item) >= 0;
	}
	,get_length: function() {
		return this.list.length;
	}
	,__class__: troshx_ds_IDMatchArray
};
var troshx_ds_IUpdateWith = function() { };
troshx_ds_IUpdateWith.__name__ = true;
troshx_ds_IUpdateWith.prototype = {
	__class__: troshx_ds_IUpdateWith
};
var troshx_ds_IValidable = function() { };
troshx_ds_IValidable.__name__ = true;
troshx_ds_IValidable.prototype = {
	__class__: troshx_ds_IValidable
};
var troshx_ds_ValueHolder = function(v) {
	this.value = v;
};
troshx_ds_ValueHolder.__name__ = true;
troshx_ds_ValueHolder.prototype = {
	__class__: troshx_ds_ValueHolder
};
var troshx_ds_ValueHolder_$Int = function(v) {
	this.value = v;
};
troshx_ds_ValueHolder_$Int.__name__ = true;
troshx_ds_ValueHolder_$Int.prototype = {
	__class__: troshx_ds_ValueHolder_$Int
};
var troshx_sos_core_BoonBane = function(name,costs) {
	this.name = name;
	this.costs = costs;
	this.flags = 0;
	this.clampRank = false;
	this.multipleTimes = 0;
};
troshx_sos_core_BoonBane.__name__ = true;
troshx_sos_core_BoonBane.prototype = {
	isAvailableCharaterCreation: function() {
		return this.costs != null;
	}
	,get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_BoonBane
};
var troshx_sos_core_Boon = function(name,costs) {
	troshx_sos_core_BoonBane.call(this,name,costs);
};
troshx_sos_core_Boon.__name__ = true;
troshx_sos_core_Boon.__super__ = troshx_sos_core_BoonBane;
troshx_sos_core_Boon.prototype = $extend(troshx_sos_core_BoonBane.prototype,{
	getEmptyAssignInstance: function($char) {
		return new troshx_sos_core_BoonAssign();
	}
	,getAssign: function(rank,$char) {
		var me = this.getEmptyAssignInstance($char);
		me.boon = this;
		me.rank = rank;
		return me;
	}
	,__class__: troshx_sos_core_Boon
});
var troshx_sos_bnb_Allies = function() {
	troshx_sos_core_Boon.call(this,"Allies",[1,5,10]);
	this.clampRank = true;
	this.multipleTimes = -2;
};
troshx_sos_bnb_Allies.__name__ = true;
troshx_sos_bnb_Allies.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Allies.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_AlliesAssign();
	}
	,__class__: troshx_sos_bnb_Allies
});
var troshx_sos_bnb_IBuildUIFields = function() { };
troshx_sos_bnb_IBuildUIFields.__name__ = true;
var troshx_sos_core_BoonBaneAssign = function() {
	this._canceled = false;
	this._forcePermanent = false;
	this.ingame = false;
};
troshx_sos_core_BoonBaneAssign.__name__ = true;
troshx_sos_core_BoonBaneAssign.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_BoonBaneAssign.prototype = {
	onFurtherAdded: function($char) {
	}
	,onRemoved: function($char) {
	}
	,onInited: function($char) {
	}
	,getQty: function() {
		return 1;
	}
	,getCost: function(rank) {
		return 0;
	}
	,getCosting: function(bb,rank) {
		return bb.costs[rank - 1];
	}
	,isValid: function() {
		return true;
	}
	,getBoonOrBane: function() {
		return null;
	}
	,getUIFields: function() {
		return null;
	}
	,get_uid: function() {
		return "";
	}
	,__class__: troshx_sos_core_BoonBaneAssign
};
var troshx_sos_core_BoonAssign = function() {
	troshx_sos_core_BoonBaneAssign.call(this);
};
troshx_sos_core_BoonAssign.__name__ = true;
troshx_sos_core_BoonAssign.__interfaces__ = [troshx_ds_IUpdateWith];
troshx_sos_core_BoonAssign.__super__ = troshx_sos_core_BoonBaneAssign;
troshx_sos_core_BoonAssign.prototype = $extend(troshx_sos_core_BoonBaneAssign.prototype,{
	getMaxLength: function(costBase,curLength) {
		return (this._remainingCached + curLength * costBase) / costBase | 0;
	}
	,clampLength: function(length,minClamp) {
		if(minClamp == null) {
			minClamp = 1;
		}
		if(length >= minClamp) {
			return length;
		} else {
			return minClamp;
		}
	}
	,updateRemainingCache: function(totalRemaining) {
		this._remainingCached = totalRemaining;
	}
	,get_uid: function() {
		return this.boon.name;
	}
	,getCost: function(rank) {
		return this.boon.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBaseCost: function(rank) {
		return this.boon.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBoonOrBane: function() {
		return this.boon;
	}
	,getUIFields: function() {
		return null;
	}
	,toString: function() {
		return "[BoonAssign: " + this.boon.name + "]";
	}
	,updateAgainst: function(ref) {
	}
	,spliceAgainst: function(ref) {
		return 0;
	}
	,__class__: troshx_sos_core_BoonAssign
});
var troshx_sos_bnb_AlliesAssign = function() {
	this.__hasUIFields__ = true;
	this.majorPowerList = [];
	this.moderatePowerList = [];
	this.minorPowerList = [""];
	troshx_sos_core_BoonAssign.call(this);
};
troshx_sos_bnb_AlliesAssign.__name__ = true;
troshx_sos_bnb_AlliesAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_AlliesAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.minorPowerList.length + this.moderatePowerList.length + this.majorPowerList.length;
	}
	,getMaxLengthCost: function(costBase,length) {
		var b = length * costBase;
		return b;
	}
	,getCost: function(rank) {
		return this.getMaxLengthCost(1,this.minorPowerList.length) + this.getMaxLengthCost(5,this.moderatePowerList.length) + this.getMaxLengthCost(10,this.majorPowerList.length);
	}
	,getUIFields: function() {
		var length = this.minorPowerList.length;
		return [{ prop : "minorPowerList", minLength : 0, maxLength : (this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0, of : "String", defaultValue : "", type : "Array", label : "Minor Power List"},{ prop : "moderatePowerList", minLength : 0, maxLength : (this._remainingCached + this.moderatePowerList.length * 5) / 5 | 0, of : "String", defaultValue : "", type : "Array", label : "Moderate Power List"},{ prop : "majorPowerList", minLength : 0, maxLength : (this._remainingCached + this.majorPowerList.length * 10) / 10 | 0, of : "String", defaultValue : "", type : "Array", label : "Major Power List"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_AlliesAssign
});
var troshx_sos_core_Bane = function(name,costs) {
	troshx_sos_core_BoonBane.call(this,name,costs);
	this.isBane = true;
};
troshx_sos_core_Bane.__name__ = true;
troshx_sos_core_Bane.__super__ = troshx_sos_core_BoonBane;
troshx_sos_core_Bane.prototype = $extend(troshx_sos_core_BoonBane.prototype,{
	getEmptyAssignInstance: function($char) {
		return new troshx_sos_core_BaneAssign();
	}
	,getAssign: function(rank,$char) {
		var me = this.getEmptyAssignInstance($char);
		me.bane = this;
		me.rank = rank;
		return me;
	}
	,__class__: troshx_sos_core_Bane
});
var troshx_sos_bnb_BadEyes = function() {
	troshx_sos_core_Bane.call(this,"Bad Eyes",[4,6]);
	this.channels = 1;
	this.flags = 2;
	var mod = new troshx_sos_bnb_BadEyesModifier();
	this.situationalModifiers = [mod,mod];
};
troshx_sos_bnb_BadEyes.__name__ = true;
troshx_sos_bnb_BadEyes.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BadEyes.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BadEyes
});
var troshx_sos_core_SituationalCharModifier = function(index) {
	this.index = index;
};
troshx_sos_core_SituationalCharModifier.__name__ = true;
troshx_sos_core_SituationalCharModifier.prototype = {
	getModifiedValue: function($char,rank,qty,value) {
		return value;
	}
	,__class__: troshx_sos_core_SituationalCharModifier
};
var troshx_sos_bnb_BadEyesModifier = function() {
	troshx_sos_core_SituationalCharModifier.call(this,7);
};
troshx_sos_bnb_BadEyesModifier.__name__ = true;
troshx_sos_bnb_BadEyesModifier.__super__ = troshx_sos_core_SituationalCharModifier;
troshx_sos_bnb_BadEyesModifier.prototype = $extend(troshx_sos_core_SituationalCharModifier.prototype,{
	getModifiedValue: function($char,rank,qty,value) {
		var equipedItems = $char.inventory.equipedNonMeleeItems;
		var gotSpecs = false;
		var _g1 = 0;
		var _g = equipedItems.length;
		while(_g1 < _g) {
			var i = _g1++;
			var entry = equipedItems[i];
			if((entry.item.flags & 16) != 0 && (entry.held != 0 || entry.unheld != 6)) {
				gotSpecs = true;
				break;
			}
		}
		if(rank == 0) {
			return value - (gotSpecs ? 0 : 2);
		} else {
			return value - (gotSpecs ? 4 : 2);
		}
	}
	,__class__: troshx_sos_bnb_BadEyesModifier
});
var troshx_sos_bnb_Banes = function() {
};
troshx_sos_bnb_Banes.__name__ = true;
troshx_sos_bnb_Banes.getList = function() {
	return [new troshx_sos_bnb_ArrowMagnet(),new troshx_sos_bnb_BadEars(),new troshx_sos_bnb_BadEyes(),new troshx_sos_bnb_BadReputation(),new troshx_sos_bnb_BarrenOrSterility(),new troshx_sos_bnb_Bigoted(),new troshx_sos_bnb_Blind(),new troshx_sos_bnb_Braggart(),new troshx_sos_bnb_BrainDamage(),new troshx_sos_bnb_BrokenLimb(),new troshx_sos_bnb_CompleteMonster(),new troshx_sos_bnb_Craven(),new troshx_sos_bnb_CrippledLimb(),new troshx_sos_bnb_Debt(),new troshx_sos_bnb_DirePast(),new troshx_sos_bnb_Enemies(),new troshx_sos_bnb_FacialDeformity(),new troshx_sos_bnb_Fat(),new troshx_sos_bnb_Frail(),new troshx_sos_bnb_Haemophilia(),new troshx_sos_bnb_Honorable(),new troshx_sos_bnb_Hothead(),new troshx_sos_bnb_LastingPain(),new troshx_sos_bnb_Mute(),new troshx_sos_bnb_Oath(),new troshx_sos_bnb_OldWound(),new troshx_sos_bnb_OneEyed(),new troshx_sos_bnb_Poor(),new troshx_sos_bnb_SeveredLimb(),new troshx_sos_bnb_Sheltered(),new troshx_sos_bnb_Short(),new troshx_sos_bnb_Skinny(),new troshx_sos_bnb_TechnologicallyImpaired(),new troshx_sos_bnb_UnhappilyMarried(),new troshx_sos_bnb_Virtuous(),new troshx_sos_bnb_Wanted()];
};
troshx_sos_bnb_Banes.prototype = {
	__class__: troshx_sos_bnb_Banes
};
var troshx_sos_core_BaneAssign = function() {
	troshx_sos_core_BoonBaneAssign.call(this);
};
troshx_sos_core_BaneAssign.__name__ = true;
troshx_sos_core_BaneAssign.__interfaces__ = [troshx_ds_IUpdateWith];
troshx_sos_core_BaneAssign.__super__ = troshx_sos_core_BoonBaneAssign;
troshx_sos_core_BaneAssign.prototype = $extend(troshx_sos_core_BoonBaneAssign.prototype,{
	get_uid: function() {
		return this.bane.name;
	}
	,getCost: function(rank) {
		return this.bane.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBaseCost: function(rank) {
		return this.bane.costs[(rank < 2 ? 1 : rank) - 1];
	}
	,getBoonOrBane: function() {
		return this.bane;
	}
	,getUIFields: function() {
		return null;
	}
	,toString: function() {
		return "[BaneAssign: " + this.bane.name + "]";
	}
	,updateAgainst: function(ref) {
	}
	,spliceAgainst: function(ref) {
		return 0;
	}
	,__class__: troshx_sos_core_BaneAssign
});
var troshx_sos_bnb_BaneNotesAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	troshx_sos_core_BaneAssign.call(this);
};
troshx_sos_bnb_BaneNotesAssign.__name__ = true;
troshx_sos_bnb_BaneNotesAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_BaneNotesAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getUIFields: function() {
		return [{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_BaneNotesAssign
});
var troshx_sos_bnb_ArrowMagnet = function() {
	troshx_sos_core_Bane.call(this,"Arrow Magnet",[3]);
};
troshx_sos_bnb_ArrowMagnet.__name__ = true;
troshx_sos_bnb_ArrowMagnet.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_ArrowMagnet.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_ArrowMagnet
});
var troshx_sos_bnb_BadEars = function() {
	troshx_sos_core_Bane.call(this,"Bad Ears",[2,4]);
	this.channels = 2;
	this.flags = 2;
};
troshx_sos_bnb_BadEars.__name__ = true;
troshx_sos_bnb_BadEars.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BadEars.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BadEars
});
var troshx_sos_bnb_BadReputation = function() {
	troshx_sos_core_Bane.call(this,"Bad Reputation",[3,6,9]);
};
troshx_sos_bnb_BadReputation.__name__ = true;
troshx_sos_bnb_BadReputation.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BadReputation.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BadReputation
});
var troshx_sos_bnb_BarrenOrSterility = function() {
	troshx_sos_core_Bane.call(this,"Barren/Sterility",[1,3]);
	this.channels = 2;
	this.conditions = [null,troshx_sos_bnb_BarrenOrSterility.canBeEunich];
};
troshx_sos_bnb_BarrenOrSterility.__name__ = true;
troshx_sos_bnb_BarrenOrSterility.canBeEunich = function($char,qty) {
	return $char.gender == 0;
};
troshx_sos_bnb_BarrenOrSterility.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BarrenOrSterility.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_BarrenOrSterility
});
var troshx_sos_bnb_Bigoted = function() {
	troshx_sos_core_Bane.call(this,"Bigoted",[5]);
};
troshx_sos_bnb_Bigoted.__name__ = true;
troshx_sos_bnb_Bigoted.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Bigoted.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Bigoted
});
var troshx_sos_bnb_Blind = function() {
	troshx_sos_core_Bane.call(this,"Blind",[20]);
	this.flags = 2;
	this.channels = 64;
};
troshx_sos_bnb_Blind.__name__ = true;
troshx_sos_bnb_Blind.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Blind.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Blind
});
var troshx_sos_bnb_Braggart = function() {
	troshx_sos_core_Bane.call(this,"Braggart",[3]);
};
troshx_sos_bnb_Braggart.__name__ = true;
troshx_sos_bnb_Braggart.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Braggart.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Braggart
});
var troshx_sos_bnb_CompleteMonster = function() {
	troshx_sos_core_Bane.call(this,"Complete Monster",[10]);
	this.channels = 512;
};
troshx_sos_bnb_CompleteMonster.__name__ = true;
troshx_sos_bnb_CompleteMonster.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_CompleteMonster.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_CompleteMonster
});
var troshx_sos_bnb_Craven = function() {
	troshx_sos_core_Bane.call(this,"Craven",[4,8]);
	this.channels = 128;
};
troshx_sos_bnb_Craven.__name__ = true;
troshx_sos_bnb_Craven.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Craven.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Craven
});
var troshx_sos_bnb_Enemies = function() {
	troshx_sos_core_Bane.call(this,"Enemies",[3,10,15]);
};
troshx_sos_bnb_Enemies.__name__ = true;
troshx_sos_bnb_Enemies.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Enemies.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Enemies
});
var troshx_sos_bnb_FacialDeformity = function() {
	troshx_sos_core_Bane.call(this,"Enemies",[2,4,8]);
	this.flags = 2;
};
troshx_sos_bnb_FacialDeformity.__name__ = true;
troshx_sos_bnb_FacialDeformity.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_FacialDeformity.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_FacialDeformity
});
var troshx_sos_bnb_Fat = function() {
	troshx_sos_core_Bane.call(this,"Fat",[5]);
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(9,-2)];
};
troshx_sos_bnb_Fat.__name__ = true;
troshx_sos_bnb_Fat.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Fat.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Fat
});
var troshx_sos_bnb_Frail = function() {
	troshx_sos_core_Bane.call(this,"Frail",[8]);
	this.channels = 32;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(12,-1)];
};
troshx_sos_bnb_Frail.__name__ = true;
troshx_sos_bnb_Frail.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Frail.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Frail
});
var troshx_sos_bnb_Haemophilia = function() {
	troshx_sos_core_Bane.call(this,"Haemophilia",[8]);
	this.flags = 2;
};
troshx_sos_bnb_Haemophilia.__name__ = true;
troshx_sos_bnb_Haemophilia.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Haemophilia.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Haemophilia
});
var troshx_sos_bnb_Hothead = function() {
	troshx_sos_core_Bane.call(this,"Hothead",[3]);
};
troshx_sos_bnb_Hothead.__name__ = true;
troshx_sos_bnb_Hothead.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Hothead.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Hothead
});
var troshx_sos_bnb_Honorable = function() {
	troshx_sos_core_Bane.call(this,"Honorable",[5]);
	this.channels = 512;
};
troshx_sos_bnb_Honorable.__name__ = true;
troshx_sos_bnb_Honorable.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Honorable.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Honorable
});
var troshx_sos_bnb_DirePast = function() {
	troshx_sos_core_Bane.call(this,"Dire Past",[0]);
	this.flags = 3;
};
troshx_sos_bnb_DirePast.__name__ = true;
troshx_sos_bnb_DirePast.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_DirePast.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_BaneNotesAssign();
	}
	,__class__: troshx_sos_bnb_DirePast
});
var troshx_sos_bnb_Mute = function() {
	troshx_sos_core_Bane.call(this,"Mute",[5,8]);
	this.flags = 2;
};
troshx_sos_bnb_Mute.__name__ = true;
troshx_sos_bnb_Mute.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Mute.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Mute
});
var troshx_sos_bnb_OneEyed = function() {
	troshx_sos_core_Bane.call(this,"One-Eyed",[10]);
	this.flags = 2;
	this.channels = 64;
	var m = troshx_sos_core_StaticModifier.create(13,-1);
	m.next = troshx_sos_core_StaticModifier.create(15,-2);
	this.staticModifiers = [m];
};
troshx_sos_bnb_OneEyed.__name__ = true;
troshx_sos_bnb_OneEyed.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_OneEyed.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_OneEyed
});
var troshx_sos_bnb_Poor = function() {
	troshx_sos_core_Bane.call(this,"Poor",[4,6,8]);
	this.flags = 1;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(16,0,.5),troshx_sos_core_StaticModifier.create(16,0,.25),troshx_sos_core_StaticModifier.create(17,0,0)];
};
troshx_sos_bnb_Poor.__name__ = true;
troshx_sos_bnb_Poor.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Poor.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Poor
});
var troshx_sos_bnb_Sheltered = function() {
	troshx_sos_core_Bane.call(this,"Sheltered",[2,4,6]);
	this.flags = 1;
	this.channels = 272;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(18,-1),troshx_sos_core_StaticModifier.create(18,-2),troshx_sos_core_StaticModifier.create(18,-3)];
};
troshx_sos_bnb_Sheltered.__name__ = true;
troshx_sos_bnb_Sheltered.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Sheltered.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Sheltered
});
var troshx_sos_bnb_Short = function() {
	troshx_sos_core_Bane.call(this,"Short",[8,15]);
	this.channels = 1024;
	var m = troshx_sos_core_StaticModifier.create(14,-1);
	m.next = troshx_sos_core_StaticModifier.create(9,-1);
	var m2 = troshx_sos_core_StaticModifier.create(14,-2);
	m2.next = troshx_sos_core_StaticModifier.create(9,-2);
	this.staticModifiers = [m,m2];
};
troshx_sos_bnb_Short.__name__ = true;
troshx_sos_bnb_Short.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Short.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Short
});
var troshx_sos_bnb_Skinny = function() {
	troshx_sos_core_Bane.call(this,"Skinny",[3]);
};
troshx_sos_bnb_Skinny.__name__ = true;
troshx_sos_bnb_Skinny.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Skinny.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Skinny
});
var troshx_sos_bnb_TechnologicallyImpaired = function() {
	troshx_sos_core_Bane.call(this,"Technologically Impaired",[5]);
};
troshx_sos_bnb_TechnologicallyImpaired.__name__ = true;
troshx_sos_bnb_TechnologicallyImpaired.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_TechnologicallyImpaired.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_TechnologicallyImpaired
});
var troshx_sos_bnb_UnhappilyMarried = function() {
	troshx_sos_core_Bane.call(this,"Unhappily Married",[1,2,3]);
};
troshx_sos_bnb_UnhappilyMarried.__name__ = true;
troshx_sos_bnb_UnhappilyMarried.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_UnhappilyMarried.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_UnhappilyMarried
});
var troshx_sos_bnb_Virtuous = function() {
	troshx_sos_core_Bane.call(this,"Virtuous",[5]);
};
troshx_sos_bnb_Virtuous.__name__ = true;
troshx_sos_bnb_Virtuous.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Virtuous.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Virtuous
});
var troshx_sos_bnb_Wanted = function() {
	troshx_sos_core_Bane.call(this,"Wanted",[5,10,15]);
};
troshx_sos_bnb_Wanted.__name__ = true;
troshx_sos_bnb_Wanted.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Wanted.prototype = $extend(troshx_sos_core_Bane.prototype,{
	__class__: troshx_sos_bnb_Wanted
});
var troshx_sos_bnb_Boons = function() {
};
troshx_sos_bnb_Boons.__name__ = true;
troshx_sos_bnb_Boons.getList = function() {
	return [new troshx_sos_bnb_Allies(),new troshx_sos_bnb_Ambidextrous(),new troshx_sos_bnb_AnimalAffinity(),new troshx_sos_bnb_Beautiful(),new troshx_sos_bnb_Berserker(),new troshx_sos_bnb_Bloodthirsty(),new troshx_sos_bnb_Brave(),new troshx_sos_bnb_Contacts(),new troshx_sos_bnb_DirectionSense(),new troshx_sos_bnb_Estate(),new troshx_sos_bnb_Famous(),new troshx_sos_bnb_Favor(),new troshx_sos_bnb_FolksBackHome(),new troshx_sos_bnb_Follower(),new troshx_sos_bnb_GoodEars(),new troshx_sos_bnb_GoodEyes(),new troshx_sos_bnb_GoodNose(),new troshx_sos_bnb_HaleAndHearty(),new troshx_sos_bnb_ImpressiveVoice(),new troshx_sos_bnb_KnownForVirtue(),new troshx_sos_bnb_Language(),new troshx_sos_bnb_Literate(),new troshx_sos_bnb_NaturalBornKiller(),new troshx_sos_bnb_NaturalLeader(),new troshx_sos_bnb_Rich(),new troshx_sos_bnb_Robust(),new troshx_sos_bnb_Tall(),new troshx_sos_bnb_TrueGrit()];
};
troshx_sos_bnb_Boons.prototype = {
	__class__: troshx_sos_bnb_Boons
};
var troshx_sos_bnb_BoonNotesAssign = function() {
	this.notes = "";
	troshx_sos_core_BoonAssign.call(this);
};
troshx_sos_bnb_BoonNotesAssign.__name__ = true;
troshx_sos_bnb_BoonNotesAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_BoonNotesAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_bnb_BoonNotesAssign
});
var troshx_sos_bnb_Ambidextrous = function() {
	troshx_sos_core_Boon.call(this,"Ambidextrous",[3]);
	this.flags = 1;
};
troshx_sos_bnb_Ambidextrous.__name__ = true;
troshx_sos_bnb_Ambidextrous.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Ambidextrous.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Ambidextrous
});
var troshx_sos_bnb_AnimalAffinity = function() {
	troshx_sos_core_Boon.call(this,"Animal Affinity",[2,4,6]);
};
troshx_sos_bnb_AnimalAffinity.__name__ = true;
troshx_sos_bnb_AnimalAffinity.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_AnimalAffinity.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_AnimalAffinity
});
var troshx_sos_bnb_Beautiful = function() {
	troshx_sos_core_Boon.call(this,"Beautiful",[3,6]);
};
troshx_sos_bnb_Beautiful.__name__ = true;
troshx_sos_bnb_Beautiful.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Beautiful.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Beautiful
});
var troshx_sos_bnb_Berserker = function() {
	troshx_sos_core_Boon.call(this,"Berserker",[8,12]);
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(13,4)];
};
troshx_sos_bnb_Berserker.__name__ = true;
troshx_sos_bnb_Berserker.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Berserker.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Berserker
});
var troshx_sos_bnb_Bloodthirsty = function() {
	troshx_sos_core_Boon.call(this,"Bloodthirsty",[4]);
};
troshx_sos_bnb_Bloodthirsty.__name__ = true;
troshx_sos_bnb_Bloodthirsty.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Bloodthirsty.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Bloodthirsty
});
var troshx_sos_bnb_Brave = function() {
	troshx_sos_core_Boon.call(this,"Brave",[3]);
};
troshx_sos_bnb_Brave.__name__ = true;
troshx_sos_bnb_Brave.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Brave.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Brave
});
var troshx_sos_bnb_Contacts = function() {
	troshx_sos_core_Boon.call(this,"Contacts",[1,4,6,8]);
};
troshx_sos_bnb_Contacts.__name__ = true;
troshx_sos_bnb_Contacts.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Contacts.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Contacts
});
var troshx_sos_bnb_DirectionSense = function() {
	troshx_sos_core_Boon.call(this,"Direction Sense",[3]);
};
troshx_sos_bnb_DirectionSense.__name__ = true;
troshx_sos_bnb_DirectionSense.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_DirectionSense.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_DirectionSense
});
var troshx_sos_bnb_Estate = function() {
	troshx_sos_core_Boon.call(this,"Estate",[10]);
	this.flags = 1;
	this.multipleTimes = -2;
};
troshx_sos_bnb_Estate.__name__ = true;
troshx_sos_bnb_Estate.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Estate.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Estate
});
var troshx_sos_bnb_Famous = function() {
	troshx_sos_core_Boon.call(this,"Famous",[2,4]);
};
troshx_sos_bnb_Famous.__name__ = true;
troshx_sos_bnb_Famous.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Famous.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Famous
});
var troshx_sos_bnb_FolksBackHome = function() {
	troshx_sos_core_Boon.call(this,"Folks Back Home",[3,6,8]);
};
troshx_sos_bnb_FolksBackHome.__name__ = true;
troshx_sos_bnb_FolksBackHome.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_FolksBackHome.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_FolksBackHome
});
var troshx_sos_bnb_GoodEars = function() {
	troshx_sos_core_Boon.call(this,"Good Ears",[3]);
	this.channels = 2;
};
troshx_sos_bnb_GoodEars.__name__ = true;
troshx_sos_bnb_GoodEars.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_GoodEars.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_GoodEars
});
var troshx_sos_bnb_GoodEyes = function() {
	troshx_sos_core_Boon.call(this,"Good Eyes",[3]);
	this.channels = 1;
};
troshx_sos_bnb_GoodEyes.__name__ = true;
troshx_sos_bnb_GoodEyes.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_GoodEyes.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_GoodEyes
});
var troshx_sos_bnb_GoodNose = function() {
	troshx_sos_core_Boon.call(this,"Good Nose",[3]);
	this.channels = 4;
};
troshx_sos_bnb_GoodNose.__name__ = true;
troshx_sos_bnb_GoodNose.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_GoodNose.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_GoodNose
});
var troshx_sos_bnb_HaleAndHearty = function() {
	troshx_sos_core_Boon.call(this,"Hale and Hearty",[2,4]);
};
troshx_sos_bnb_HaleAndHearty.__name__ = true;
troshx_sos_bnb_HaleAndHearty.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_HaleAndHearty.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_HaleAndHearty
});
var troshx_sos_bnb_KnownForVirtue = function() {
	troshx_sos_core_Boon.call(this,"Known for Virtue",[5]);
};
troshx_sos_bnb_KnownForVirtue.__name__ = true;
troshx_sos_bnb_KnownForVirtue.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_KnownForVirtue.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_KnownForVirtue
});
var troshx_sos_bnb_NaturalBornKiller = function() {
	troshx_sos_core_Boon.call(this,"Natural Born Killer",[6,12,18]);
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(13,1),troshx_sos_core_StaticModifier.create(13,2),troshx_sos_core_StaticModifier.create(13,3)];
};
troshx_sos_bnb_NaturalBornKiller.__name__ = true;
troshx_sos_bnb_NaturalBornKiller.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_NaturalBornKiller.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_NaturalBornKiller
});
var troshx_sos_bnb_NaturalLeader = function() {
	troshx_sos_core_Boon.call(this,"Natural Leader",[3]);
};
troshx_sos_bnb_NaturalLeader.__name__ = true;
troshx_sos_bnb_NaturalLeader.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_NaturalLeader.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_NaturalLeader
});
var troshx_sos_bnb_Tall = function() {
	troshx_sos_core_Boon.call(this,"Tall",[8,12]);
	this.flags = 1;
	this.channels = 1024;
	this.staticModifiers = [null,troshx_sos_core_StaticModifier.create(14,1)];
};
troshx_sos_bnb_Tall.__name__ = true;
troshx_sos_bnb_Tall.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Tall.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Tall
});
var troshx_sos_bnb_TrueGrit = function() {
	troshx_sos_core_Boon.call(this,"True Grit",[2,4,6]);
	this.flags = 1;
	this.channels = 272;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(18,1),troshx_sos_core_StaticModifier.create(18,2),troshx_sos_core_StaticModifier.create(18,3)];
};
troshx_sos_bnb_TrueGrit.__name__ = true;
troshx_sos_bnb_TrueGrit.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_TrueGrit.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_TrueGrit
});
var troshx_sos_bnb_Rich = function() {
	troshx_sos_core_Boon.call(this,"Rich",[1,3,5]);
	this.channels = 8;
	this.flags = 1;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(17,0,1.1),troshx_sos_core_StaticModifier.create(17,0,1.5),troshx_sos_core_StaticModifier.create(17,0,2)];
};
troshx_sos_bnb_Rich.__name__ = true;
troshx_sos_bnb_Rich.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Rich.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Rich
});
var troshx_sos_bnb_Robust = function() {
	troshx_sos_core_Boon.call(this,"Robust",[8]);
	this.channels = 32;
	this.staticModifiers = [troshx_sos_core_StaticModifier.create(12,1)];
};
troshx_sos_bnb_Robust.__name__ = true;
troshx_sos_bnb_Robust.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Robust.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Robust
});
var troshx_sos_bnb_BrainDamage = function() {
	troshx_sos_core_Bane.call(this,"Brain Damage",[4,8]);
	this.flags = 2;
	this.multipleTimes = -2;
};
troshx_sos_bnb_BrainDamage.__name__ = true;
troshx_sos_bnb_BrainDamage.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BrainDamage.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_BrainDamageAssign();
	}
	,__class__: troshx_sos_bnb_BrainDamage
});
var troshx_sos_bnb_BrainDamageAssign = function() {
	troshx_sos_core_BaneAssign.call(this);
};
troshx_sos_bnb_BrainDamageAssign.__name__ = true;
troshx_sos_bnb_BrainDamageAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_BrainDamageAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	onInited: function($char) {
	}
	,onFurtherAdded: function($char) {
	}
	,getUIFields: function() {
		return [];
	}
	,__class__: troshx_sos_bnb_BrainDamageAssign
});
var troshx_sos_bnb_BrokenLimb = function() {
	troshx_sos_core_Bane.call(this,"Broken Limb",null);
	this.flags = 2;
	this.multipleTimes = -2;
};
troshx_sos_bnb_BrokenLimb.__name__ = true;
troshx_sos_bnb_BrokenLimb.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_BrokenLimb.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		var b = new troshx_sos_bnb_BrokenLimbAssign();
		return b;
	}
	,__class__: troshx_sos_bnb_BrokenLimb
});
var troshx_sos_bnb_BrokenLimbAssign = function() {
	this.__hasUIFields__ = true;
	this.affectedLimbs = 0;
	troshx_sos_core_BaneAssign.call(this);
	var m = new troshx_sos_bnb_BrokenLimbMOBModifier(this);
	this.situationalModifiers = [m];
};
troshx_sos_bnb_BrokenLimbAssign.__name__ = true;
troshx_sos_bnb_BrokenLimbAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_BrokenLimbAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	isValid: function() {
		return this.affectedLimbs > 0;
	}
	,getCost: function(rank) {
		return this.getQty() * troshx_sos_core_BaneAssign.prototype.getCost.call(this,rank);
	}
	,getQty: function() {
		var c = 0;
		c += (this.affectedLimbs & 1) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 2) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 4) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 8) != 0 ? 1 : 0;
		return c;
	}
	,getUIFields: function() {
		return [{ prop : "affectedLimbs", type : "Bitmask", labels : ["Left Arm","Right Arm","Left Leg","Right Leg"], label : "Affected Limbs"}];
	}
	,__class__: troshx_sos_bnb_BrokenLimbAssign
});
var troshx_sos_bnb_BrokenLimbMOBModifier = function(current) {
	troshx_sos_core_SituationalCharModifier.call(this,9);
	this.current = current;
};
troshx_sos_bnb_BrokenLimbMOBModifier.__name__ = true;
troshx_sos_bnb_BrokenLimbMOBModifier.__super__ = troshx_sos_core_SituationalCharModifier;
troshx_sos_bnb_BrokenLimbMOBModifier.prototype = $extend(troshx_sos_core_SituationalCharModifier.prototype,{
	getModifiedValue: function($char,rank,qty,value) {
		if((this.current.affectedLimbs & 12) != 0) {
			var equipedItems = $char.inventory.equipedNonMeleeItems;
			var crutchesHeld = 0;
			var affected = 0;
			var leftHanded = $char.leftHanded;
			affected |= (this.current.affectedLimbs & 4) != 0 ? $char.leftHanded ? 1 : 2 : 0;
			affected |= (this.current.affectedLimbs & 8) != 0 ? $char.leftHanded ? 2 : 1 : 0;
			var _g1 = 0;
			var _g = equipedItems.length;
			while(_g1 < _g) {
				var i = _g1++;
				var entry = equipedItems[i];
				if((entry.item.flags & 256) != 0) {
					crutchesHeld |= entry.held;
					break;
				}
			}
			if(crutchesHeld == 0) {
				if(value < 1) {
					return value;
				} else {
					return 1;
				}
			} else {
				affected &= ~crutchesHeld;
				var mob = ($char.strength + $char.agility + $char.endurance) / 2 | 0;
				var multiplier = affected == 0 ? 0.25 : 0.125;
				if(mob * multiplier < value) {
					return mob * multiplier;
				} else {
					return value;
				}
			}
		}
		return value;
	}
	,__class__: troshx_sos_bnb_BrokenLimbMOBModifier
});
var troshx_sos_bnb_CrippledLimb = function() {
	troshx_sos_core_Bane.call(this,"Crippled Limb/Appendage",[8]);
	this.flags = 2;
	this.multipleTimes = -2;
};
troshx_sos_bnb_CrippledLimb.__name__ = true;
troshx_sos_bnb_CrippledLimb.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_CrippledLimb.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_CrippledLimbAssign();
	}
	,__class__: troshx_sos_bnb_CrippledLimb
});
var troshx_sos_bnb_CrippledLimbAssign = function() {
	this.__hasUIFields__ = true;
	this.affectedLimbs = 0;
	troshx_sos_core_BaneAssign.call(this);
	var m = new troshx_sos_bnb_CrippedLimbMOBModifier(this);
	this.situationalModifiers = [m];
};
troshx_sos_bnb_CrippledLimbAssign.__name__ = true;
troshx_sos_bnb_CrippledLimbAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_CrippledLimbAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	isValid: function() {
		return this.getQty() > 0;
	}
	,getCost: function(rank) {
		return this.getQty() * troshx_sos_core_BaneAssign.prototype.getCost.call(this,rank);
	}
	,getQty: function() {
		var c = 0;
		c += (this.affectedLimbs & 1) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 2) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 4) != 0 ? 1 : 0;
		c += (this.affectedLimbs & 8) != 0 ? 1 : 0;
		return c;
	}
	,getUIFields: function() {
		return [{ prop : "affectedLimbs", type : "Bitmask", labels : ["Left Arm","Right Arm","Left Leg","Right Leg"], label : "Affected Limbs"}];
	}
	,__class__: troshx_sos_bnb_CrippledLimbAssign
});
var troshx_sos_bnb_CrippedLimbMOBModifier = function(current) {
	troshx_sos_core_SituationalCharModifier.call(this,9);
	this.current = current;
};
troshx_sos_bnb_CrippedLimbMOBModifier.__name__ = true;
troshx_sos_bnb_CrippedLimbMOBModifier.__super__ = troshx_sos_core_SituationalCharModifier;
troshx_sos_bnb_CrippedLimbMOBModifier.prototype = $extend(troshx_sos_core_SituationalCharModifier.prototype,{
	getModifiedValue: function($char,rank,qty,value) {
		if((this.current.affectedLimbs & 12) != 0) {
			var multipler = this.current.affectedLimbs == 12 ? .25 : .5;
			var mob = ($char.strength + $char.agility + $char.endurance) / 2 | 0;
			if(mob * multipler < value) {
				return mob * multipler;
			} else {
				return value;
			}
		}
		return value;
	}
	,__class__: troshx_sos_bnb_CrippedLimbMOBModifier
});
var troshx_sos_bnb_Debt = function() {
	troshx_sos_core_Bane.call(this,"Debt",[2,4,8]);
};
troshx_sos_bnb_Debt.__name__ = true;
troshx_sos_bnb_Debt.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Debt.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_DebtAssign();
	}
	,__class__: troshx_sos_bnb_Debt
});
var troshx_sos_bnb_DebtAssign = function() {
	this.__hasUIFields__ = true;
	this.currentOwed = new troshx_sos_core_Money();
	troshx_sos_core_BaneAssign.call(this);
};
troshx_sos_bnb_DebtAssign.__name__ = true;
troshx_sos_bnb_DebtAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_DebtAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getUIFields: function() {
		return [{ prop : "currentOwed", type : "Money", label : "Current Owed"}];
	}
	,__class__: troshx_sos_bnb_DebtAssign
});
var troshx_sos_bnb_Favor = function() {
	troshx_sos_core_Boon.call(this,"Favor",[1,3]);
	this.clampRank = true;
	this.multipleTimes = -2;
};
troshx_sos_bnb_Favor.__name__ = true;
troshx_sos_bnb_Favor.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Favor.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_FavorAssign();
	}
	,__class__: troshx_sos_bnb_Favor
});
var troshx_sos_bnb_FavorAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.greaterFavors = [];
	this.simpleFavors = [""];
	troshx_sos_core_BoonAssign.call(this);
};
troshx_sos_bnb_FavorAssign.__name__ = true;
troshx_sos_bnb_FavorAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_FavorAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	isValid: function() {
		return this.getQty() >= 1;
	}
	,getQty: function() {
		return this.simpleFavors.length + this.greaterFavors.length;
	}
	,getCost: function(rank) {
		return this.simpleFavors.length + 3 * this.greaterFavors.length;
	}
	,getUIFields: function() {
		var length = this.simpleFavors.length;
		return [{ prop : "simpleFavors", minLength : 0, maxLength : (this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0, of : "String", defaultValue : "", type : "Array", label : "Simple Favors"},{ prop : "greaterFavors", minLength : 0, maxLength : (this._remainingCached + this.greaterFavors.length * 3) / 3 | 0, of : "String", defaultValue : "", type : "Array", label : "Greater Favors"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_FavorAssign
});
var troshx_sos_bnb_Follower = function() {
	troshx_sos_core_Boon.call(this,"Follower",[5]);
};
troshx_sos_bnb_Follower.__name__ = true;
troshx_sos_bnb_Follower.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Follower.prototype = $extend(troshx_sos_core_Boon.prototype,{
	__class__: troshx_sos_bnb_Follower
});
var troshx_sos_bnb_ImpressiveVoice = function() {
	troshx_sos_core_Boon.call(this,"Impressive Voice",[2]);
	this.multipleTimes = 3;
};
troshx_sos_bnb_ImpressiveVoice.__name__ = true;
troshx_sos_bnb_ImpressiveVoice.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_ImpressiveVoice.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_ImpressiveVoiceAssign();
	}
	,__class__: troshx_sos_bnb_ImpressiveVoice
});
var troshx_sos_bnb_ImpressiveVoiceAssign = function() {
	this.__hasUIFields__ = true;
	this.voiceQualities = 0;
	troshx_sos_core_BoonAssign.call(this);
};
troshx_sos_bnb_ImpressiveVoiceAssign.__name__ = true;
troshx_sos_bnb_ImpressiveVoiceAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_ImpressiveVoiceAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	isValid: function() {
		return (this.voiceQualities & 7) != 0;
	}
	,getQty: function() {
		var c = 0;
		c += (this.voiceQualities & 1) != 0 ? 1 : 0;
		c += (this.voiceQualities & 2) != 0 ? 1 : 0;
		c += (this.voiceQualities & 4) != 0 ? 1 : 0;
		return c;
	}
	,getCost: function(rank) {
		return this.getQty() * 2;
	}
	,getUIFields: function() {
		return [{ prop : "voiceQualities", type : "Bitmask", labels : ["Powerful","Grating","Soothing"], label : "Voice Qualities"}];
	}
	,__class__: troshx_sos_bnb_ImpressiveVoiceAssign
});
var troshx_sos_bnb_Language = function() {
	troshx_sos_core_Boon.call(this,"Language",[1,2,3]);
	this.customCostInnerSlashes = "|/";
	this.multipleTimes = -2;
};
troshx_sos_bnb_Language.__name__ = true;
troshx_sos_bnb_Language.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Language.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_LanguageAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_Language
});
var troshx_sos_bnb_LanguageAssign = function($char) {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.ingameLanguages = [];
	this.polyglotLanguages = [];
	this.secondLanguage = [];
	this.startingLanguages = [""];
	troshx_sos_core_BoonAssign.call(this);
	this["char"] = $char;
};
troshx_sos_bnb_LanguageAssign.__name__ = true;
troshx_sos_bnb_LanguageAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_LanguageAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.startingLanguages.length;
	}
	,getRankCost: function(rank) {
		if(rank > 1) {
			if(rank == 3) {
				return 3;
			} else {
				return 2;
			}
		} else {
			return 1;
		}
	}
	,getCost: function(rank) {
		return (this.startingLanguages.length > 1 ? this.startingLanguages.length - 1 : 0) + (rank > 1 ? rank == 3 ? 3 : 2 : 1);
	}
	,getUIFields: function() {
		return [{ prop : "startingLanguages", minLength : this.rank >= 2 ? 0 : 1, label : "Starting Languages #1", maxLength : (this._remainingCached + this.startingLanguages.length) / 1 | 0, of : "String", defaultValue : "", type : "Array"},{ prop : "secondLanguage", label : "2nd Language #2", maxLength : this.rank == 2 ? 1 : 0, of : "String", defaultValue : "", type : "Array"},{ prop : "polyglotLanguages", label : "Starting Polyglot Languages #3", maxLength : this.rank >= 3 ? this["char"].intelligence + 2 : 0, of : "String", defaultValue : "", type : "Array"},{ prop : "ingameLanguages", maxLength : this.ingame ? null : 0, of : "String", defaultValue : "", type : "Array", label : "Ingame Languages"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_LanguageAssign
});
var troshx_sos_bnb_LastingPain = function() {
	troshx_sos_core_Bane.call(this,"Lasting Pain",[4,8]);
	this.flags = 2;
	this.multipleTimes = -2;
	this.clampRank = true;
};
troshx_sos_bnb_LastingPain.__name__ = true;
troshx_sos_bnb_LastingPain.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_LastingPain.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_LastingPainAssign(charSheet);
	}
	,__class__: troshx_sos_bnb_LastingPain
});
var troshx_sos_bnb_LastingPainAssign = function($char) {
	this.__hasUIFields__ = true;
	this.hitLocationsMajor = 0;
	this.hitLocationsMinor = 0;
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
};
troshx_sos_bnb_LastingPainAssign.__name__ = true;
troshx_sos_bnb_LastingPainAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_LastingPainAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getCost: function(rank) {
		return this.minorCount() * 4 + this.majorCount() * 8;
	}
	,minorCount: function() {
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & this.hitLocationsMinor) != 0) {
			++qty;
		}
		return qty;
	}
	,majorCount: function() {
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & this.hitLocationsMajor) != 0) {
			++qty;
		}
		return qty;
	}
	,getQty: function() {
		return this.minorCount() + this.majorCount();
	}
	,isValid: function() {
		if(this.hitLocationsMajor == 0) {
			return this.hitLocationsMinor != 0;
		} else {
			return true;
		}
	}
	,getUIFields: function() {
		return [{ prop : "hitLocationsMinor", type : "HitLocationMultiSelector", body : this["char"].body, label : "Hit Locations Minor"},{ prop : "hitLocationsMajor", type : "HitLocationMultiSelector", body : this["char"].body, label : "Hit Locations Major"}];
	}
	,__class__: troshx_sos_bnb_LastingPainAssign
});
var troshx_sos_bnb_Literate = function() {
	troshx_sos_core_Boon.call(this,"Literate",[1]);
	this.multipleTimes = -2;
};
troshx_sos_bnb_Literate.__name__ = true;
troshx_sos_bnb_Literate.__super__ = troshx_sos_core_Boon;
troshx_sos_bnb_Literate.prototype = $extend(troshx_sos_core_Boon.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_LiterateAssign();
	}
	,__class__: troshx_sos_bnb_Literate
});
var troshx_sos_bnb_LiterateAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.scripts = [""];
	troshx_sos_core_BoonAssign.call(this);
};
troshx_sos_bnb_LiterateAssign.__name__ = true;
troshx_sos_bnb_LiterateAssign.__super__ = troshx_sos_core_BoonAssign;
troshx_sos_bnb_LiterateAssign.prototype = $extend(troshx_sos_core_BoonAssign.prototype,{
	getQty: function() {
		return this.scripts.length;
	}
	,getCost: function(rank) {
		return this.boon.costs[0] * this.scripts.length;
	}
	,getUIFields: function() {
		var length = this.scripts.length;
		return [{ prop : "scripts", label : "Known scripts", minLength : 1, maxLength : (this._remainingCached + (length >= 1 ? length : 1)) / 1 | 0, of : "String", defaultValue : "", type : "Array"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_LiterateAssign
});
var troshx_sos_bnb_Oath = function() {
	troshx_sos_core_Bane.call(this,"Oath",[2]);
};
troshx_sos_bnb_Oath.__name__ = true;
troshx_sos_bnb_Oath.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_Oath.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		return new troshx_sos_bnb_OathAssign();
	}
	,__class__: troshx_sos_bnb_Oath
});
var troshx_sos_bnb_OathAssign = function() {
	this.__hasUIFields__ = true;
	this.notes = "";
	this.cost = 2;
	troshx_sos_core_BaneAssign.call(this);
};
troshx_sos_bnb_OathAssign.__name__ = true;
troshx_sos_bnb_OathAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_OathAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getCost: function(rank) {
		return this.cost;
	}
	,getUIFields: function() {
		return [{ prop : "cost", min : 2, max : 10, type : "Int", label : "Cost"},{ prop : "notes", type : "textarea", label : "Notes"}];
	}
	,__class__: troshx_sos_bnb_OathAssign
});
var troshx_sos_bnb_OldWound = function() {
	troshx_sos_core_Bane.call(this,"Old Wound",[1]);
	this.flags = 2;
	this.multipleTimes = -2;
};
troshx_sos_bnb_OldWound.__name__ = true;
troshx_sos_bnb_OldWound.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_OldWound.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(sheet) {
		return new troshx_sos_bnb_OldWoundAssign(sheet);
	}
	,__class__: troshx_sos_bnb_OldWound
});
var troshx_sos_bnb_OldWoundAssign = function($char) {
	this.__hasUIFields__ = true;
	this.hitLocations = 0;
	troshx_sos_core_BaneAssign.call(this);
	this["char"] = $char;
};
troshx_sos_bnb_OldWoundAssign.__name__ = true;
troshx_sos_bnb_OldWoundAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_OldWoundAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	getCost: function(rank) {
		return troshx_sos_core_BaneAssign.prototype.getCost.call(this,rank) * this.getQty();
	}
	,getQty: function() {
		var i = this["char"].body.hitLocations.length;
		var qty = 0;
		while(--i > -1) if((1 << i & this.hitLocations) != 0) {
			++qty;
		}
		return qty;
	}
	,isValid: function() {
		return this.hitLocations != 0;
	}
	,getUIFields: function() {
		return [{ prop : "hitLocations", type : "HitLocationMultiSelector", body : this["char"].body, label : "Hit Locations"}];
	}
	,__class__: troshx_sos_bnb_OldWoundAssign
});
var troshx_sos_bnb_SeveredLimb = function() {
	troshx_sos_core_Bane.call(this,"Severed Limb/Appendage",[10,15,18]);
	this.clampRank = true;
	this.flags = 2;
	this.multipleTimes = -2;
};
troshx_sos_bnb_SeveredLimb.__name__ = true;
troshx_sos_bnb_SeveredLimb.__super__ = troshx_sos_core_Bane;
troshx_sos_bnb_SeveredLimb.prototype = $extend(troshx_sos_core_Bane.prototype,{
	getEmptyAssignInstance: function(charSheet) {
		var b = new troshx_sos_bnb_SeveredLimbAssign();
		return b;
	}
	,__class__: troshx_sos_bnb_SeveredLimb
});
var troshx_sos_bnb_SeveredLimbAssign = function() {
	this.__hasUIFields__ = true;
	this.severedLegRight = 0;
	this.severedLegLeft = 0;
	this.severedArmRight = 0;
	this.severedArmLeft = 0;
	troshx_sos_core_BaneAssign.call(this);
};
troshx_sos_bnb_SeveredLimbAssign.__name__ = true;
troshx_sos_bnb_SeveredLimbAssign.__super__ = troshx_sos_core_BaneAssign;
troshx_sos_bnb_SeveredLimbAssign.prototype = $extend(troshx_sos_core_BaneAssign.prototype,{
	get_severedAreasLeft: function() {
		return this.severedArmLeft | this.severedLegLeft;
	}
	,get_severedAreasRight: function() {
		return this.severedArmRight | this.severedLegRight;
	}
	,isValid: function() {
		var a = (this.get_severedAreasLeft() & 261149) != 0;
		var b = (this.get_severedAreasRight() & 261149) != 0;
		if(!a) {
			return b;
		} else {
			return true;
		}
	}
	,getCost: function(rank) {
		var c = 0;
		c += this.severedArmLeft == 245776 ? 18 : this.severedArmLeft == 229376 ? 15 : this.severedArmLeft != 0 ? 10 : 0;
		c += this.severedArmRight == 245776 ? 18 : this.severedArmRight == 229376 ? 15 : this.severedArmRight != 0 ? 10 : 0;
		c += this.severedLegLeft == 15360 ? 18 : this.severedLegLeft == 14336 ? 15 : this.severedLegLeft != 0 ? 10 : 0;
		c += this.severedLegRight == 15360 ? 18 : this.severedLegRight == 14336 ? 15 : this.severedLegRight != 0 ? 10 : 0;
		return c;
	}
	,getUIFields: function() {
		return [{ prop : "severedArmLeft", type : "SingleSelection", label : "Left Side Upper Limb", labels : ["None","Left Hand","Left Lower Arm","Left Full Arm"], values : [0,17,229376,245776]},{ prop : "severedArmRight", type : "SingleSelection", label : "Right Side Upper Limb", labels : ["None","Right Hand","Right Lower Arm","Right Full Arm"], values : [0,17,229376,245776]},{ prop : "severedLegLeft", type : "SingleSelection", label : "Left Side Lower Limb", labels : ["None","Left Foot","Left Lower Leg","Left Full Leg"], values : [0,13,14336,15360]},{ prop : "severedLegRight", type : "SingleSelection", label : "Right Side Lower Limb", labels : ["None","Right Foot","Right Lower Leg","Right Full Leg"], values : [0,13,14336,15360]}];
	}
	,__class__: troshx_sos_bnb_SeveredLimbAssign
});
var troshx_sos_chargen_CampaignPowerLevel = function(name,pcp,maxCategoryPCP) {
	this.name = name;
	this.pcp = pcp;
	this.maxCategoryPCP = maxCategoryPCP;
};
troshx_sos_chargen_CampaignPowerLevel.__name__ = true;
troshx_sos_chargen_CampaignPowerLevel.prototype = {
	__class__: troshx_sos_chargen_CampaignPowerLevel
};
var troshx_sos_chargen_CategoryPCP = function(name,magic) {
	if(magic == null) {
		magic = false;
	}
	this.pcp = 0;
	this.name = name;
	this.magic = magic;
};
troshx_sos_chargen_CategoryPCP.__name__ = true;
troshx_sos_chargen_CategoryPCP.prototype = {
	__class__: troshx_sos_chargen_CategoryPCP
};
var troshx_sos_chargen_CharGenData = function(charSheet) {
	this.warningAttributes = { warn : false, remain : 0};
	this.warningCategories = { warn : false, remain : 0};
	this.campaignPowLevelIndex = 0;
	this.campaignPowerLevels = [new troshx_sos_chargen_CampaignPowerLevel("TestLevel",30,10)];
	this.showBnBs = true;
	this["char"] = charSheet != null ? charSheet : new troshx_sos_sheets_CharSheet();
	this.categories = troshx_sos_chargen_CharGenData.getNewCharGenCategories();
	this.categories[2].pcp = 4;
	var boonList = troshx_sos_bnb_Boons.getList();
	this.boonAssignList = [];
	this.baneAssignList = [];
	var bb;
	var _g1 = 0;
	var _g = boonList.length;
	while(_g1 < _g) {
		var i = _g1++;
		bb = boonList[i];
		if(bb.costs != null) {
			var ba;
			var tmp = this.boonAssignList;
			ba = boonList[i].getAssign(0,this["char"]);
			tmp.push(ba);
			ba._costCached = bb.costs[0];
			ba._remainingCached = 999;
		}
	}
	var baneList = troshx_sos_bnb_Banes.getList();
	var _g11 = 0;
	var _g2 = baneList.length;
	while(_g11 < _g2) {
		var i1 = _g11++;
		bb = baneList[i1];
		if(bb.costs != null) {
			var ba1;
			var tmp1 = this.baneAssignList;
			ba1 = baneList[i1].getAssign(0,this["char"]);
			tmp1.push(ba1);
			ba1._costCached = bb.costs[0];
		}
	}
};
troshx_sos_chargen_CharGenData.__name__ = true;
troshx_sos_chargen_CharGenData.getNewCharGenCategories = function() {
	var arr = [];
	var a = new troshx_sos_chargen_CategoryPCP("Race");
	arr[0] = a;
	a.slug = "gen-race";
	a = new troshx_sos_chargen_CategoryPCP("Attributes");
	arr[1] = a;
	a.slug = "gen-attributes";
	a = new troshx_sos_chargen_CategoryPCP("Boons & Banes");
	arr[2] = a;
	a.slug = "gen-bnb";
	return arr;
};
troshx_sos_chargen_CharGenData.getRaceTierFromPCP = function(pcp) {
	return pcp;
};
troshx_sos_chargen_CharGenData.getAvailableAttributePointsFromPCP = function(pcp) {
	return pcp;
};
troshx_sos_chargen_CharGenData.GetAttributeTotalCostOfLevel = function(level) {
	if(level < 11) {
		return level - 1;
	} else {
		return 9 + (level - 10) * 2;
	}
};
troshx_sos_chargen_CharGenData.MaxAttributeLevelUpsFrom = function(level,remainingAttribPoints) {
	var upTo = level + remainingAttribPoints;
	return remainingAttribPoints - (upTo > 10 ? upTo - 10 : 0);
};
troshx_sos_chargen_CharGenData.getBnBFromPCP = function(pcp) {
	return -15 + (pcp * 5 - 5);
};
troshx_sos_chargen_CharGenData.prototype = {
	get_shouldShowBnBs: function() {
		if(!this.showBnBs) {
			return this.get_totalBnBScore() < 0;
		} else {
			return true;
		}
	}
	,get_campaignPowLevel: function() {
		return this.campaignPowerLevels[this.campaignPowLevelIndex];
	}
	,get_categoryRace: function() {
		return this.categories[0];
	}
	,get_categoryAttributes: function() {
		return this.categories[1];
	}
	,get_categoriesRemainingAssignable: function() {
		var accum = 0;
		var _g1 = 0;
		var _g = this.categories.length;
		while(_g1 < _g) {
			var i = _g1++;
			accum += this.categories[i].pcp;
		}
		return this.campaignPowerLevels[this.campaignPowLevelIndex].pcp - accum;
	}
	,get_isValidCategories: function() {
		return this.get_categoriesRemainingAssignable() >= 0;
	}
	,checkWarningCategories: function() {
		var rm = this.get_categoriesRemainingAssignable();
		if(rm > 0) {
			this.warningCategories.warn = true;
			this.warningCategories.remain = rm;
			return true;
		} else {
			return false;
		}
	}
	,get_raceTier: function() {
		return troshx_sos_chargen_CharGenData.getRaceTierFromPCP(this.categories[0].pcp);
	}
	,get_totalAttributePointsSpent: function() {
		var sum = 0;
		var level = this["char"].strength;
		sum += level < 11 ? level - 1 : 9 + (level - 10) * 2;
		var level1 = this["char"].agility;
		sum += level1 < 11 ? level1 - 1 : 9 + (level1 - 10) * 2;
		var level2 = this["char"].endurance;
		sum += level2 < 11 ? level2 - 1 : 9 + (level2 - 10) * 2;
		var level3 = this["char"].health;
		sum += level3 < 11 ? level3 - 1 : 9 + (level3 - 10) * 2;
		var level4 = this["char"].willpower;
		sum += level4 < 11 ? level4 - 1 : 9 + (level4 - 10) * 2;
		var level5 = this["char"].wit;
		sum += level5 < 11 ? level5 - 1 : 9 + (level5 - 10) * 2;
		var level6 = this["char"].intelligence;
		sum += level6 < 11 ? level6 - 1 : 9 + (level6 - 10) * 2;
		var level7 = this["char"].perception;
		sum += level7 < 11 ? level7 - 1 : 9 + (level7 - 10) * 2;
		return sum;
	}
	,get_availableAttributePoints: function() {
		return troshx_sos_chargen_CharGenData.getAvailableAttributePointsFromPCP(this.categories[1].pcp);
	}
	,get_remainingAttributePoints: function() {
		return this.get_availableAttributePoints() - this.get_totalAttributePointsSpent();
	}
	,canBuyMoreAttributeLevels: function() {
		var rm = this.get_remainingAttributePoints();
		var upTo = this["char"].strength + rm;
		if(rm - (upTo > 10 ? upTo - 10 : 0) > 0) {
			return true;
		}
		var upTo1 = this["char"].agility + rm;
		if(rm - (upTo1 > 10 ? upTo1 - 10 : 0) > 0) {
			return true;
		}
		var upTo2 = this["char"].endurance + rm;
		if(rm - (upTo2 > 10 ? upTo2 - 10 : 0) > 0) {
			return true;
		}
		var upTo3 = this["char"].health + rm;
		if(rm - (upTo3 > 10 ? upTo3 - 10 : 0) > 0) {
			return true;
		}
		var upTo4 = this["char"].willpower + rm;
		if(rm - (upTo4 > 10 ? upTo4 - 10 : 0) > 0) {
			return true;
		}
		var upTo5 = this["char"].wit + rm;
		if(rm - (upTo5 > 10 ? upTo5 - 10 : 0) > 0) {
			return true;
		}
		var upTo6 = this["char"].intelligence + rm;
		if(rm - (upTo6 > 10 ? upTo6 - 10 : 0) > 0) {
			return true;
		}
		var upTo7 = this["char"].perception + rm;
		if(rm - (upTo7 > 10 ? upTo7 - 10 : 0) > 0) {
			return true;
		}
		return false;
	}
	,checkWarningAttributes: function() {
		var rm = this.get_remainingAttributePoints();
		if(rm > 0 && this.canBuyMoreAttributeLevels()) {
			this.warningAttributes.warn = true;
			this.warningAttributes.remain = rm;
			return true;
		} else {
			return false;
		}
	}
	,addBB: function(bba,isBane) {
		if(isBane) {
			this["char"].addBane(bba);
		} else {
			this["char"].addBoon(bba);
		}
	}
	,removeBB: function(bba,isBane) {
		if(isBane) {
			this["char"].removeBane(bba);
		} else {
			this["char"].removeBoon(bba);
		}
	}
	,get_categoryBnB: function() {
		return this.categories[2];
	}
	,get_totalBaneExpenditure: function() {
		var arr = this["char"].banes.list;
		var total = 0;
		var i = arr.length;
		while(--i > -1) {
			var b = arr[i];
			total += !b._canceled ? b._costCached : 0;
		}
		return total;
	}
	,get_maxBanePointsEarnable: function() {
		if(this.get_BnBpoints() < 0) {
			return 15 - this.get_BnBpoints();
		} else {
			return 15;
		}
	}
	,get_totalBanePointsEarned: function() {
		var a = this.get_totalBaneExpenditure();
		var b = this.get_BnBpoints() < 0 ? 15 - this.get_BnBpoints() : 15;
		if(a > b) {
			return b;
		} else {
			return a;
		}
	}
	,get_totalBanePointsSpent: function() {
		return this.get_totalBaneExpenditure() - this.get_totalBanePointsEarned();
	}
	,get_totalBoonExpenditure: function() {
		var arr = this["char"].boons.list;
		var total = 0;
		var i = arr.length;
		while(--i > -1) {
			var b = arr[i];
			total += !b._canceled ? b._costCached : 0;
		}
		return total;
	}
	,get_boonsArray: function() {
		return this["char"].boons.list;
	}
	,get_banesArray: function() {
		return this["char"].banes.list;
	}
	,get_BnBpoints: function() {
		return -15 + (this.get_categoryBnB().pcp * 5 - 5);
	}
	,get_totalBnBScore: function() {
		return this.get_BnBpoints() + this.get_totalBanePointsEarned() - this.get_totalBanePointsSpent() - this.get_totalBoonExpenditure();
	}
	,get_maxBoonsSpendable: function() {
		return this.get_BnBpoints() + (this.get_BnBpoints() < 0 ? 15 - this.get_BnBpoints() : 15);
	}
	,get_maxBoonsSpendableLeft: function() {
		return this.get_maxBoonsSpendable() - this.get_totalBoonExpenditure();
	}
	,get_maxBanesSpendable: function() {
		return (this.get_BnBpoints() < 0 ? 15 - this.get_BnBpoints() : 15) + (this.get_BnBpoints() < 0 ? 0 : this.get_BnBpoints());
	}
	,get_maxBanesSpendableLeft: function() {
		return this.get_maxBanesSpendable() - this.get_totalBaneExpenditure();
	}
	,isValidAll: function(showWarnings) {
		if(showWarnings == null) {
			showWarnings = false;
		}
		return true;
	}
	,__class__: troshx_sos_chargen_CharGenData
};
var troshx_sos_core_Item = function(id,name) {
	if(name == null) {
		name = "";
	}
	if(id == null) {
		id = "";
	}
	this.unit = 1;
	this.costCurrency = 0;
	this.cost = 0;
	this.flags = 0;
	this.weight = 0;
	this.id = id != null ? id : "Item_" + troshx_sos_core_Item.UID_COUNT++;
	this.name = name;
};
troshx_sos_core_Item.__name__ = true;
troshx_sos_core_Item.getLabelsOfArray = function(a,mask) {
	var arr = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if((mask & 1 << i) != 0) {
			arr.push(a[i].name);
		}
	}
	return arr;
};
troshx_sos_core_Item.sign = function(i) {
	if(i >= 0) {
		return "+";
	} else {
		return "";
	}
};
troshx_sos_core_Item.labelizeAllCaps = function(name) {
	var spl = name.split("_");
	var _g1 = 0;
	var _g = spl.length;
	while(_g1 < _g) {
		var i = _g1++;
		spl[i] = spl[i].charAt(0).toUpperCase() + HxOverrides.substr(spl[i],1,null).toLowerCase();
	}
	return spl.join(" ");
};
troshx_sos_core_Item.labelizeCamelCase = function(name) {
	var r_r = new RegExp("([A-Z]+)","g".split("u").join(""));
	var r2_r = new RegExp("([A-Z][a-z])","g".split("u").join(""));
	name = name.replace(r_r,"$1");
	name = name.replace(r2_r," $1");
	name = StringTools.trim(name);
	name = name.charAt(0).toUpperCase() + HxOverrides.substr(name,1,null);
	return name;
};
troshx_sos_core_Item.labelizeAllCapsArr = function(arr) {
	var newArr = [];
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		newArr[i] = troshx_sos_core_Item.labelizeAllCaps(arr[i]);
	}
	return newArr;
};
troshx_sos_core_Item.labelizeCamelCaseArr = function(arr) {
	var newArr = [];
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		newArr[i] = troshx_sos_core_Item.labelizeCamelCase(arr[i]);
	}
	return newArr;
};
troshx_sos_core_Item.prototype = {
	setWeightCost: function(weight,cost,costCurrency) {
		this.weight = weight;
		this.cost = cost;
		this.costCurrency = costCurrency;
		return this;
	}
	,setUnit: function(unit) {
		this.unit = unit;
		return this;
	}
	,addTagsToStrArr: function(arr) {
		if((this.flags & 2) != 0) {
			arr.push("Strapped");
		}
		if(js_Boot.getClass(this) != troshx_sos_core_Weapon && (this.flags & 1) != 0) {
			arr.push("Two-Handed");
		}
	}
	,getTypeLabel: function() {
		return "MiscItem";
	}
	,get_uid: function() {
		if(this.id != "") {
			return this.id;
		} else {
			return this.name;
		}
	}
	,get_label: function() {
		return this.name;
	}
	,get_twoHanded: function() {
		return (this.flags & 1) != 0;
	}
	,get_strapped: function() {
		return (this.flags & 2) != 0;
	}
	,__class__: troshx_sos_core_Item
};
var troshx_sos_core_Armor = function() {
	this.customise = null;
	this.special = null;
	this.specialFlags = 0;
	this.pp = 0;
	this.helmet = false;
	this.AVB = 0;
	this.AVP = 0;
	this.AVC = 0;
	troshx_sos_core_Item.call(this);
};
troshx_sos_core_Armor.__name__ = true;
troshx_sos_core_Armor.createEmptyInstance = function() {
	var armor = new troshx_sos_core_Armor();
	armor.coverage = { };
	return armor;
};
troshx_sos_core_Armor.__super__ = troshx_sos_core_Item;
troshx_sos_core_Armor.prototype = $extend(troshx_sos_core_Item.prototype,{
	get_uid: function() {
		return troshx_sos_core_Item.prototype.get_uid.call(this) + (this.customise != null ? " *" + this.customise.get_uid() + "*" : "");
	}
	,addCoverageTagsToStrArr: function(arr) {
		var bodyChar = this.special != null && this.special.otherBodyType != null ? this.special.otherBodyType : troshx_sos_core_BodyChar.getInstance();
		bodyChar.pushArmorCoverageLabelsTo(this.coverage,arr);
	}
	,addTagsToStrArr: function(arr) {
		troshx_sos_core_Item.prototype.addTagsToStrArr.call(this,arr);
		if(this.pp > 0) {
			arr.push("PP -" + this.pp);
		}
		var flags = this.specialFlags;
		if(flags != 0) {
			if((flags & 1) != 0) {
				arr.push("Hard");
			}
			if((flags & 2) != 0) {
				arr.push("Mail");
			}
			if((flags & 4) != 0) {
				arr.push("Textile");
			}
			if((flags & 8) != 0) {
				arr.push("Bulletproof");
			}
		}
		if(this.special != null) {
			this.special.addTagsToStrArr(arr);
		}
	}
	,getTypeLabel: function() {
		return "Armor";
	}
	,__class__: troshx_sos_core_Armor
});
var troshx_sos_core_ArmorCustomise = function() {
	this.hitLocationAllAVModifiers = null;
	this.name = "";
};
troshx_sos_core_ArmorCustomise.__name__ = true;
troshx_sos_core_ArmorCustomise.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_ArmorCustomise.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_ArmorCustomise
};
var troshx_sos_core_ArmorSpecial = function() {
	this.otherBodyType = null;
	this.modifiers = null;
	this.layer = null;
	this.restrictsBreathing = 0;
};
troshx_sos_core_ArmorSpecial.__name__ = true;
troshx_sos_core_ArmorSpecial.prototype = {
	addTagsToStrArr: function(arr) {
		var instance = this;
		var bodyChar = this.otherBodyType != null ? this.otherBodyType : troshx_sos_core_BodyChar.getInstance();
		if(this.otherBodyType != null) {
			arr.push("For Body Type: " + bodyChar.name);
		}
		if(instance.restrictsBreathing != 0) {
			arr.push("Restricts Breathing" + " " + instance.restrictsBreathing);
		}
		if(this.layer != null) {
			var _this = this.layer;
			if(_this.coverage != 0) {
				var myArr = [];
				bodyChar.pushHitLocationNamesToStrArrByMask(arr,_this.coverage);
				arr.push("Layers " + _this.value + " (\"+" + myArr.join(", ") + "+\")");
			} else {
				arr.push("Layer " + _this.value);
			}
		}
		if(this.modifiers != null) {
			var _g1 = 0;
			var _g = this.modifiers.length;
			while(_g1 < _g) {
				var i = _g1++;
				var modifier = this.modifiers[i];
			}
		}
	}
	,__class__: troshx_sos_core_ArmorSpecial
};
var troshx_sos_core_Layering = function() {
	this.coverage = 0;
	this.value = 1;
};
troshx_sos_core_Layering.__name__ = true;
troshx_sos_core_Layering.prototype = {
	addTagsToStrArr: function(arr,bodyChar) {
		if(this.coverage != 0) {
			var myArr = [];
			bodyChar.pushHitLocationNamesToStrArrByMask(arr,this.coverage);
			arr.push("Layers " + this.value + " (\"+" + myArr.join(", ") + "+\")");
		} else {
			arr.push("Layer " + this.value);
		}
	}
	,__class__: troshx_sos_core_Layering
};
var troshx_sos_core_HitModifiers = function() {
	this.addAV = 0;
	this.multiplyAV = 1;
	this.targetZoneMask = 0;
	this.locationMask = 0;
};
troshx_sos_core_HitModifiers.__name__ = true;
troshx_sos_core_HitModifiers.prototype = {
	addTagsToStrArr: function(arr,bodyChar) {
	}
	,__class__: troshx_sos_core_HitModifiers
};
var troshx_sos_core_BodyChar = function() {
	this.hitLocationHash = null;
};
troshx_sos_core_BodyChar.__name__ = true;
troshx_sos_core_BodyChar.getInstance = function() {
	if(troshx_sos_core_BodyChar.DEFAULT != null) {
		return troshx_sos_core_BodyChar.DEFAULT;
	} else {
		return troshx_sos_core_BodyChar.DEFAULT = troshx_sos_core_BodyChar.getNewDefaultInstance();
	}
};
troshx_sos_core_BodyChar.getNewDefaultInstance = function() {
	var bodyChar = new troshx_sos_core_BodyChar();
	bodyChar.name = "Humanoid";
	bodyChar.targetZones = troshx_sos_core_Humanoid.getNewTargetZones();
	bodyChar.hitLocations = troshx_sos_core_Humanoid.getNewHitLocations();
	bodyChar.thrustStartIndex = 9;
	bodyChar.missileHitLocations = [];
	bodyChar.bake();
	return bodyChar;
};
troshx_sos_core_BodyChar.createBlankInstance = function() {
	var bodyChar = new troshx_sos_core_BodyChar();
	bodyChar.name = "";
	bodyChar.targetZones = [];
	bodyChar.missileHitLocations = [];
	bodyChar.hitLocations = [];
	bodyChar.thrustStartIndex = 0;
	return bodyChar;
};
troshx_sos_core_BodyChar.createEmptyInstance = function() {
	return new troshx_sos_core_BodyChar();
};
troshx_sos_core_BodyChar.prototype = {
	isThrusting: function(targetZone) {
		return targetZone >= this.thrustStartIndex;
	}
	,bake: function() {
		var obj = { };
		var _g1 = 0;
		var _g = this.hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			obj[this.hitLocations[i].id] = i;
		}
		this.hitLocationHash = obj;
	}
	,pushHitLocationNamesToStrArrByMask: function(arr,mask) {
		var _g1 = 0;
		var _g = this.hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			if((mask & 1 << i) != 0) {
				arr.push(this.hitLocations[i].name);
			}
		}
	}
	,pushArmorCoverageLabelsTo: function(coverage,arr) {
		var _g = 0;
		var _g1 = Reflect.fields(this.hitLocationHash);
		while(_g < _g1.length) {
			var f = _g1[_g];
			++_g;
			var h = this.hitLocations[this.hitLocationHash[f]];
			var f1 = coverage[f];
			arr.push(h.name + ((f1 & 2) != 0 ? "☄" : "") + ((f1 & 1) != 0 ? "*" : ""));
		}
	}
	,__class__: troshx_sos_core_BodyChar
};
var troshx_sos_core_IBodyHitZones = function() { };
troshx_sos_core_IBodyHitZones.__name__ = true;
var troshx_sos_core_Humanoid = function() { };
troshx_sos_core_Humanoid.__name__ = true;
troshx_sos_core_Humanoid.getNewTargetZones = function() {
	return [troshx_sos_core_TargetZone.create("Head",[],[],0,"Downward swing"),troshx_sos_core_TargetZone.create("Head",[],[],0,"Upward swing"),troshx_sos_core_TargetZone.create("Neck",[],[]),troshx_sos_core_TargetZone.create("Torso",[],[]),troshx_sos_core_TargetZone.create("Upper Arm",[],[]),troshx_sos_core_TargetZone.create("Lower Arm",[],[]),troshx_sos_core_TargetZone.create("Upper Leg",[],[]),troshx_sos_core_TargetZone.create("Lower Leg",[],[]),troshx_sos_core_TargetZone.create("Groin",[],[]),troshx_sos_core_TargetZone.create("Head",[],[]),troshx_sos_core_TargetZone.create("Neck",[],[]),troshx_sos_core_TargetZone.create("Chest",[],[]),troshx_sos_core_TargetZone.create("Belly",[],[]),troshx_sos_core_TargetZone.create("Upper Arm",[],[]),troshx_sos_core_TargetZone.create("Lower Arm",[],[]),troshx_sos_core_TargetZone.create("Groin",[],[]),troshx_sos_core_TargetZone.create("Upper Leg",[],[]),troshx_sos_core_TargetZone.create("Lower Leg",[],[])];
};
troshx_sos_core_Humanoid.getNewHitLocations = function() {
	return [new troshx_sos_core_HitLocation("Upper Head","upperHead"),new troshx_sos_core_HitLocation("Face","face"),new troshx_sos_core_HitLocation("Lower Head","lowerHead"),new troshx_sos_core_HitLocation("Neck","neck"),new troshx_sos_core_HitLocation("Shoulder","shoulder"),new troshx_sos_core_HitLocation("Chest","chest"),new troshx_sos_core_HitLocation("Side","side",true),new troshx_sos_core_HitLocation("Belly","belly"),new troshx_sos_core_HitLocation("Hip","hip"),new troshx_sos_core_HitLocation("Groin","groin"),new troshx_sos_core_HitLocation("Thigh","thigh",true),new troshx_sos_core_HitLocation("Knee","knee",true),new troshx_sos_core_HitLocation("Shin","shin",true),new troshx_sos_core_HitLocation("Foot","foot",true),new troshx_sos_core_HitLocation("Upper Arm","upperArm",true),new troshx_sos_core_HitLocation("Elbow","elbow",true),new troshx_sos_core_HitLocation("Forearm","forearm",true),new troshx_sos_core_HitLocation("Hand","hand",true),new troshx_sos_core_HitLocation("Upper Back","upperBack"),new troshx_sos_core_HitLocation("Lower Back","lowerBack")];
};
var troshx_sos_core_Crossbow = function() {
	this.spanningTools = 0;
	this.span = 0;
};
troshx_sos_core_Crossbow.__name__ = true;
troshx_sos_core_Crossbow.prototype = {
	getSpanningToolsStrArr: function() {
		var arr = troshx_sos_core_Item.getLabelsOfArray(troshx_sos_core_SpanningTool.getDefaultList(),this.spanningTools);
		return arr;
	}
	,addAmmoTagsToStrArr: function(arr) {
		if(this.span != 0) {
			arr.push("Span " + (this.span >= 0 ? "+" : "") + this.span);
		}
	}
	,__class__: troshx_sos_core_Crossbow
};
var troshx_sos_core_SpanningTool = function(name,spanBonus,storeSpan,id) {
	if(id == null) {
		id = "";
	}
	if(storeSpan == null) {
		storeSpan = false;
	}
	if(spanBonus == null) {
		spanBonus = 0;
	}
	if(name == null) {
		name = "";
	}
	troshx_sos_core_Item.call(this,id,name);
	this.spanBonus = spanBonus;
	this.storeSpan = storeSpan;
};
troshx_sos_core_SpanningTool.__name__ = true;
troshx_sos_core_SpanningTool.getDefaultList = function() {
	if(troshx_sos_core_SpanningTool.LIST != null) {
		return troshx_sos_core_SpanningTool.LIST;
	} else {
		return troshx_sos_core_SpanningTool.LIST = troshx_sos_core_SpanningTool.getNewDefaultList();
	}
};
troshx_sos_core_SpanningTool.getNewDefaultList = function() {
	var a = [];
	a[0] = new troshx_sos_core_SpanningTool("Hand",0,false,"").setWeightCost(0,0,0);
	a[1] = new troshx_sos_core_SpanningTool("Lever",2,false,"").setWeightCost(0,5,0);
	a[2] = new troshx_sos_core_SpanningTool("Screw",0,true,"").setWeightCost(0,1,1);
	a[3] = new troshx_sos_core_SpanningTool("Stirrup",5,false,"").setWeightCost(1,5,0);
	a[4] = new troshx_sos_core_SpanningTool("Windlass",4,true,"").setWeightCost(1,2,1);
	a[5] = new troshx_sos_core_SpanningTool("Winch",6,true,"").setWeightCost(2,3,1);
	a[6] = new troshx_sos_core_SpanningTool("Crank",3,true,"").setWeightCost(0,1,1);
	return a;
};
troshx_sos_core_SpanningTool.__super__ = troshx_sos_core_Item;
troshx_sos_core_SpanningTool.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_SpanningTool
});
var troshx_sos_core_DamageType = function() {
};
troshx_sos_core_DamageType.__name__ = true;
troshx_sos_core_DamageType.isMelee = function(type) {
	return type < 4;
};
troshx_sos_core_DamageType.getNewFlagVarNames = function() {
	var arr = [];
	arr.push("c");
	arr.push("p");
	arr.push("b");
	arr.push("u");
	arr.push("fl");
	arr.push("br");
	arr.push("el");
	arr.push("cl");
	return arr;
};
troshx_sos_core_DamageType.getFlagVarNames = function() {
	if(troshx_sos_core_DamageType.FLAG_VAR_NAMES != null) {
		return troshx_sos_core_DamageType.FLAG_VAR_NAMES;
	} else {
		return troshx_sos_core_DamageType.FLAG_VAR_NAMES = troshx_sos_core_DamageType.getNewFlagVarNames();
	}
};
troshx_sos_core_DamageType.getNewFlagLabels = function() {
	var arr = [];
	arr.push("Cutting");
	arr.push("Piercing");
	arr.push("Bludgeoning");
	arr.push("Unarmed");
	arr.push("Falling");
	arr.push("Burn");
	arr.push("Electrical");
	arr.push("Cold");
	return arr;
};
troshx_sos_core_DamageType.getFlagLabels = function() {
	if(troshx_sos_core_DamageType.FLAG_LABELS != null) {
		return troshx_sos_core_DamageType.FLAG_LABELS;
	} else {
		return troshx_sos_core_DamageType.FLAG_LABELS = troshx_sos_core_DamageType.getNewFlagLabels();
	}
};
troshx_sos_core_DamageType.prototype = {
	__class__: troshx_sos_core_DamageType
};
var troshx_sos_core_Firearm = function() {
	this.firingMechanism = null;
	this.highCaliber = 0;
	this.revolver = 0;
	this.magazine = 0;
	this.multishot = 0;
	this["double"] = false;
	this.load = 0;
	this.ammunitionsCustom = null;
	this.ammunitions = 0;
};
troshx_sos_core_Firearm.__name__ = true;
troshx_sos_core_Firearm.prototype = {
	addTagsToStrArr: function(arr,addSign,forAmmo) {
		if(this["double"]) {
			arr.push("Double");
		}
		if(this.multishot != 0) {
			arr.push("Multishot " + (addSign ? this.multishot >= 0 ? "+" : "" : "") + this.multishot);
		}
		if(this.magazine != 0) {
			arr.push("Magazine " + (addSign ? this.magazine >= 0 ? "+" : "" : "") + this.magazine);
		}
		if(this.revolver != 0) {
			arr.push("Revolver " + (addSign ? this.revolver >= 0 ? "+" : "" : "") + this.revolver);
		}
		if(this.revolver != 0) {
			arr.push("High Caliber " + (addSign ? this.highCaliber >= 0 ? "+" : "" : "") + this.highCaliber);
		}
		if(forAmmo && this.load != 0) {
			arr.push("Load " + (addSign ? this.load >= 0 ? "+" : "" : "") + this.load);
		}
	}
	,getAmmunitionsStrArr: function() {
		var arr = troshx_sos_core_Item.getLabelsOfArray(troshx_sos_core_Ammunition.getDefaultList(),this.ammunitions);
		if(this.ammunitionsCustom != null) {
			arr = this.ammunitionsCustom.concat(arr);
		}
		return arr;
	}
	,__class__: troshx_sos_core_Firearm
};
var troshx_sos_core_FiringMechanism = function(name,loadingMechanisms,id) {
	if(id == null) {
		id = "";
	}
	if(loadingMechanisms == null) {
		loadingMechanisms = 0;
	}
	if(name == null) {
		name = "";
	}
	this.loadingMechanismsCustom = null;
	troshx_sos_core_Item.call(this,id,name);
	this.loadingMechanisms = loadingMechanisms;
};
troshx_sos_core_FiringMechanism.__name__ = true;
troshx_sos_core_FiringMechanism.getDefaultList = function() {
	if(troshx_sos_core_FiringMechanism.LIST != null) {
		return troshx_sos_core_FiringMechanism.LIST;
	} else {
		return troshx_sos_core_FiringMechanism.LIST = troshx_sos_core_FiringMechanism.getNewDefaultList();
	}
};
troshx_sos_core_FiringMechanism.getNewDefaultList = function() {
	var a = [];
	var f = new troshx_sos_core_FiringMechanism("Caplock",5).setWeightCost(0,12,2);
	a[0] = f;
	f = new troshx_sos_core_FiringMechanism("Firelock",1);
	a[1] = f;
	f = new troshx_sos_core_FiringMechanism("Flintlock",5).setWeightCost(0,3,1);
	a[2] = f;
	f = new troshx_sos_core_FiringMechanism("Matchlock",5).setWeightCost(0,6,0);
	a[3] = f;
	f = new troshx_sos_core_FiringMechanism("Needlefire",10).setWeightCost(0,5,2);
	a[4] = f;
	f = new troshx_sos_core_FiringMechanism("Snaplock",5).setWeightCost(0,2,1);
	a[5] = f;
	f = new troshx_sos_core_FiringMechanism("Wheelock",5).setWeightCost(0,8,1);
	a[6] = f;
	return a;
};
troshx_sos_core_FiringMechanism.__super__ = troshx_sos_core_Item;
troshx_sos_core_FiringMechanism.prototype = $extend(troshx_sos_core_Item.prototype,{
	__class__: troshx_sos_core_FiringMechanism
});
var troshx_sos_core_Weapon = function(id,name) {
	if(name == null) {
		name = "";
	}
	if(id == null) {
		id = "";
	}
	this.isAmmo = false;
	this.firearm = null;
	this.crossbow = null;
	this.requiredStr = 0;
	this.stuckChance = 0;
	this.missileSpecial = null;
	this.missileFlags = 0;
	this.damageTypeM = 1;
	this.damageM = 0;
	this.atnM = 0;
	this.range = 0;
	this.meleeSpecial = null;
	this.meleeFlags = 0;
	this.guard = 0;
	this.dtn = 0;
	this.damageTypeT = 1;
	this.damageTypeS = 0;
	this.damageT = 0;
	this.damageS = 0;
	this.atnT = 0;
	this.atnS = 0;
	this.variant = null;
	this.reach = 4;
	this.ranged = false;
	this.profsCustom = null;
	this.profs = 0;
	this.customise = null;
	troshx_sos_core_Item.call(this,id,name);
};
troshx_sos_core_Weapon.__name__ = true;
troshx_sos_core_Weapon.IsPowerOfTwoOrZero = function(x) {
	return (x & x - 1) == 0;
};
troshx_sos_core_Weapon.__super__ = troshx_sos_core_Item;
troshx_sos_core_Weapon.prototype = $extend(troshx_sos_core_Item.prototype,{
	sanity: function() {
		if(!this.ranged) {
			this.firearm = null;
			this.crossbow = null;
		}
	}
	,isAttachment: function() {
		var m = (this.meleeFlags & 65536) != 0;
		var r = (this.missileFlags & 16) != 0;
		if(this.ranged) {
			return r;
		} else {
			return m;
		}
	}
	,isMeleeAttachmentFor: function(other) {
		if(this.ranged) {
			return false;
		} else if((this.meleeFlags & 65536) != 0) {
			return other.supportsMeleeAttachment();
		} else {
			return false;
		}
	}
	,supportsMeleeAttachment: function() {
		var ranged = this.ranged;
		if((this.meleeFlags & 20480) != 0) {
			return !ranged;
		} else {
			return false;
		}
	}
	,hasNoProf: function() {
		if(this.profsCustom == null || this.profsCustom.list.length == 0) {
			return this.profs == 0;
		} else {
			return false;
		}
	}
	,matchesTypes: function(ranged,profs) {
		var thisProfs = this.profs;
		if(this.ranged == ranged) {
			if(profs != null) {
				return (profs & thisProfs) != 0;
			} else {
				return true;
			}
		} else {
			return false;
		}
	}
	,isMelee: function() {
		if(!this.ranged) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isRangedWeap: function() {
		if(this.ranged) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isBow: function() {
		var a = (this.profs & 1) != 0;
		if(this.ranged && a) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isSling: function() {
		var a = (this.profs & 2) != 0;
		if(this.ranged && a) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isCrossbow: function() {
		var a = (this.profs & 4) != 0;
		if(this.ranged && a && !this.isAmmo) {
			return this.crossbow != null;
		} else {
			return false;
		}
	}
	,isFirearm: function() {
		var a = (this.profs & 8) != 0;
		if(this.ranged && a && !this.isAmmo) {
			return this.firearm != null;
		} else {
			return false;
		}
	}
	,isThrowing: function() {
		var a = (this.profs & 16) != 0;
		if(this.ranged && a) {
			return !this.isAmmo;
		} else {
			return false;
		}
	}
	,isAmmunition: function() {
		if(this.isAmmo) {
			return this.ranged;
		} else {
			return false;
		}
	}
	,profLabels: function() {
		var arr = troshx_sos_core_Profeciency.getLabelsOfArrayProfs(this.ranged ? troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged() : troshx_sos_core_Profeciency.getCoreMelee(),this.profs);
		if(this.profsCustom != null) {
			var _g1 = 0;
			var _g = this.profsCustom.list.length;
			while(_g1 < _g) {
				var i = _g1++;
				arr.push(this.profsCustom.list[i].name);
			}
		}
		return arr.join(", ");
	}
	,addTagsToStrArr: function(arr) {
		troshx_sos_core_Item.prototype.addTagsToStrArr.call(this,arr);
		var flags = this.ranged ? this.missileFlags : this.meleeFlags;
		var myArr;
		var valCheck;
		if(this.ranged) {
			myArr = troshx_sos_core_MissileSpecial.getLabelsOfFlags(this.missileSpecial,this.missileFlags);
			var _g1 = 0;
			var _g = myArr.length;
			while(_g1 < _g) {
				var i = _g1++;
				arr.push(myArr[i]);
			}
			if(this.isAmmo) {
				if(this.crossbow != null && (this.profs & 4) != 0) {
					this.crossbow.addAmmoTagsToStrArr(arr);
				}
				if((this.profs & 1) != 0) {
					if(this.requiredStr != 0) {
						arr.push("Required STR " + (this.requiredStr >= 0 ? "+" : "") + this.requiredStr);
					}
				}
			}
			if(this.firearm != null && (this.profs & 8) != 0) {
				this.firearm.addTagsToStrArr(arr,this.isAmmo,this.isAmmo);
			}
		} else {
			myArr = troshx_sos_core_MeleeSpecial.getLabelsOfFlags(this.meleeSpecial,this.meleeFlags);
			var _g11 = 0;
			var _g2 = myArr.length;
			while(_g11 < _g2) {
				var i1 = _g11++;
				arr.push(myArr[i1]);
			}
			if(this.customise != null) {
				this.customise.addMeleeTagsToStrArr(arr);
			}
		}
	}
	,isMultipleCoreProf: function() {
		if(this.profs != 0) {
			var x = this.profs;
			return (x & x - 1) != 0;
		} else {
			return false;
		}
	}
	,hasCustomProf: function() {
		if(this.profsCustom != null) {
			return this.profsCustom.list.length > 0;
		} else {
			return false;
		}
	}
	,setSingleProfIndex: function(index) {
		this.profs = 1 << index;
	}
	,setMultipleProf: function(mask) {
		this.profs = mask;
	}
	,get_uid: function() {
		return troshx_sos_core_Item.prototype.get_uid.call(this) + (this.customise != null ? "_" + this.customise.get_uid() : "");
	}
	,get_label: function() {
		var tmp;
		var tmp1;
		var a = (this.profs & 8) != 0;
		if(this.ranged && a && !this.isAmmo && this.firearm != null) {
			tmp1 = this.firearm.firingMechanism != null;
		} else {
			tmp1 = false;
		}
		if(tmp1) {
			tmp = this.firearm.firingMechanism.name + " ";
		} else {
			tmp = "";
		}
		return tmp + this.name + (this.customise != null ? " *" + (this.customise.name != null ? this.customise.name : this.customise.get_uid()) + "*" : "");
	}
	,getTypeLabel: function() {
		return "Weapon";
	}
	,__class__: troshx_sos_core_Weapon
});
var troshx_sos_core_Ammunition = function(name,catchChance,id) {
	if(id == null) {
		id = "";
	}
	if(catchChance == null) {
		catchChance = 0;
	}
	if(name == null) {
		name = "";
	}
	troshx_sos_core_Weapon.call(this,id,name);
	this.stuckChance = catchChance;
	this.isAmmo = true;
	this.profs = 8;
};
troshx_sos_core_Ammunition.__name__ = true;
troshx_sos_core_Ammunition.getDefaultList = function() {
	if(troshx_sos_core_Ammunition.LIST != null) {
		return troshx_sos_core_Ammunition.LIST;
	} else {
		return troshx_sos_core_Ammunition.LIST = troshx_sos_core_Ammunition.getNewDefaultList();
	}
};
troshx_sos_core_Ammunition.getNewDefaultList = function() {
	var a = [];
	var f = new troshx_sos_core_Ammunition("Ball",9).setWeightCost(0,1,0).setUnit(10);
	a[0] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.AP = 4;
	f = new troshx_sos_core_Ammunition("Buck and Ball",9).setWeightCost(0,1,0).setUnit(10);
	a[1] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.scatter = 3;
	f.missileSpecial.scatter_y = 6;
	f.missileSpecial.AP = 2;
	f.missileFlags = 8;
	f = new troshx_sos_core_Ammunition("Heavy Shot",9).setWeightCost(0,3,0).setUnit(10);
	a[2] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.scatter = 8;
	f.missileSpecial.scatter_y = 6;
	f = new troshx_sos_core_Ammunition("Rifle Ball",8).setWeightCost(0,6,0).setUnit(10);
	a[3] = f;
	f.atnM = -1;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.AP = 4;
	f.firearm = new troshx_sos_core_Firearm();
	f.firearm.load = -10;
	f = new troshx_sos_core_Ammunition("Shot",9).setWeightCost(0,1,0).setUnit(10);
	a[4] = f;
	f.missileSpecial = new troshx_sos_core_MissileSpecial();
	f.missileSpecial.scatter = 6;
	f.missileSpecial.scatter_y = 6;
	f = new troshx_sos_core_Ammunition("Spike",1).setWeightCost(0,1,0);
	a[5] = f;
	f.damageM = 2;
	f.atnM = -1;
	f.range = 3;
	f.firearm = new troshx_sos_core_Firearm();
	f.firearm.load = 10;
	return a;
};
troshx_sos_core_Ammunition.__super__ = troshx_sos_core_Weapon;
troshx_sos_core_Ammunition.prototype = $extend(troshx_sos_core_Weapon.prototype,{
	__class__: troshx_sos_core_Ammunition
});
var troshx_sos_core_LoadingMechanism = function(name,loadBonus,ammunitionCostModifier) {
	if(ammunitionCostModifier == null) {
		ammunitionCostModifier = 100;
	}
	if(loadBonus == null) {
		loadBonus = 0;
	}
	if(name == null) {
		name = "";
	}
	this.name = name;
	this.loadBonus = loadBonus;
	this.ammunitionCostModifier = ammunitionCostModifier;
};
troshx_sos_core_LoadingMechanism.__name__ = true;
troshx_sos_core_LoadingMechanism.getDefaultList = function() {
	if(troshx_sos_core_LoadingMechanism.LIST != null) {
		return troshx_sos_core_LoadingMechanism.LIST;
	} else {
		return troshx_sos_core_LoadingMechanism.LIST = troshx_sos_core_LoadingMechanism.getNewDefaultList();
	}
};
troshx_sos_core_LoadingMechanism.getNewDefaultList = function() {
	var a = [];
	var f = new troshx_sos_core_LoadingMechanism("Manual",0,100);
	a[0] = f;
	f = new troshx_sos_core_LoadingMechanism("Brass Catridge",10,1000);
	a[1] = f;
	f = new troshx_sos_core_LoadingMechanism("Paper Catridge",3,200);
	a[2] = f;
	f = new troshx_sos_core_LoadingMechanism("Paper Mache Catridge",5,300);
	a[3] = f;
	return a;
};
troshx_sos_core_LoadingMechanism.prototype = {
	get_ammunitionCostRatio: function() {
		return this.ammunitionCostModifier / 100;
	}
	,__class__: troshx_sos_core_LoadingMechanism
};
var troshx_sos_core_HitLocation = function(name,id,twoSided) {
	if(twoSided == null) {
		twoSided = false;
	}
	this.name = name;
	this.id = id;
	this.twoSided = twoSided;
};
troshx_sos_core_HitLocation.__name__ = true;
troshx_sos_core_HitLocation.prototype = {
	get_uid: function() {
		return this.id;
	}
	,__class__: troshx_sos_core_HitLocation
};
var troshx_sos_core_Inventory = function() {
	this.weapons = [];
	this.shields = [];
	this.equipedNonMeleeItems = [];
	this.wornArmor = [];
	this.dropPack = false;
	this.packed = new troshx_ds_IDMatchArray();
	this.dropped = new troshx_ds_IDMatchArray();
};
troshx_sos_core_Inventory.__name__ = true;
troshx_sos_core_Inventory.getUnheldLabelsArray = function() {
	var arr = [];
	arr.push("");
	arr.push("Sheath/Holster");
	arr.push("Strapped-Arm");
	arr.push("Strapped-Shoulder");
	arr.push("Back");
	arr.push("Concealed");
	arr.push("DISABLED");
	return arr;
};
troshx_sos_core_Inventory.getEmptyReadyAssign = function(type) {
	var weaponAssign;
	var shieldAssign;
	var itemAssign;
	if(type == "weapon") {
		weaponAssign = { weapon : new troshx_sos_core_Weapon(), held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++, attached : false};
		return weaponAssign;
	} else if(type == "shield") {
		shieldAssign = { shield : new troshx_sos_core_Shield(), attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return shieldAssign;
	} else {
		itemAssign = { item : new troshx_sos_core_Item(), attached : false, held : 0, unheld : 0, unheldRemark : "", key : troshx_sos_core_Inventory.UID_COUNT++};
		return itemAssign;
	}
};
troshx_sos_core_Inventory.presumedActiveItem = function(entry) {
	if(entry.held == 0) {
		return entry.unheld != 6;
	} else {
		return true;
	}
};
troshx_sos_core_Inventory.prototype = {
	getSignaler: function() {
		if(this.signaler != null) {
			return this.signaler;
		} else {
			return this.signaler = this.createSignaler();
		}
	}
	,createSignaler: function() {
		this.signaler = new msignal_Signal1();
		return this.signaler;
	}
	,setSignaler: function(val) {
		this.signaler = val;
	}
	,dispatchSignal: function(signal) {
		(this.signaler != null ? this.signaler : this.signaler = this.createSignaler()).dispatch(signal);
	}
	,getWeildableWeaponsTypeFiltered: function(ranged,profs) {
		var arr = [];
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var wp = this.weapons[i];
			var w = wp.weapon;
			var c = w.matchesTypes(ranged,profs);
			if(!(w.isAmmo && w.ranged) && c) {
				arr.push(wp);
			}
		}
		return arr;
	}
	,get_ammoFiltered: function() {
		var arr = [];
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			var wp = this.weapons[i];
			var w = this.weapons[i].weapon;
			if(w.isAmmo && w.ranged) {
				arr.push(wp);
			}
		}
		return arr;
	}
	,_shiftItem: function(item,preferedUnheld,qty,attachments) {
		if(qty == null) {
			qty = 1;
		}
		if(qty <= 0) {
			qty = 1;
		}
		if(preferedUnheld > 0) {
			if(preferedUnheld != 4) {
				var q;
				if(preferedUnheld == 1) {
					q = new troshx_sos_core_ItemQty(item,qty);
					q.attachments = attachments;
					this.packed.add(q);
				} else if(preferedUnheld == 2) {
					q = new troshx_sos_core_ItemQty(item,qty);
					q.attachments = attachments;
					this.dropped.add(q);
				} else {
					console.log("Unaccounted prefered unheld case: " + preferedUnheld);
				}
			}
		} else if(preferedUnheld < 0) {
			var delItem = new troshx_sos_core_ItemQty(item);
			if(preferedUnheld == -2) {
				this.dropped.splicedAgainst(delItem);
			} else {
				this.packed.splicedAgainst(delItem);
			}
		}
	}
	,packItemEntryFromGround: function(itemQ) {
		var qty = itemQ.qty;
		this.dropped.splicedAgainst(itemQ);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
		this._shiftItem(itemQ.item,1,qty);
	}
	,dropItemEntryFromPack: function(itemQ) {
		var qty = itemQ.qty;
		this.packed.splicedAgainst(itemQ);
		this._shiftItem(itemQ.item,2,qty);
		this.dispatchSignal(troshx_sos_core_InventorySignal.DropItem);
	}
	,equipItemEntryFromGround: function(itemQ,remark) {
		if(remark == null) {
			remark = "";
		}
		this.dropped.splicedAgainst(new troshx_sos_core_ItemQty(itemQ.item,1));
		this.dispatchSignal(troshx_sos_core_InventorySignal.EquipItem);
		return this.equipItem(itemQ.item,remark);
	}
	,equipItemEntryFromPack: function(itemQ,remark) {
		if(remark == null) {
			remark = "";
		}
		this.packed.splicedAgainst(new troshx_sos_core_ItemQty(itemQ.item,1));
		this.dispatchSignal(troshx_sos_core_InventorySignal.EquipItem);
		return this.equipItem(itemQ.item,remark);
	}
	,holdEquiped: function(alreadyEquiped,held) {
		this._unholdAllItems(held,Object.prototype.hasOwnProperty.call(alreadyEquiped,"shield"));
		alreadyEquiped.held = held;
		this.dispatchSignal(troshx_sos_core_InventorySignal.HoldItem);
	}
	,sortBetweenAttachmentItems: function(ao,bo) {
		var a = ao.get_label().toLowerCase();
		var b = bo.get_label().toLowerCase();
		if(a < b) {
			return -1;
		}
		if(a > b) {
			return 1;
		}
		return 0;
	}
	,getAttachmentArray: function(arr,fromI,propName) {
		if(fromI < 0 || fromI + 1 >= arr.length || !arr[fromI + 1].attached) {
			return null;
		}
		var newArr = [];
		var _g1 = fromI;
		var _g = arr.length;
		while(_g1 < _g) {
			var i = _g1++;
			newArr.push(Reflect.field(arr[i],propName));
			if(!arr[i].attached) {
				break;
			}
		}
		newArr.sort($bind(this,this.sortBetweenAttachmentItems));
		return newArr;
	}
	,dropEquipedShield: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		this.shields.splice(this.shields.indexOf(alreadyEquiped),1);
		if(!doDestroy) {
			this._shiftItem(alreadyEquiped.shield,2,1);
		}
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
	}
	,dropMiscItem: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		var ind = this.equipedNonMeleeItems.indexOf(alreadyEquiped);
		this.equipedNonMeleeItems.splice(ind,1);
		if(!doDestroy) {
			this._shiftItem(alreadyEquiped.item,2,1,this.getAttachmentArray(this.equipedNonMeleeItems,ind,"item"));
		}
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
	}
	,dropEquipedWeapon: function(alreadyEquiped,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		var ind = this.weapons.indexOf(alreadyEquiped);
		this.weapons.splice(ind,1);
		if(!doDestroy) {
			this._shiftItem(alreadyEquiped.weapon,2,1,this.getAttachmentArray(this.weapons,ind,"weapon"));
		}
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
	}
	,dropWornArmor: function(armor,doDestroy) {
		if(doDestroy == null) {
			doDestroy = false;
		}
		this.wornArmor.splice(this.wornArmor.indexOf(armor),1);
		if(!doDestroy) {
			this._shiftItem(armor,2,1);
		}
		this.dispatchSignal(doDestroy ? troshx_sos_core_InventorySignal.DeleteItem : troshx_sos_core_InventorySignal.DropItem);
	}
	,packEquipedShield: function(alreadyEquiped) {
		this.shields.splice(this.shields.indexOf(alreadyEquiped),1);
		this._shiftItem(alreadyEquiped.shield,1,1);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
	}
	,packMiscItem: function(alreadyEquiped) {
		var ind = this.equipedNonMeleeItems.indexOf(alreadyEquiped);
		this.equipedNonMeleeItems.splice(ind,1);
		this._shiftItem(alreadyEquiped.item,1,1,this.getAttachmentArray(this.equipedNonMeleeItems,ind,"item"));
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
	}
	,packEquipedWeapon: function(alreadyEquiped) {
		var ind = this.weapons.indexOf(alreadyEquiped);
		this.weapons.splice(ind,1);
		this._shiftItem(alreadyEquiped.weapon,1,1,this.getAttachmentArray(this.weapons,ind,"weapon"));
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
	}
	,packWornArmor: function(armor) {
		this.wornArmor.splice(this.wornArmor.indexOf(armor),1);
		this._shiftItem(armor,1,1);
		this.dispatchSignal(troshx_sos_core_InventorySignal.PackItem);
	}
	,deletePacked: function(itemQty) {
		this.packed["delete"](itemQty);
		this.dispatchSignal(troshx_sos_core_InventorySignal.DeleteItem);
	}
	,deleteDropped: function(itemQty) {
		this.dropped["delete"](itemQty);
		this.dispatchSignal(troshx_sos_core_InventorySignal.DeleteItem);
	}
	,_unholdAllItems: function(held,isForShield) {
		if(isForShield == null) {
			isForShield = false;
		}
		var w;
		var s;
		var t;
		var _g1 = 0;
		var _g = this.weapons.length;
		while(_g1 < _g) {
			var i = _g1++;
			w = this.weapons[i];
			if((w.weapon.flags & 2) == 0) {
				w.held &= ~held;
				if((w.weapon.flags & 1) != 0 && w.held != 3) {
					w.held = 0;
				}
			}
		}
		var _g11 = 0;
		var _g2 = this.shields.length;
		while(_g11 < _g2) {
			var i1 = _g11++;
			s = this.shields[i1];
			s.held &= ~held;
			if((s.shield.flags & 2) == 0 || isForShield) {
				s.held &= ~held;
				if((s.shield.flags & 1) != 0 && s.held != 3) {
					s.held = 0;
				}
			}
		}
		var _g12 = 0;
		var _g3 = this.equipedNonMeleeItems.length;
		while(_g12 < _g3) {
			var i2 = _g12++;
			t = this.equipedNonMeleeItems[i2];
			if((t.item.flags & 2) == 0) {
				t.held &= ~held;
				if((t.item.flags & 1) != 0 && t.held != 3) {
					t.held = 0;
				}
			}
		}
	}
	,equipItem: function(item,unheldRemark) {
		var unheld = 0;
		var readyAssign = null;
		var weaponAssign;
		var shieldAssign;
		var itemAssign;
		var armorAssign;
		if(js_Boot.__instanceof(item,troshx_sos_core_Weapon)) {
			weaponAssign = { attached : false, key : troshx_sos_core_Inventory.UID_COUNT++, weapon : js_Boot.__instanceof(item,troshx_sos_core_Weapon) ? item : null, held : 0, unheld : 0, unheldRemark : unheldRemark};
			readyAssign = weaponAssign;
			this.weapons.push(readyAssign);
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Shield)) {
			shieldAssign = { key : troshx_sos_core_Inventory.UID_COUNT++, attached : false, shield : js_Boot.__instanceof(item,troshx_sos_core_Shield) ? item : null, held : 0, unheld : 0, unheldRemark : unheldRemark};
			readyAssign = shieldAssign;
			this.shields.push(readyAssign);
		} else if(js_Boot.__instanceof(item,troshx_sos_core_Armor)) {
			armorAssign = js_Boot.__instanceof(item,troshx_sos_core_Armor) ? item : null;
			this.wornArmor.push(armorAssign);
		} else {
			itemAssign = { key : troshx_sos_core_Inventory.UID_COUNT++, attached : false, item : item, held : 0, unheld : 0, unheldRemark : unheldRemark};
			readyAssign = itemAssign;
			this.equipedNonMeleeItems.push(readyAssign);
		}
		return readyAssign;
	}
	,getEquipedAssignList: function(type) {
		if(type == "weapon") {
			return this.weapons;
		} else if(type == "shield") {
			return this.shields;
		} else {
			return this.equipedNonMeleeItems;
		}
	}
	,__class__: troshx_sos_core_Inventory
};
var troshx_sos_core_InventorySignal = { __ename__ : true, __constructs__ : ["DeleteItem","PackItem","DropItem","EquipItem","HoldItem"] };
troshx_sos_core_InventorySignal.DeleteItem = ["DeleteItem",0];
troshx_sos_core_InventorySignal.DeleteItem.toString = $estr;
troshx_sos_core_InventorySignal.DeleteItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.PackItem = ["PackItem",1];
troshx_sos_core_InventorySignal.PackItem.toString = $estr;
troshx_sos_core_InventorySignal.PackItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.DropItem = ["DropItem",2];
troshx_sos_core_InventorySignal.DropItem.toString = $estr;
troshx_sos_core_InventorySignal.DropItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.EquipItem = ["EquipItem",3];
troshx_sos_core_InventorySignal.EquipItem.toString = $estr;
troshx_sos_core_InventorySignal.EquipItem.__enum__ = troshx_sos_core_InventorySignal;
troshx_sos_core_InventorySignal.HoldItem = ["HoldItem",4];
troshx_sos_core_InventorySignal.HoldItem.toString = $estr;
troshx_sos_core_InventorySignal.HoldItem.__enum__ = troshx_sos_core_InventorySignal;
var troshx_sos_core_ItemQty = function(item,qty) {
	if(qty == null) {
		qty = 1;
	}
	this.attachments = null;
	this.item = item != null ? item : new troshx_sos_core_Item();
	this.qty = qty;
};
troshx_sos_core_ItemQty.__name__ = true;
troshx_sos_core_ItemQty.__interfaces__ = [troshx_ds_IValidable,troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_ItemQty.prototype = {
	isValid: function() {
		if(this.qty > 0 && this.item != null && this.item.name != null) {
			return StringTools.trim(this.item.name) != "";
		} else {
			return false;
		}
	}
	,getAttachmentsId: function() {
		var str = "";
		var _g1 = 0;
		var _g = this.attachments.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "+" + this.attachments[i].get_uid();
		}
		return str;
	}
	,getAttachmentsLabels: function() {
		var str = "";
		var _g1 = 0;
		var _g = this.attachments.length;
		while(_g1 < _g) {
			var i = _g1++;
			str += "+" + this.attachments[i].get_label();
		}
		return str;
	}
	,updateAgainst: function(ref) {
		this.qty += ref.qty;
	}
	,spliceAgainst: function(ref) {
		this.qty -= ref.qty;
		return this.qty;
	}
	,get_uid: function() {
		return this.item.get_uid() + (this.attachments != null ? this.getAttachmentsId() : "");
	}
	,get_label: function() {
		return this.item.get_label() + (this.attachments != null ? this.getAttachmentsLabels() : "");
	}
	,__class__: troshx_sos_core_ItemQty
};
var troshx_sos_core_MeleeSpecial = function() {
	this.custom = null;
	this.spatulateTip = 0;
	this.shock = 0;
	this.multiHit_Y = 0;
	this.multiHit = 0;
	this.draw = 0;
	this.crushing = 0;
	this.chain = 0;
	this.bleed = 0;
	this.APThrust = 0;
	this.APSwing = 0;
};
troshx_sos_core_MeleeSpecial.__name__ = true;
troshx_sos_core_MeleeSpecial.getLabelsOfFlags = function(instance,flags) {
	if(flags == null) {
		flags = 0;
	}
	var arr = [];
	if(flags != 0) {
		if((flags & 1) != 0) {
			arr.push("Brace");
		}
		if((flags & 2) != 0) {
			arr.push("Calvary Sword");
		}
		if((flags & 4) != 0) {
			arr.push("Companion Weapon");
		}
		if((flags & 8) != 0) {
			arr.push("Couched Charge");
		}
		if((flags & 16) != 0) {
			arr.push("Fluid Thrusts");
		}
		if((flags & 32) != 0) {
			arr.push("Forward Swept");
		}
		if((flags & 64) != 0) {
			arr.push("Freakishly Large");
		}
		if((flags & 128) != 0) {
			arr.push("Hand Off");
		}
		if((flags & 256) != 0) {
			arr.push("Heavy Weapon");
		}
		if((flags & 512) != 0) {
			arr.push("Hook");
		}
		if((flags & 1024) != 0) {
			arr.push("Light Blade");
		}
		if((flags & 2048) != 0) {
			arr.push("Parrying Teeth");
		}
		if((flags & 4096) != 0) {
			arr.push("Swinging Slot");
		}
		if((flags & 8192) != 0) {
			arr.push("Thin Blade");
		}
		if((flags & 16384) != 0) {
			arr.push("Thrusting Slot");
		}
		if((flags & 32768) != 0) {
			arr.push("Tight Grip");
		}
		if((flags & 65536) != 0) {
			arr.push("Weapon Attachment");
		}
	}
	if(instance != null) {
		if(instance.APSwing != 0) {
			arr.push("AP Swing" + " " + instance.APSwing);
		}
		if(instance.APThrust != 0) {
			arr.push("AP Thrust" + " " + instance.APThrust);
		}
		if(instance.bleed != 0) {
			arr.push("Bleed" + " " + instance.bleed);
		}
		if(instance.chain != 0) {
			arr.push("Chain" + " " + instance.chain);
		}
		if(instance.crushing != 0) {
			arr.push("Crushing" + " " + instance.crushing);
		}
		if(instance.draw != 0) {
			arr.push("Draw" + " " + instance.draw);
		}
		if(instance.multiHit != 0) {
			arr.push("Multi Hit" + " " + instance.multiHit);
		}
		if(instance.shock != 0) {
			arr.push("Shock" + " " + instance.shock);
		}
		if(instance.spatulateTip != 0) {
			arr.push("Spatulate Tip" + " " + instance.spatulateTip);
		}
	}
	return arr;
};
troshx_sos_core_MeleeSpecial.getFlagVarLabels = function() {
	var arr = [];
	arr.push("Brace");
	arr.push("Calvary Sword");
	arr.push("Companion Weapon");
	arr.push("Couched Charge");
	arr.push("Fluid Thrusts");
	arr.push("Forward Swept");
	arr.push("Freakishly Large");
	arr.push("Hand Off");
	arr.push("Heavy Weapon");
	arr.push("Hook");
	arr.push("Light Blade");
	arr.push("Parrying Teeth");
	arr.push("Swinging Slot");
	arr.push("Thin Blade");
	arr.push("Thrusting Slot");
	arr.push("Tight Grip");
	arr.push("Weapon Attachment");
	return arr;
};
troshx_sos_core_MeleeSpecial.getIntVarNames = function() {
	var arr = [];
	arr.push("APSwing");
	arr.push("APThrust");
	arr.push("bleed");
	arr.push("chain");
	arr.push("crushing");
	arr.push("draw");
	arr.push("multiHit");
	arr.push("shock");
	arr.push("spatulateTip");
	return arr;
};
troshx_sos_core_MeleeSpecial.prototype = {
	__class__: troshx_sos_core_MeleeSpecial
};
var troshx_sos_core_MissileSpecial = function() {
	this.custom = null;
	this.winged = 0;
	this.shock = 0;
	this.scatter_y = 1;
	this.scatter = 0;
	this.flaming = 0;
	this.calvaryBow = 0;
	this.bleed = 0;
	this.AP = 0;
};
troshx_sos_core_MissileSpecial.__name__ = true;
troshx_sos_core_MissileSpecial.getLabelsOfFlags = function(instance,flags) {
	if(flags == null) {
		flags = 0;
	}
	var arr = [];
	if(flags != 0) {
		if((flags & 1) != 0) {
			arr.push("Bludgeon");
		}
		if((flags & 2) != 0) {
			arr.push("Narrow");
		}
		if((flags & 4) != 0) {
			arr.push("Shield Stick");
		}
		if((flags & 8) != 0) {
			arr.push("Ap First Hit Only");
		}
		if((flags & 16) != 0) {
			arr.push("Cheat Attachment");
		}
	}
	if(instance != null) {
		if(instance.AP != 0) {
			arr.push("AP" + " " + instance.AP);
		}
		if(instance.bleed != 0) {
			arr.push("Bleed" + " " + instance.bleed);
		}
		if(instance.calvaryBow != 0) {
			arr.push("Calvary Bow" + " " + instance.calvaryBow);
		}
		if(instance.flaming != 0) {
			arr.push("Flaming" + " " + instance.flaming);
		}
		if(instance.scatter != 0) {
			arr.push("Scatter" + " " + instance.scatter);
		}
		if(instance.shock != 0) {
			arr.push("Shock" + " " + instance.shock);
		}
		if(instance.winged != 0) {
			arr.push("Winged" + " " + instance.winged);
		}
	}
	return arr;
};
troshx_sos_core_MissileSpecial.getFlagVarNames = function() {
	var arr = [];
	arr.push("BLUDGEON");
	arr.push("NARROW");
	arr.push("SHIELD_STICK");
	arr.push("AP_FIRST_HIT_ONLY");
	arr.push("CHEAT_ATTACHMENT");
	return arr;
};
troshx_sos_core_MissileSpecial.getFlagVarLabels = function() {
	var arr = [];
	arr.push("Bludgeon");
	arr.push("Narrow");
	arr.push("Shield Stick");
	arr.push("Ap First Hit Only");
	arr.push("Cheat Attachment");
	return arr;
};
troshx_sos_core_MissileSpecial.getIntVarNames = function() {
	var arr = [];
	arr.push("AP");
	arr.push("bleed");
	arr.push("calvaryBow");
	arr.push("flaming");
	arr.push("scatter");
	arr.push("shock");
	arr.push("winged");
	return arr;
};
troshx_sos_core_MissileSpecial.prototype = {
	__class__: troshx_sos_core_MissileSpecial
};
var troshx_sos_core_Modifier = function() {
};
troshx_sos_core_Modifier.__name__ = true;
troshx_sos_core_Modifier.prototype = {
	__class__: troshx_sos_core_Modifier
};
var troshx_sos_core_StaticModifier = function() {
};
troshx_sos_core_StaticModifier.__name__ = true;
troshx_sos_core_StaticModifier.create = function(index,add,multiply) {
	if(multiply == null) {
		multiply = 1;
	}
	var me = new troshx_sos_core_StaticModifier();
	me.index = index;
	me.multiply = multiply;
	me.add = add;
	return me;
};
troshx_sos_core_StaticModifier.prototype = {
	getModifiedValue: function(value) {
		return value * this.multiply + this.add;
	}
	,__class__: troshx_sos_core_StaticModifier
};
var troshx_sos_core_EventModifierBinding = function() {
};
troshx_sos_core_EventModifierBinding.__name__ = true;
troshx_sos_core_EventModifierBinding.create = function(types,handler) {
	var me = new troshx_sos_core_EventModifierBinding();
	me.types = types;
	me.handler = handler;
	return me;
};
troshx_sos_core_EventModifierBinding.prototype = {
	__class__: troshx_sos_core_EventModifierBinding
};
var troshx_sos_core_Money = function() {
	this.cp = 0;
	this.sp = 0;
	this.gp = 0;
};
troshx_sos_core_Money.__name__ = true;
troshx_sos_core_Money.prototype = {
	__class__: troshx_sos_core_Money
};
var troshx_sos_core_Profeciency = function(name,type) {
	if(type == null) {
		type = 0;
	}
	if(name == null) {
		name = "";
	}
	this.type = type;
	this.name = name;
};
troshx_sos_core_Profeciency.__name__ = true;
troshx_sos_core_Profeciency.__interfaces__ = [troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_Profeciency.getCoreMelee = function() {
	if(troshx_sos_core_Profeciency.CORE_MELEE != null) {
		return troshx_sos_core_Profeciency.CORE_MELEE;
	} else {
		return troshx_sos_core_Profeciency.CORE_MELEE = troshx_sos_core_Profeciency.getNewCoreMelee();
	}
};
troshx_sos_core_Profeciency.getNewCoreMelee = function() {
	var a = [];
	a[7] = new troshx_sos_core_Profeciency("Wrestling",0);
	a[8] = new troshx_sos_core_Profeciency("Pugilism",0);
	a[6] = new troshx_sos_core_Profeciency("Dagger",0);
	a[0] = new troshx_sos_core_Profeciency("1H Sword",0);
	a[1] = new troshx_sos_core_Profeciency("1H Blunt",0);
	a[2] = new troshx_sos_core_Profeciency("2H Blunt",0);
	a[3] = new troshx_sos_core_Profeciency("2H Sword",0);
	a[4] = new troshx_sos_core_Profeciency("Spear",0);
	a[5] = new troshx_sos_core_Profeciency("Polearm",0);
	return a;
};
troshx_sos_core_Profeciency.getCoreRanged = function() {
	if(troshx_sos_core_Profeciency.CORE_RANGED != null) {
		return troshx_sos_core_Profeciency.CORE_RANGED;
	} else {
		return troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged();
	}
};
troshx_sos_core_Profeciency.getNewCoreRanged = function() {
	var a = [];
	a[0] = new troshx_sos_core_Profeciency("Bow",1);
	a[1] = new troshx_sos_core_Profeciency("Sling",1);
	a[2] = new troshx_sos_core_Profeciency("Crossbow",1);
	a[3] = new troshx_sos_core_Profeciency("Firearm",1);
	a[4] = new troshx_sos_core_Profeciency("Throwing",1);
	return a;
};
troshx_sos_core_Profeciency.getProfsLabelsMelee = function(mask) {
	return troshx_sos_core_Profeciency.getLabelsOfArrayProfs(troshx_sos_core_Profeciency.getCoreMelee(),mask);
};
troshx_sos_core_Profeciency.getProfsLabelsRanged = function(mask) {
	return troshx_sos_core_Profeciency.getLabelsOfArrayProfs(troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged(),mask);
};
troshx_sos_core_Profeciency.getProfsCountMelee = function(mask) {
	return troshx_sos_core_Profeciency.getCountOfArrayProfs(troshx_sos_core_Profeciency.getCoreMelee(),mask);
};
troshx_sos_core_Profeciency.getProfsCountRanged = function(mask) {
	return troshx_sos_core_Profeciency.getCountOfArrayProfs(troshx_sos_core_Profeciency.CORE_RANGED != null ? troshx_sos_core_Profeciency.CORE_RANGED : troshx_sos_core_Profeciency.CORE_RANGED = troshx_sos_core_Profeciency.getNewCoreRanged(),mask);
};
troshx_sos_core_Profeciency.getCountOfArrayProfs = function(a,mask) {
	var count = 0;
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		count += (mask & 1 << i) != 0 ? 1 : 0;
	}
	return count;
};
troshx_sos_core_Profeciency.getLabelsOfArrayProfs = function(a,mask) {
	var arr = [];
	var _g1 = 0;
	var _g = a.length;
	while(_g1 < _g) {
		var i = _g1++;
		if((mask & 1 << i) != 0) {
			arr.push(a[i].name);
		}
	}
	return arr;
};
troshx_sos_core_Profeciency.prototype = {
	updateAgainst: function(ref) {
	}
	,spliceAgainst: function(ref) {
		return 0;
	}
	,get_uid: function() {
		return this.name + troshx_sos_core_Profeciency.SEPERATOR + this.type;
	}
	,__class__: troshx_sos_core_Profeciency
};
var troshx_sos_core_School = function() {
	this.profLimit = 0;
	this.name = "";
};
troshx_sos_core_School.__name__ = true;
troshx_sos_core_School.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_School
};
var troshx_sos_core_Shield = function() {
	this.strapType = 0;
	this.durability = 6;
	this.bashTN = 0;
	this.blockTN = 7;
	this.size = 0;
	this.AV = 1;
	troshx_sos_core_Item.call(this);
};
troshx_sos_core_Shield.__name__ = true;
troshx_sos_core_Shield.__super__ = troshx_sos_core_Item;
troshx_sos_core_Shield.prototype = $extend(troshx_sos_core_Item.prototype,{
	addTagsToStrArr: function(arr) {
		troshx_sos_core_Item.prototype.addTagsToStrArr.call(this,arr);
		if((this.flags & 2) != 0) {
			arr.push(this.strapType == 0 ? "Arm-strap" : "Shoulder-strap");
		}
	}
	,getTypeLabel: function() {
		return "Shield";
	}
	,__class__: troshx_sos_core_Shield
});
var troshx_sos_core_Skill = function(name,coreAttribute,attributeMask) {
	if(attributeMask == null) {
		attributeMask = 0;
	}
	this.attributeMask = 0;
	this.coreAttribute = 0;
	this.name = "";
	this.name = name;
	this.coreAttribute = coreAttribute;
	this.attributeMask = attributeMask;
};
troshx_sos_core_Skill.__name__ = true;
troshx_sos_core_Skill.prototype = {
	get_uid: function() {
		return this.name;
	}
	,__class__: troshx_sos_core_Skill
};
var troshx_sos_core_Talent = function() {
	this.level = 0;
	this.name = "";
};
troshx_sos_core_Talent.__name__ = true;
troshx_sos_core_Talent.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_Talent.prototype = {
	get_uid: function() {
		return this.name + "_" + this.level;
	}
	,get_label: function() {
		return this.name + (this.level >= 1 ? "(" + this.level + ")" : "");
	}
	,__class__: troshx_sos_core_Talent
};
var troshx_sos_core_TargetZone = function() {
	this.description = "";
	this.weightsTotal = 0;
};
troshx_sos_core_TargetZone.__name__ = true;
troshx_sos_core_TargetZone.create = function(name,partWeights,parts,weightsTotal,description) {
	if(description == null) {
		description = "";
	}
	if(weightsTotal == null) {
		weightsTotal = 0;
	}
	var zb = new troshx_sos_core_TargetZone();
	zb.name = name;
	zb.parts = parts;
	zb.partWeights = partWeights;
	zb.description = description;
	zb.weightsTotal = weightsTotal;
	if(weightsTotal == 0) {
		zb.recalcWeightsTotal();
	}
	return zb;
};
troshx_sos_core_TargetZone.prototype = {
	recalcWeightsTotal: function() {
		var accum = 0;
		var i = this.partWeights.length;
		while(--i > -1) accum += this.partWeights[i];
		this.weightsTotal = accum;
	}
	,getBodyPart: function(floatRatio) {
		floatRatio *= this.weightsTotal;
		var accum = 0;
		var result = 0;
		var _g1 = 0;
		var _g = this.partWeights.length;
		while(_g1 < _g) {
			var i = _g1++;
			if(floatRatio < accum) {
				break;
			}
			accum += this.partWeights[i];
			result = i;
		}
		return this.parts[result];
	}
	,__class__: troshx_sos_core_TargetZone
};
var troshx_sos_core_WeaponCustomise = function() {
	this.original = null;
	this.name = "";
	this.melee = null;
	this.meleeFlags = 0;
};
troshx_sos_core_WeaponCustomise.__name__ = true;
troshx_sos_core_WeaponCustomise.__interfaces__ = [troshx_core_IUid];
troshx_sos_core_WeaponCustomise.prototype = {
	addMeleeTagsToStrArr: function(arr) {
		var flags = this.meleeFlags;
		if((flags & 1) != 0) {
			arr.push("*Custom Hilt");
		}
		if((flags & 2) != 0) {
			arr.push("*Ridiculously Sharp");
		}
		if((flags & 4) != 0) {
			arr.push("*Exquisite Decoration");
		}
		if((flags & 8) != 0) {
			arr.push("*Bizarre Gimmick");
		}
		if(this.melee != null) {
			var instance = this.melee;
			if(instance.customGrip != 0) {
				arr.push("*Custom Grip" + " " + instance.customGrip);
			}
			if(instance.fineForging != 0) {
				arr.push("*Fine Forging" + " " + instance.fineForging);
			}
			if(instance.integratedPistol != 0) {
				arr.push("*Integrated Pistol" + " " + instance.integratedPistol);
			}
		}
	}
	,hasBizarreGimmick: function() {
		return (this.meleeFlags & 8) != 0;
	}
	,hasExquisiteDecoration: function() {
		return (this.meleeFlags & 4) != 0;
	}
	,isRidiculouslySharp: function() {
		return (this.meleeFlags & 2) != 0;
	}
	,get_uid: function() {
		return "_" + this.name + "_" + this.meleeFlags + (this.melee != null ? this.melee.getUID(this.meleeFlags) : "");
	}
	,__class__: troshx_sos_core_WeaponCustomise
};
var troshx_sos_core_CustomMelee = function() {
	this.exquisiteDecorDesc = "";
	this.bizarreGimmickDesc = "";
	this.sharpened = true;
	this.integratedPistol = 0;
	this.fineForging = 0;
	this.customGrip = 0;
};
troshx_sos_core_CustomMelee.__name__ = true;
troshx_sos_core_CustomMelee.prototype = {
	getUID: function(flags) {
		return "_" + this.customGrip + "_" + this.fineForging + "_" + this.integratedPistol;
	}
	,__class__: troshx_sos_core_CustomMelee
};
var troshx_sos_core_Wound = function(locationId,level,damageType) {
	this.treated = false;
	this.BL = 0;
	this.pain = 0;
	this.stun = 0;
	this.damageType = 0;
	this.level = 0;
	this.locationId = locationId;
	this.level = level;
	this.damageType = damageType;
};
troshx_sos_core_Wound.__name__ = true;
troshx_sos_core_Wound.__interfaces__ = [troshx_ds_IUpdateWith,troshx_core_IUid];
troshx_sos_core_Wound.prototype = {
	isNullified: function() {
		if(this.stun == 0 && this.pain == 0) {
			return this.BL == 0;
		} else {
			return false;
		}
	}
	,updateAgainst: function(ref) {
		if(ref.stun > this.stun) {
			this.stun = ref.stun;
		}
		if(ref.pain > this.pain) {
			this.pain = ref.pain;
		}
		if(ref.BL > this.BL) {
			this.BL = ref.BL;
		}
		ref.treated = false;
	}
	,spliceAgainst: function(ref) {
		if(ref.stun < this.stun) {
			this.stun = ref.stun;
		}
		if(ref.pain < this.pain) {
			this.pain = ref.pain;
		}
		if(ref.BL < this.BL) {
			this.BL = ref.BL;
		}
		ref.treated = true;
		return -1;
	}
	,get_uid: function() {
		return this.locationId + "_" + this.level + "_" + (this.damageType >= 0 ? this.damageType : troshx_sos_core_Wound.UNIQUE_COUNT++);
	}
	,__class__: troshx_sos_core_Wound
};
var troshx_sos_events_Challenge = function() {
	this.totalSuccesses = null;
	this.rolls = null;
};
troshx_sos_events_Challenge.__name__ = true;
troshx_sos_events_Challenge.prototype = {
	isResolved: function() {
		return this.totalSuccesses != null;
	}
	,__class__: troshx_sos_events_Challenge
};
var troshx_sos_events_SOSEvent = { __ename__ : true, __constructs__ : ["FATIQUE_GAIN","MELEE_INITIATIVE_TEST","MISS_TARGET","HIT_TARGET","HIT_TARGET_ARMOR","DAMAGE_TARGET_RESOLVE","WOUND_INFLICT","MELEE_EXCHANGE_RESOLVE","MELEE_BOUT_RESOLVE","CHALLENGE_INIT","CHALLENGE_EXECUTE"] };
troshx_sos_events_SOSEvent.FATIQUE_GAIN = function($char,fatique) { var $x = ["FATIQUE_GAIN",0,$char,fatique]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.MELEE_INITIATIVE_TEST = function(from,target) { var $x = ["MELEE_INITIATIVE_TEST",1,from,target]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.MISS_TARGET = function(from,target,ammo) { var $x = ["MISS_TARGET",2,from,target,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.HIT_TARGET = function(from,target,ammo) { var $x = ["HIT_TARGET",3,from,target,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.HIT_TARGET_ARMOR = function(from,target,armor,ammo) { var $x = ["HIT_TARGET_ARMOR",4,from,target,armor,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.DAMAGE_TARGET_RESOLVE = function(from,target,armor,ammo) { var $x = ["DAMAGE_TARGET_RESOLVE",5,from,target,armor,ammo]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.WOUND_INFLICT = function($char,w) { var $x = ["WOUND_INFLICT",6,$char,w]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.MELEE_EXCHANGE_RESOLVE = ["MELEE_EXCHANGE_RESOLVE",7];
troshx_sos_events_SOSEvent.MELEE_EXCHANGE_RESOLVE.toString = $estr;
troshx_sos_events_SOSEvent.MELEE_EXCHANGE_RESOLVE.__enum__ = troshx_sos_events_SOSEvent;
troshx_sos_events_SOSEvent.MELEE_BOUT_RESOLVE = ["MELEE_BOUT_RESOLVE",8];
troshx_sos_events_SOSEvent.MELEE_BOUT_RESOLVE.toString = $estr;
troshx_sos_events_SOSEvent.MELEE_BOUT_RESOLVE.__enum__ = troshx_sos_events_SOSEvent;
troshx_sos_events_SOSEvent.CHALLENGE_INIT = function(attributes,skills,challenge) { var $x = ["CHALLENGE_INIT",9,attributes,skills,challenge]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
troshx_sos_events_SOSEvent.CHALLENGE_EXECUTE = function($char,attributes,skills,challenge) { var $x = ["CHALLENGE_EXECUTE",10,$char,attributes,skills,challenge]; $x.__enum__ = troshx_sos_events_SOSEvent; $x.toString = $estr; return $x; };
var troshx_sos_events_SOSNotification = { __ename__ : true, __constructs__ : ["BOON_TRIGGERED","BANE_TRIGGERED","BANE_REMOVED","BANE_ADDED","BOON_REMOVED","BOON_ADDED","HIT_TARGET_RESOLVED","MELEE_EXCHANGE_RESOLVED","MELEE_ROUND_RESOLVED","CHALLENGE_RESOLVED","SKIRMISH_PHASE_RESOLVED","SKIRMISH_ROUND_RESOLVED"] };
troshx_sos_events_SOSNotification.BOON_TRIGGERED = function(boon) { var $x = ["BOON_TRIGGERED",0,boon]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.BANE_TRIGGERED = function(bane) { var $x = ["BANE_TRIGGERED",1,bane]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.BANE_REMOVED = function(bane) { var $x = ["BANE_REMOVED",2,bane]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.BANE_ADDED = function(bane) { var $x = ["BANE_ADDED",3,bane]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.BOON_REMOVED = function(boon) { var $x = ["BOON_REMOVED",4,boon]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.BOON_ADDED = function(boon) { var $x = ["BOON_ADDED",5,boon]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.HIT_TARGET_RESOLVED = function(from,target) { var $x = ["HIT_TARGET_RESOLVED",6,from,target]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.MELEE_EXCHANGE_RESOLVED = ["MELEE_EXCHANGE_RESOLVED",7];
troshx_sos_events_SOSNotification.MELEE_EXCHANGE_RESOLVED.toString = $estr;
troshx_sos_events_SOSNotification.MELEE_EXCHANGE_RESOLVED.__enum__ = troshx_sos_events_SOSNotification;
troshx_sos_events_SOSNotification.MELEE_ROUND_RESOLVED = ["MELEE_ROUND_RESOLVED",8];
troshx_sos_events_SOSNotification.MELEE_ROUND_RESOLVED.toString = $estr;
troshx_sos_events_SOSNotification.MELEE_ROUND_RESOLVED.__enum__ = troshx_sos_events_SOSNotification;
troshx_sos_events_SOSNotification.CHALLENGE_RESOLVED = function(attributes,skills,challenge) { var $x = ["CHALLENGE_RESOLVED",9,attributes,skills,challenge]; $x.__enum__ = troshx_sos_events_SOSNotification; $x.toString = $estr; return $x; };
troshx_sos_events_SOSNotification.SKIRMISH_PHASE_RESOLVED = ["SKIRMISH_PHASE_RESOLVED",10];
troshx_sos_events_SOSNotification.SKIRMISH_PHASE_RESOLVED.toString = $estr;
troshx_sos_events_SOSNotification.SKIRMISH_PHASE_RESOLVED.__enum__ = troshx_sos_events_SOSNotification;
troshx_sos_events_SOSNotification.SKIRMISH_ROUND_RESOLVED = ["SKIRMISH_ROUND_RESOLVED",11];
troshx_sos_events_SOSNotification.SKIRMISH_ROUND_RESOLVED.toString = $estr;
troshx_sos_events_SOSNotification.SKIRMISH_ROUND_RESOLVED.__enum__ = troshx_sos_events_SOSNotification;
var troshx_sos_macro_MacroUtil = function() { };
troshx_sos_macro_MacroUtil.__name__ = true;
var troshx_sos_sheets_CharSheet = function() {
	this.woundHash = { };
	this.wounds = [];
	this.body = troshx_sos_core_BodyChar.getInstance();
	this.inventory = new troshx_sos_core_Inventory();
	this.arcFlaw = "";
	this.arcGlory = "";
	this.arcBelief = "";
	this.arcEpic = "";
	this.arcSaga = "";
	this.arcSpent = 0;
	this.arcPointsAccum = 0;
	this.banes = new troshx_ds_HashedArray();
	this.boons = new troshx_ds_HashedArray();
	this.talents = [];
	this.skills = [];
	this.socialClass = "";
	this.wealthAssets = [];
	this.money = new troshx_sos_core_Money();
	this.miscCPBonus = 0;
	this.fatique = 0;
	this.profsCustom = null;
	this.profs = 0;
	this.schoolLevel = 0;
	this.school = null;
	this.gritAccum = 0;
	this.perception = 0;
	this.intelligence = 0;
	this.wit = 0;
	this.willpower = 0;
	this.health = 0;
	this.endurance = 0;
	this.agility = 0;
	this.strength = 0;
	this.age = -1;
	this.leftHanded = false;
	this.gender = 0;
	this.race = "";
	this.name = "";
};
troshx_sos_sheets_CharSheet.__name__ = true;
troshx_sos_sheets_CharSheet.prototype = {
	get_labelGender: function() {
		if(this.gender == 0) {
			return "Male";
		} else {
			return "Female";
		}
	}
	,get_STR: function() {
		return this.strength;
	}
	,get_AGI: function() {
		return this.agility;
	}
	,get_END: function() {
		return this.endurance;
	}
	,get_HLT: function() {
		return this.health;
	}
	,get_WIL: function() {
		return this.willpower;
	}
	,get_WIT: function() {
		return this.wit;
	}
	,get_INT: function() {
		return this.intelligence;
	}
	,get_PER: function() {
		return this.perception;
	}
	,get_boonsArray: function() {
		return this.boons.list;
	}
	,addBoon: function(assign) {
		this.boons.add(assign);
	}
	,removeBoon: function(assign) {
		this.boons["delete"](assign);
	}
	,get_banesArray: function() {
		return this.banes.list;
	}
	,addBane: function(assign) {
		this.banes.add(assign);
	}
	,removeBane: function(assign) {
		this.banes["delete"](assign);
	}
	,applyWound: function(w) {
		var uid = w.locationId + "_" + w.level + "_" + (w.damageType >= 0 ? w.damageType : troshx_sos_core_Wound.UNIQUE_COUNT++);
		if(!Object.prototype.hasOwnProperty.call(this.woundHash,uid)) {
			this.woundHash[uid] = w;
			this.wounds.push(w);
		} else {
			var fw = Reflect.field(this.woundHash,uid);
			fw.updateAgainst(w);
		}
	}
	,removeWound: function(w) {
		var uid = w.locationId + "_" + w.level + "_" + (w.damageType >= 0 ? w.damageType : troshx_sos_core_Wound.UNIQUE_COUNT++);
		if(Object.prototype.hasOwnProperty.call(this.woundHash,uid)) {
			Reflect.deleteField(this.woundHash,uid);
		} else {
			console.log("Warning: No wound found to be removed for uid:" + (w.locationId + "_" + w.level + "_" + (w.damageType >= 0 ? w.damageType : troshx_sos_core_Wound.UNIQUE_COUNT++)));
		}
		var index = this.wounds.indexOf(w);
		if(index >= 0) {
			this.wounds.splice(index,1);
		} else {
			console.log("Warning: No wound found to be removed for array index:" + index);
		}
	}
	,get_totalPain: function() {
		var c = 0;
		var _g1 = 0;
		var _g = this.wounds.length;
		while(_g1 < _g) {
			var i = _g1++;
			c += this.wounds[i].pain;
		}
		return c;
	}
	,get_totalBloodLost: function() {
		var c = 0;
		var _g1 = 0;
		var _g = this.wounds.length;
		while(_g1 < _g) {
			var i = _g1++;
			c += this.wounds[i].BL;
		}
		return c;
	}
	,get_ADR: function() {
		return (this.agility + this.wit) / 2 | 0;
	}
	,get_MOB: function() {
		return (this.strength + this.agility + this.endurance) / 2 | 0;
	}
	,get_CAR: function() {
		return this.strength + this.endurance;
	}
	,get_CHA: function() {
		return (this.willpower + this.wit + this.perception) / 2 | 0;
	}
	,get_GRIT: function() {
		return (this.willpower / 2 | 0) + this.gritAccum;
	}
	,get_baseGrit: function() {
		return this.willpower / 2 | 0;
	}
	,get_TOU: function() {
		return 4;
	}
	,get_SDB: function() {
		return this.strength / 2 | 0;
	}
	,get_labelRace: function() {
		return this.race;
	}
	,get_labelSchool: function() {
		if(this.school != null) {
			return this.school.name;
		} else {
			return "";
		}
	}
	,get_meleeCP: function() {
		return (this.schoolLevel >= 1 ? this.schoolLevel + 4 : 0) + ((this.agility + this.wit) / 2 | 0) + this.miscCPBonus - this.get_totalPain();
	}
	,get_schoolCP: function() {
		if(this.schoolLevel >= 1) {
			return this.schoolLevel + 4;
		} else {
			return 0;
		}
	}
	,get_skillPenalty: function() {
		return 0;
	}
	,get_recoveryRate: function() {
		return 0;
	}
	,get_encumbranceLvl: function() {
		return 0;
	}
	,get_exhaustionRate: function() {
		return 0;
	}
	,get_mobWithMods: function() {
		return (this.strength + this.agility + this.endurance) / 2 | 0;
	}
	,get_arcPointsAvailable: function() {
		return this.arcPointsAccum - this.arcSpent;
	}
	,__class__: troshx_sos_sheets_CharSheet
};
var troshx_sos_vue_CharGen = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_CharGen.__name__ = true;
troshx_sos_vue_CharGen.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_CharGen.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Data: function() {
		return new troshx_sos_chargen_CharGenData();
	}
	,watch_maxBoonsSpendableLeft: function(newValue) {
		var arr = this.boonsArray;
		var i = arr.length;
		while(--i > -1) {
			var v = arr[i];
			v._remainingCached = newValue;
		}
	}
	,getBnBSlug: function(name) {
		return "bb-detail-" + name.split(" ").join("-").toLowerCase();
	}
	,resetBB: function(bba,isBane) {
		if(isBane) {
			var bane = bba.getBoonOrBane();
			var ba;
			var i = this.baneAssignList.indexOf(bba);
			ba = bane.getAssign(0,this["char"]);
			ba._costCached = bane.costs[0];
			Vue.set(this.baneAssignList,i,ba);
		} else {
			var boon = bba.getBoonOrBane();
			var ba1;
			var i1 = this.boonAssignList.indexOf(bba);
			ba1 = boon.getAssign(0,this["char"]);
			ba1._costCached = boon.costs[0];
			ba1._remainingCached = this.maxBoonsSpendableLeft;
			Vue.set(this.boonAssignList,i1,ba1);
		}
	}
	,Components: function() {
		var _m_ = { };
		_m_["CategoryPCPInput"] = new troshx_sos_vue_inputs_impl_CategoryPCPInput();
		_m_["AttributeInput"] = new troshx_sos_vue_inputs_impl_AttributeInput();
		_m_["BoonBaneInput"] = new troshx_sos_vue_inputs_impl_BoonBaneInput();
		_m_["bb-apply"] = new troshx_sos_vue_widgets_BoonBaneApplyDetails();
		return _m_;
	}
	,Template: function() {
		return "<div class=\"chargen\">\r\n\t<h1>Song of Swords: Character Creation</h1>\r\n\t<div class=\"chargen__body\">\r\n\t\t\r\n\t\t<section class=\"gen-campaign-type\">\r\n\t\t\t<h2>Campaign Type:</h2>\r\n\t\t\t<div v-for=\"(li, i) in campaignPowerLevels\">\r\n\t\t\t\t<label><input type=\"radio\" :checked=\"campaignPowLevelIndex == i\">{{li.name}} (<span class=\"num\">{{li.pcp}}</span> PCP Total) (Max <span class=\"num\">{{li.maxCategoryPCP}}</span> PCP per category) </input></label>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t<section class=\"gen-categories\">\r\n\t\t\t<h2>Categories <span class=\"valuer\">({{ categoriesRemainingAssignable }} remaining PCP)</span></h2>\r\n\r\n\t\t\t<div v-for=\"(li, i) in categories\"><label>{{li.name}}: </label><CategoryPCPInput :obj=\"li\" prop=\"pcp\" :magic=\"li.magic\" :remainingAssignable=\"categoriesRemainingAssignable\" :maxPCPPerCategory=\"campaignPowLevel.maxCategoryPCP\" />PCP</div>\r\n\t\t</section>\r\n\t\t\t\r\n\t\t\t\r\n\t\t<hr/>\r\n\t\t\t\r\n\t\t\t\r\n\t\t<!-- for each category -->\r\n\t\t<section class=\"gen-race\" id=\"gen-race\">\r\n\t\t\t<h2>Race <span class=\"valuer\">(Tier {{raceTier}}) </span></h2>\r\n\t\t\t<div>\r\n\t\t\t\t<label><input type=\"radio\">Human</input></label>\t\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t\t\r\n\t\t\r\n\t\t\t\r\n\t\t\t\r\n\t\t<section class=\"gen-attributes\" id=\"gen-attributes\">\r\n\t\t\t<h2>Attributes <span class=\"valuer\">({{remainingAttributePoints}}  Attribute Points remaining. (Available: {{availableAttributePoints}}) ) </span></h2>\r\n\t\t\t<div class=\"gen-col\">\r\n\t\t\t\t<div><label>Strength:</label><AttributeInput :obj=\"char\" prop=\"strength\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Agility:</label><AttributeInput :obj=\"char\" prop=\"agility\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Endurance:</label><AttributeInput :obj=\"char\" prop=\"endurance\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Health:</label><AttributeInput :obj=\"char\" prop=\"health\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Willpower:</label><AttributeInput :obj=\"char\" prop=\"willpower\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Wit:</label><AttributeInput :obj=\"char\" prop=\"wit\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Intelligence:</label><AttributeInput :obj=\"char\" prop=\"intelligence\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t\t<div><label>Perception:</label><AttributeInput :obj=\"char\" prop=\"perception\" :remainingAttributePoints=\"remainingAttributePoints\" /></div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\r\n\t\t\t\r\n\t\t<section class=\"gen-bnb\"  id=\"gen-bnb\">\r\n\t\t\t<h2>Boons &amp; Banes <span class=\"valuer\">(<span class=\"num\">{{totalBnBScore }}</span> B&amp;B Points currently. (Pool: {{BnBpoints}} Points) ) </span>\r\n\t\t\t\r\n\t\t\t<span v-show=\"totalBnBScore<0\" class=\"invalid\"><span style=\"color:red\">invalid!</span><i style=\"font-size:13px\">(Need &gt;=0 B&amp;B points!<br/>Assign more PCP to 'Boons &amp; Banes' or buy more Banes to pay off debt!)</i></span>\r\n\t\t\t<span v-show=\"totalBnBScore>=0\" class=\"valid\">\r\n\t\t\t\t<span style=\"color:green\">Ok!</span><br/><span v-show=\"totalBnBScore>0\" style=\"color:orange;font-size:13px\">(but you have additional {{ totalBnBScore }} B&amp;B Points!)</span>\r\n\t\t\t\t<div class=\"opencloselink\"><a href=\"#\" v-show=\"showBnBs\" v-on:click.prevent=\"showBnBs=false\">^ Hide</a><a href=\"#\" v-show=\"!showBnBs\" v-on:click.prevent=\"showBnBs=true\">Open &gt;</a> &nbsp;&nbsp;<a style=\"font-size:12px;float:right\" href=\"#gen-skills\" class=\"jumplink\">Skip to Skills{{ totalBnBScore > 0 ? \" first...\" : \"\" }}</a></div>\r\n\t\t\t</span>\r\n\t\t\t\r\n\t\t\t</h2>\r\n\t\t\t<div v-show=\"shouldShowBnBs\">\r\n\t\t\t\t<h3>Choose Boons: -{{ totalBoonExpenditure }}   <span v-show=\"true\" style=\"color:#aaaaaa\">&nbsp;&nbsp;({{maxBoonsSpendableLeft }})</span></h3>\r\n\t\t\t\t<div class=\"boon-tags\">\r\n\t\t\t\t\t<BoonBaneInput v-for=\"(li, i) in boonAssignList\" :key=\"i\" :obj=\"li\" prop=\"rank\" v-on:resetBB=\"resetBB\" v-on:addBB=\"addBB\" v-on:removeBB=\"removeBB\"  :remaining=\"maxBoonsSpendableLeft\" />\r\n\t\t\t\t</div>\t\r\n\t\t\t\t<h3>Choose Banes: +{{ totalBanePointsEarned }}, ~{{ totalBanePointsSpent }}</h3>\r\n\t\t\t\t<div class=\"bane-tags\">\r\n\t\t\t\t\t<BoonBaneInput v-for=\"(li, i) in baneAssignList\" :key=\"i\" :obj=\"li\" prop=\"rank\" v-on:resetBB=\"resetBB\" v-on:addBB=\"addBB\" v-on:removeBB=\"removeBB\"  />\t\r\n\t\t\t\t</div>\r\n\t\t\t\t\r\n\t\t\t\t<hr/>\r\n\t\t\t\t<div class=\"bb-details\">\r\n\t\t\t\t<h3><span class=\"underline\">Boon(s):</span><span class=\"header-liners\"><a :href=\"li.__hasUIFields__ ? '#'+getBnBSlug(li.boon.name) : undefined\" :class=\"{canceled:li._canceled}\" v-for=\"li in boonsArray\">{{li.boon.name}}</a></span></h3>\r\n\t\t\t\t<bb-apply v-for=\"(li,i) in boonsArray\" :key=\"li.get_uid()\" :assign=\"li\" :remainingPoints=\"maxBoonsSpendableLeft\"></bb-apply>\r\n\t\t\t\t</div>\r\n\t\t\t\t<div class=\"bb-details\">\r\n\t\t\t\t\t<h3><span>Bane(s):</span><span class=\"header-liners\"></span><span class=\"header-liners\"><a :href=\"li.__hasUIFields__ ? '#'+getBnBSlug(li.bane.name) : undefined\"  :class=\"{canceled:li._canceled}\" v-for=\"li in banesArray\">{{li.bane.name}}</a></span></h3>\r\n\t\t\t\t\t<bb-apply v-for=\"(li,i) in banesArray\" :key=\"li.get_uid()\" :assign=\"li\"></bb-apply>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t</section>\r\n\t\t\t\r\n\t\t<hr/>\r\n\t\t\t\r\n\t\t<section class=\"gen-skills\"  id=\"gen-skills\">\r\n\t\t\t<h2>Skills <span class=\"valuer\">({{placeholder}} Skill Points remaining. (Available: {{placeholder}}) ) </span></h2>\r\n\t\t\t\t\r\n\t\t</section>\r\n\t\t\t\r\n\t\t<section class=\"gen-social-class\"  id=\"gen-social-class\">\r\n\t\t\t<h2>Social Class/Wealth <span class=\"valuer\">({{placeholder}} for {{placeholder}} PCP assigned)</span></h2>\r\n\t\t</section>\r\n\t\t\t\r\n\t\t<section class=\"gen-schoolprofs\"  id=\"gen-schoolprofs\">\r\n\t\t\t<h2>School &amp; Profeciencies <span class=\"valuer\">({{placeholder}} Profeciency Points remaining. (Available: {{placeholder}}) ) </span></h2>\r\n\t\t\t\t\r\n\t\t</section>\r\n\t\t\t\r\n\t\r\n\t</div>\r\n\t\r\n\t<hr/>\r\n\t<div class=\"chargen__footer\">\r\n\t\t<section class=\"gen-inventory\">\r\n\t\t\t<h2>Inventory</h2>\r\n\t\t</section>\r\n\t\t\r\n\t\t<hr/>\r\n\t\t<section class=\"wounds\" v-show=\"false\">\r\n\t\t\t<h2>Wounds</h2>\r\n\t\t</section>\r\n\t\t<button>Save Character</button>\r\n\t</div>\r\n\t\r\n</div>\r\n";
	}
	,get_placeholder: function() {
		return "[placeholder]";
	}
	,get_shouldShowBnBs: function() {
		return this.$data.get_shouldShowBnBs();
	}
	,get_campaignPowLevel: function() {
		var _this = this.$data;
		return _this.campaignPowerLevels[_this.campaignPowLevelIndex];
	}
	,get_categoryRace: function() {
		return this.$data.categories[0];
	}
	,get_categoryAttributes: function() {
		return this.$data.categories[1];
	}
	,get_categoriesRemainingAssignable: function() {
		return this.$data.get_categoriesRemainingAssignable();
	}
	,get_isValidCategories: function() {
		return this.$data.get_isValidCategories();
	}
	,checkWarningCategories: function() {
		return this.$data.checkWarningCategories();
	}
	,get_raceTier: function() {
		return this.$data.get_raceTier();
	}
	,get_totalAttributePointsSpent: function() {
		return this.$data.get_totalAttributePointsSpent();
	}
	,get_remainingAttributePoints: function() {
		return this.$data.get_remainingAttributePoints();
	}
	,get_availableAttributePoints: function() {
		return this.$data.get_availableAttributePoints();
	}
	,canBuyMoreAttributeLevels: function() {
		return this.$data.canBuyMoreAttributeLevels();
	}
	,checkWarningAttributes: function() {
		return this.$data.checkWarningAttributes();
	}
	,addBB: function(bba,isBane) {
		this.$data.addBB(bba,isBane);
		return;
	}
	,removeBB: function(bba,isBane) {
		this.$data.removeBB(bba,isBane);
		return;
	}
	,get_totalBaneExpenditure: function() {
		return this.$data.get_totalBaneExpenditure();
	}
	,get_maxBanePointsEarnable: function() {
		var _this = this.$data;
		if(_this.get_BnBpoints() < 0) {
			return 15 - _this.get_BnBpoints();
		} else {
			return 15;
		}
	}
	,get_totalBanePointsEarned: function() {
		return this.$data.get_totalBanePointsEarned();
	}
	,get_totalBanePointsSpent: function() {
		return this.$data.get_totalBanePointsSpent();
	}
	,get_totalBoonExpenditure: function() {
		return this.$data.get_totalBoonExpenditure();
	}
	,get_boonsArray: function() {
		return this.$data.get_boonsArray();
	}
	,get_banesArray: function() {
		return this.$data.get_banesArray();
	}
	,get_BnBpoints: function() {
		return this.$data.get_BnBpoints();
	}
	,get_totalBnBScore: function() {
		return this.$data.get_totalBnBScore();
	}
	,get_maxBoonsSpendable: function() {
		return this.$data.get_maxBoonsSpendable();
	}
	,get_maxBoonsSpendableLeft: function() {
		return this.$data.get_maxBoonsSpendableLeft();
	}
	,get_maxBanesSpendable: function() {
		return this.$data.get_maxBanesSpendable();
	}
	,get_maxBanesSpendableLeft: function() {
		return this.$data.get_maxBanesSpendableLeft();
	}
	,isValidAll: function(showWarnings) {
		if(showWarnings == null) {
			showWarnings = false;
		}
		return this.$data.isValidAll(showWarnings);
	}
	,_Init: function() {
		var cls = troshx_sos_vue_CharGen;
		var clsP = cls.prototype;
		this.data = clsP.Data;
		this.components = this.Components();
		this.template = this.Template();
		this.computed = { shouldShowBnBs : clsP.get_shouldShowBnBs, campaignPowLevel : clsP.get_campaignPowLevel, categoryRace : clsP.get_categoryRace, categoryAttributes : clsP.get_categoryAttributes, categoriesRemainingAssignable : clsP.get_categoriesRemainingAssignable, isValidCategories : clsP.get_isValidCategories, raceTier : clsP.get_raceTier, totalAttributePointsSpent : clsP.get_totalAttributePointsSpent, remainingAttributePoints : clsP.get_remainingAttributePoints, availableAttributePoints : clsP.get_availableAttributePoints, totalBaneExpenditure : clsP.get_totalBaneExpenditure, maxBanePointsEarnable : clsP.get_maxBanePointsEarnable, totalBanePointsEarned : clsP.get_totalBanePointsEarned, totalBanePointsSpent : clsP.get_totalBanePointsSpent, totalBoonExpenditure : clsP.get_totalBoonExpenditure, boonsArray : clsP.get_boonsArray, banesArray : clsP.get_banesArray, BnBpoints : clsP.get_BnBpoints, totalBnBScore : clsP.get_totalBnBScore, maxBoonsSpendable : clsP.get_maxBoonsSpendable, maxBoonsSpendableLeft : clsP.get_maxBoonsSpendableLeft, maxBanesSpendable : clsP.get_maxBanesSpendable, maxBanesSpendableLeft : clsP.get_maxBanesSpendableLeft, placeholder : clsP.get_placeholder};
		this.methods = { watch_maxBoonsSpendableLeft : clsP.watch_maxBoonsSpendableLeft, getBnBSlug : clsP.getBnBSlug, resetBB : clsP.resetBB, get_placeholder : clsP.get_placeholder, get_shouldShowBnBs : clsP.get_shouldShowBnBs, get_campaignPowLevel : clsP.get_campaignPowLevel, get_categoryRace : clsP.get_categoryRace, get_categoryAttributes : clsP.get_categoryAttributes, get_categoriesRemainingAssignable : clsP.get_categoriesRemainingAssignable, get_isValidCategories : clsP.get_isValidCategories, checkWarningCategories : clsP.checkWarningCategories, get_raceTier : clsP.get_raceTier, get_totalAttributePointsSpent : clsP.get_totalAttributePointsSpent, get_remainingAttributePoints : clsP.get_remainingAttributePoints, get_availableAttributePoints : clsP.get_availableAttributePoints, canBuyMoreAttributeLevels : clsP.canBuyMoreAttributeLevels, checkWarningAttributes : clsP.checkWarningAttributes, addBB : clsP.addBB, removeBB : clsP.removeBB, get_totalBaneExpenditure : clsP.get_totalBaneExpenditure, get_maxBanePointsEarnable : clsP.get_maxBanePointsEarnable, get_totalBanePointsEarned : clsP.get_totalBanePointsEarned, get_totalBanePointsSpent : clsP.get_totalBanePointsSpent, get_totalBoonExpenditure : clsP.get_totalBoonExpenditure, get_boonsArray : clsP.get_boonsArray, get_banesArray : clsP.get_banesArray, get_BnBpoints : clsP.get_BnBpoints, get_totalBnBScore : clsP.get_totalBnBScore, get_maxBoonsSpendable : clsP.get_maxBoonsSpendable, get_maxBoonsSpendableLeft : clsP.get_maxBoonsSpendableLeft, get_maxBanesSpendable : clsP.get_maxBanesSpendable, get_maxBanesSpendableLeft : clsP.get_maxBanesSpendableLeft, isValidAll : clsP.isValidAll};
		this.watch = { maxBoonsSpendableLeft : clsP.watch_maxBoonsSpendableLeft};
	}
	,__class__: troshx_sos_vue_CharGen
});
var troshx_sos_vue_inputs_NumericInput = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_inputs_NumericInput.__name__ = true;
troshx_sos_vue_inputs_NumericInput.getSampleInstance = function() {
	if(troshx_sos_vue_inputs_NumericInput.INSTANCE != null) {
		return troshx_sos_vue_inputs_NumericInput.INSTANCE;
	} else {
		return troshx_sos_vue_inputs_NumericInput.INSTANCE = new troshx_sos_vue_inputs_NumericInput();
	}
};
troshx_sos_vue_inputs_NumericInput.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_inputs_NumericInput.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_min: function() {
		return 0;
	}
	,get_max: function() {
		return 999999999;
	}
	,get_valid: function() {
		return true;
	}
	,Template: function() {
		return troshx_sos_vue_inputs_NumericInput.TEMPLATE;
	}
	,Mounted: function() {
		this.checkConstraints();
	}
	,checkConstraints: function() {
		var theCurrent = this.current;
		var currentVal = theCurrent;
		var min = this.min;
		var max = this.max;
		if(min != null && currentVal < min) {
			currentVal = min;
		}
		if(max != null && currentVal > max) {
			currentVal = max;
		}
		if(currentVal != theCurrent) {
			this.obj[this.prop] = currentVal;
		}
	}
	,watch_min: function(newVal) {
		this.checkConstraints();
	}
	,watch_max: function(newVal) {
		this.checkConstraints();
	}
	,inputHandler: function(input) {
		var max = this.max;
		var min = this.min;
		var result = input.valueAsNumber;
		if(result > max) {
			result = max;
			input.valueAsNumber = result;
		}
		if(result < min) {
			result = min;
			input.valueAsNumber = result;
		}
		this.obj[this.prop] = result;
	}
	,get_current: function() {
		return this.obj[this.prop];
	}
	,_Init: function() {
		var cls = troshx_sos_vue_inputs_NumericInput;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.mounted = clsP.Mounted;
		this.computed = { min : clsP.get_min, max : clsP.get_max, valid : clsP.get_valid, current : clsP.get_current};
		this.methods = { get_min : clsP.get_min, get_max : clsP.get_max, get_valid : clsP.get_valid, checkConstraints : clsP.checkConstraints, watch_min : clsP.watch_min, watch_max : clsP.watch_max, inputHandler : clsP.inputHandler, get_current : clsP.get_current};
		this.props = { prop : { required : true, type : String}, obj : { required : true}};
		this.watch = { min : clsP.watch_min, max : clsP.watch_max};
	}
	,__class__: troshx_sos_vue_inputs_NumericInput
});
var troshx_sos_vue_inputs_impl_AttributeInput = function() {
	haxevx_vuex_core_VComponent.call(this);
	this.mixins = [troshx_sos_vue_inputs_NumericInput.getSampleInstance()];
};
troshx_sos_vue_inputs_impl_AttributeInput.__name__ = true;
troshx_sos_vue_inputs_impl_AttributeInput.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_inputs_impl_AttributeInput.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_bareMinAttribute: function() {
		if(!this.magic) {
			return 1;
		} else {
			return 0;
		}
	}
	,get_current: function() {
		return this.obj[this.prop];
	}
	,get_valid: function() {
		return this.current + this.racialModifier >= this.bareMinAttribute;
	}
	,get_min: function() {
		if(this.magic) {
			return 0;
		} else {
			return 1;
		}
	}
	,get_max: function() {
		var remainingAttribPoints = this.remainingAttributePoints;
		var upTo = this.current + remainingAttribPoints;
		return Math.min(this.current + (remainingAttribPoints - (upTo > 10 ? upTo - 10 : 0)),8) | 0;
	}
	,_Init: function() {
		var cls = troshx_sos_vue_inputs_impl_AttributeInput;
		var clsP = cls.prototype;
		this.computed = { bareMinAttribute : clsP.get_bareMinAttribute, current : clsP.get_current, valid : clsP.get_valid, min : clsP.get_min, max : clsP.get_max};
		this.methods = { get_bareMinAttribute : clsP.get_bareMinAttribute, get_current : clsP.get_current, get_valid : clsP.get_valid, get_min : clsP.get_min, get_max : clsP.get_max};
		this.props = { prop : { required : true, type : String}, obj : { required : true}, magic : { required : false, "default" : false, type : Boolean}, racialModifier : { required : false, "default" : 0, type : Number}, remainingAttributePoints : { required : true, type : Number}};
	}
	,__class__: troshx_sos_vue_inputs_impl_AttributeInput
});
var troshx_sos_vue_inputs_impl_BoonBaneInput = function() {
	haxevx_vuex_core_VComponent.call(this);
	this.mixins = [troshx_sos_vue_inputs_NumericInput.getSampleInstance()];
};
troshx_sos_vue_inputs_impl_BoonBaneInput.__name__ = true;
troshx_sos_vue_inputs_impl_BoonBaneInput.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_inputs_impl_BoonBaneInput.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Template: function() {
		return "<span class=\"gen-comp-bb\" :class=\"{canceled:obj._canceled, disabled:max<1, selected:obj[prop]>0}\">\r\n\t\t<label><input type=\"checkbox\" :disabled=\"obj._canceled\" v-if=\"coreMax<2\" :checked=\"obj[prop]>=1\" v-on:click.stop=\"checkboxHandler($" + "event.target)\"></input><input type=\"number\" :disabled=\"obj._canceled\" v-if=\"coreMax>=2\" number v-on:input=\"inputHandler($" + "event.target)\" :value=\"obj[prop]\" :class=\"{invalid:!valid}\" :min=\"min\" :max=\"max\"></input><span v-html=\"label\" v-on:click=\"toggleIfPossible($" + "event)\"></span><span v-show=\"showClose\">&nbsp;<a href=\"#\" v-on:click.stop.prevent=\"closeBB()\">[x]</a></span><span style=\"opacity:1;pointer-events:auto;\" v-show=\"showReset\">[<a href=\"#\" v-on:click.stop.prevent=\"resetBB()\">c</a>]</span></label>\r\n\t\t</span>";
	}
	,get_showReset: function() {
		var costArr = this.bb.costs;
		var cc = this.cost;
		if(cc == null) {
			cc = costArr[0];
		}
		if(cc < costArr[0]) {
			cc = costArr[0];
		} else {
			cc = cc;
		}
		var rank = this.bba.rank;
		return cc != costArr[rank > 1 ? rank - 1 : 0];
	}
	,resetBB: function() {
		this.$emit("resetBB",this.bba,this.isBane);
	}
	,get_min: function() {
		if(this.bba._forcePermanent) {
			return 1;
		} else {
			return 0;
		}
	}
	,get_max: function() {
		var cm = this.coreMax;
		if(this.remaining != null) {
			var bba = this.bba;
			var re = this.remaining + (this.current > 0 ? bba._costCached : 0);
			var b = 0;
			var lowestCost = this.bb.costs[0];
			var _g1 = 0;
			var _g = cm;
			while(_g1 < _g) {
				var i = _g1++;
				var c = bba.getCost(i + 1);
				if(c < lowestCost) {
					c = lowestCost;
				} else {
					c = c;
				}
				if(re < c) {
					break;
				}
				b = i + 1;
			}
			return b;
		}
		return cm;
	}
	,get_coreMax: function() {
		if(this.bb.clampRank) {
			return 1;
		} else {
			return this.bb.costs.length;
		}
	}
	,get_current: function() {
		return this.obj[this.prop];
	}
	,toggleIfPossible: function(e) {
		var cur = this.obj[this.prop];
		if(this.bba._canceled) {
			this.bba._canceled = false;
			return;
		}
		if(cur == 0) {
			this.obj[this.prop] = 1;
			e.stopPropagation();
			e.preventDefault();
		}
	}
	,closeBB: function() {
		this.obj[this.prop] = 0;
	}
	,get_showClose: function() {
		if(this.obj[this.prop] >= 1) {
			return this.coreMax >= 2;
		} else {
			return false;
		}
	}
	,checkboxHandler: function(htmlInput) {
		this.obj[this.prop] = htmlInput.checked ? 1 : 0;
	}
	,watch_current: function(newValue,oldValue) {
		if(oldValue > 0) {
			if(newValue <= 0) {
				this.$emit("removeBB",this.bba,this.isBane);
			}
		} else if(newValue > 0) {
			this.$emit("addBB",this.bba,this.isBane);
		}
	}
	,get_cost: function() {
		return this.bba.getCost(this.bba.rank);
	}
	,get_qty: function() {
		return this.bba.getQty();
	}
	,watch_cost: function(newValue) {
		var bba = this.bba;
		var rank = bba.rank;
		var test = this.bb.costs[0];
		bba._costCached = newValue >= test ? newValue : test;
	}
	,get_label: function() {
		var bber = this.bb;
		var bba = this.bba;
		var customCostInnerSlashes = bber.customCostInnerSlashes;
		var qty = this.qty;
		var closeBracket = ")";
		var openBracket = "(";
		if(bber.multipleTimes != 1 && bber.multipleTimes != 0) {
			closeBracket = "]";
			openBracket = "[";
		}
		var joinStr = bber.multipleTimes != -2 ? "/" : "|";
		var costArr = bber.costs;
		var rankCost = bba.rank < 2 ? costArr[0] : costArr[bba.rank - 1];
		var costJoin = "" + (bba.rank == 1 ? "<b>" + costArr[0] + "</b>" : "" + costArr[0]);
		var max = this.max;
		var _g1 = 1;
		var _g = costArr.length;
		while(_g1 < _g) {
			var i = _g1++;
			var joinChar = customCostInnerSlashes != null ? customCostInnerSlashes.charAt(i - 1) : joinStr;
			costJoin += (i == max ? "<span class=\"limit-join\">" + joinChar + "</span>" : joinChar) + (bba.rank == i + 1 ? "<b>" + costArr[i] + "</b>" : "" + costArr[i]);
		}
		var costDisp = openBracket + costJoin + closeBracket;
		var cc = this.cost;
		if(cc < costArr[0]) {
			cc = costArr[0];
		} else {
			cc = cc;
		}
		return this.bb.name + " " + costDisp + (qty > 1 ? "~" + qty + "~" : "") + (cc != rankCost ? "=<b>" + cc + "</b>" : "");
	}
	,get_bba: function() {
		return this.obj;
	}
	,get_isBane: function() {
		return js_Boot.__instanceof(this.obj,troshx_sos_core_BaneAssign);
	}
	,get_bb: function() {
		return this.bba.getBoonOrBane();
	}
	,_Init: function() {
		var cls = troshx_sos_vue_inputs_impl_BoonBaneInput;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.computed = { showReset : clsP.get_showReset, min : clsP.get_min, max : clsP.get_max, coreMax : clsP.get_coreMax, current : clsP.get_current, showClose : clsP.get_showClose, cost : clsP.get_cost, qty : clsP.get_qty, label : clsP.get_label, bba : clsP.get_bba, isBane : clsP.get_isBane, bb : clsP.get_bb};
		this.methods = { get_showReset : clsP.get_showReset, resetBB : clsP.resetBB, get_min : clsP.get_min, get_max : clsP.get_max, get_coreMax : clsP.get_coreMax, get_current : clsP.get_current, toggleIfPossible : clsP.toggleIfPossible, closeBB : clsP.closeBB, get_showClose : clsP.get_showClose, checkboxHandler : clsP.checkboxHandler, watch_current : clsP.watch_current, get_cost : clsP.get_cost, get_qty : clsP.get_qty, watch_cost : clsP.watch_cost, get_label : clsP.get_label, get_bba : clsP.get_bba, get_isBane : clsP.get_isBane, get_bb : clsP.get_bb};
		this.props = { prop : { required : true, type : String}, obj : { required : true}, remaining : { type : Number}};
		this.watch = { current : clsP.watch_current, cost : clsP.watch_cost};
	}
	,__class__: troshx_sos_vue_inputs_impl_BoonBaneInput
});
var troshx_sos_vue_inputs_impl_CategoryPCPInput = function() {
	haxevx_vuex_core_VComponent.call(this);
	this.mixins = [troshx_sos_vue_inputs_NumericInput.getSampleInstance()];
};
troshx_sos_vue_inputs_impl_CategoryPCPInput.__name__ = true;
troshx_sos_vue_inputs_impl_CategoryPCPInput.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_inputs_impl_CategoryPCPInput.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_current: function() {
		return this.obj[this.prop];
	}
	,get_valid: function() {
		if(this.current >= this.min) {
			return this.max <= this.maxPCPPerCategory;
		} else {
			return false;
		}
	}
	,get_min: function() {
		if(this.magic) {
			return 0;
		} else {
			return 1;
		}
	}
	,get_max: function() {
		return Math.min(this.current + this.remainingAssignable,this.maxPCPPerCategory) | 0;
	}
	,_Init: function() {
		var cls = troshx_sos_vue_inputs_impl_CategoryPCPInput;
		var clsP = cls.prototype;
		this.computed = { current : clsP.get_current, valid : clsP.get_valid, min : clsP.get_min, max : clsP.get_max};
		this.methods = { get_current : clsP.get_current, get_valid : clsP.get_valid, get_min : clsP.get_min, get_max : clsP.get_max};
		this.props = { prop : { required : true, type : String}, obj : { required : true}, magic : { required : false, "default" : false, type : Boolean}, remainingAssignable : { required : true, type : Number}, maxPCPPerCategory : { required : true, type : Number}};
	}
	,__class__: troshx_sos_vue_inputs_impl_CategoryPCPInput
});
var troshx_sos_vue_uifields_ArrayOf = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_ArrayOf.__name__ = true;
troshx_sos_vue_uifields_ArrayOf.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_ArrayOf.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Components: function() {
		if(troshx_sos_vue_uifields_ArrayOf.COMPONENTS != null) {
			return troshx_sos_vue_uifields_ArrayOf.COMPONENTS;
		} else {
			return troshx_sos_vue_uifields_ArrayOf.COMPONENTS = troshx_sos_vue_uifields_UI.getNewSetOfComponents(true);
		}
	}
	,Template: function() {
		return "<div>\r\n\t\t<label v-if=\"label\">{{label}}:&nbsp;| {{maxLength}}</label><button :disabled=\"!(maxLength == null || current.length + 1 <= maxLength)\" v-on:click=\"pushEntry()\">+</button> &nbsp;<button :disabled=\"!(current.length > (minLength != null ? minLength : 0))\" v-on:click=\"popEntry()\">-</button>\r\n\r\n\t\t<ul>\r\n\t\t\t<li v-for=\"(li, i) in current\">\r\n\t\t\t\t<span :is=\"typeMap[of]\" :obj=\"current\" :prop=\"i\" :key=\"i\" :disabled=\"!(maxLength == null || i < maxLength)\"></span>\r\n\t\t\t</li>\r\n\t\t</ul>\r\n\t\t\r\n\t\t</div>";
	}
	,pushEntry: function() {
		var arr = this.current;
		var defValue = this.defaultValue;
		var valueToUse;
		if(Reflect.isFunction(defValue)) {
			valueToUse = defValue();
		} else if((defValue instanceof Array) && defValue.__enum__ == null) {
			console.log("Warning, nested array not supported");
			valueToUse = defValue.concat([]);
		} else {
			var tt = Type["typeof"](defValue);
			if(tt[1] == 6) {
				var c = tt[2];
				valueToUse = Type.createInstance(c,[]);
			} else {
				valueToUse = defValue;
			}
		}
		arr.push(valueToUse);
	}
	,popEntry: function() {
		this.current.pop();
	}
	,get_current: function() {
		return this.obj[this.prop];
	}
	,get_typeMap: function() {
		return troshx_sos_vue_uifields_UI.getTypeMapToComponentNames();
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_ArrayOf;
		var clsP = cls.prototype;
		this.components = this.Components();
		this.template = this.Template();
		this.computed = { current : clsP.get_current, typeMap : clsP.get_typeMap};
		this.methods = { pushEntry : clsP.pushEntry, popEntry : clsP.popEntry, get_current : clsP.get_current, get_typeMap : clsP.get_typeMap};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, defaultValue : { required : true}, obj : { required : true}, of : { required : true, type : String}, disabled : { required : false, "default" : false, type : Boolean}, maxLength : { required : false, type : Number}, minLength : { required : false, "default" : 0, type : Number}};
	}
	,__class__: troshx_sos_vue_uifields_ArrayOf
});
var troshx_sos_vue_uifields_BaseNumMixin = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_BaseNumMixin.__name__ = true;
troshx_sos_vue_uifields_BaseNumMixin.getSampleInstance = function() {
	if(troshx_sos_vue_uifields_BaseNumMixin.INSTANCE != null) {
		return troshx_sos_vue_uifields_BaseNumMixin.INSTANCE;
	} else {
		return troshx_sos_vue_uifields_BaseNumMixin.INSTANCE = new troshx_sos_vue_uifields_BaseNumMixin();
	}
};
troshx_sos_vue_uifields_BaseNumMixin.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_BaseNumMixin.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	checkConstraints: function() {
		var theCurrent = this.current;
		var currentVal = theCurrent;
		var min = this.min;
		var max = this.max;
		if(min != null && currentVal < min) {
			currentVal = min;
		}
		if(max != null && currentVal > max) {
			currentVal = max;
		}
		if(currentVal != theCurrent) {
			this.obj[this.prop] = currentVal;
		}
	}
	,watch_min: function(newVal) {
		this.checkConstraints();
	}
	,watch_max: function(newVal) {
		this.checkConstraints();
	}
	,get_current: function() {
		return this.obj[this.prop];
	}
	,inputHandler: function(input) {
		var max = this.max;
		var min = this.min;
		var result = input.valueAsNumber;
		if(result > max) {
			result = max;
			input.valueAsNumber = result;
		}
		if(result < min) {
			result = min;
			input.valueAsNumber = result;
		}
		this.obj[this.prop] = result;
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_BaseNumMixin;
		var clsP = cls.prototype;
		this.computed = { current : clsP.get_current};
		this.methods = { checkConstraints : clsP.checkConstraints, watch_min : clsP.watch_min, watch_max : clsP.watch_max, get_current : clsP.get_current, inputHandler : clsP.inputHandler};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, min : { required : false, type : Number}, disabled : { required : false, "default" : false, type : Boolean}, max : { required : false, type : Number}, step : { required : false, type : Number}};
		this.watch = { min : clsP.watch_min, max : clsP.watch_max};
	}
	,__class__: troshx_sos_vue_uifields_BaseNumMixin
});
var troshx_sos_vue_uifields_Bitmask = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_Bitmask.__name__ = true;
troshx_sos_vue_uifields_Bitmask.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_Bitmask.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Template: function() {
		return "<div class=\"troshx-uifields\" :class=\"{disabled:disabled}\">\r\n\t\t\t<label v-if=\"label\">{{ label }}:&nbsp;</label>\r\n\t\t\t<span style=\"vertical-align:top; margin-right:5px; display:inline-block\" v-for=\"(li, i) in labels\"><label><input type=\"checkbox\" v-on:click=\"checkboxHandler($" + "event.target, i)\" :checked=\"(valueAtIndex(i)&current)!=0\" :disabled=\"!(validateOptionFunc == null || validateOptionFunc())\"></input>{{ li }}</label></span>\r\n\t\t</div>";
	}
	,checkboxHandler: function(checkbox,i) {
		if(checkbox.checked) {
			this.obj[this.prop] |= this.values != null ? this.values[i] : 1 << i;
		} else {
			this.obj[this.prop] &= ~(this.values != null ? this.values[i] : 1 << i);
		}
	}
	,valueAtIndex: function(i) {
		if(this.values != null) {
			return this.values[i];
		} else {
			return 1 << i;
		}
	}
	,get_current: function() {
		return this.obj[this.prop];
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_Bitmask;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.computed = { current : clsP.get_current};
		this.methods = { checkboxHandler : clsP.checkboxHandler, valueAtIndex : clsP.valueAtIndex, get_current : clsP.get_current};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, values : { required : false, type : Array}, disabled : { required : false, "default" : false, type : Boolean}, validateOptionFunc : { required : false, type : Function}, labels : { required : true, type : Array}};
	}
	,__class__: troshx_sos_vue_uifields_Bitmask
});
var troshx_sos_vue_uifields_FieldInt = function() {
	haxevx_vuex_core_VComponent.call(this);
	this.mixins = [troshx_sos_vue_uifields_BaseNumMixin.getSampleInstance()];
};
troshx_sos_vue_uifields_FieldInt.__name__ = true;
troshx_sos_vue_uifields_FieldInt.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_FieldInt.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Template: function() {
		return "<div>\r\n\t\t\t<label v-if=\"label\">{{ label }}:&nbsp;</label>\r\n\t\t\t<input type=\"number\" number v-on:input=\"inputHandler($" + "event.target)\" :value=\"obj[prop]\" :min=\"min\" :max=\"max\" :step=\"step\"></input>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_FieldInt;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, min : { required : false, type : Number}, disabled : { required : false, "default" : false, type : Boolean}, max : { required : false, type : Number}, step : { required : false, type : Number}};
	}
	,__class__: troshx_sos_vue_uifields_FieldInt
});
var troshx_sos_vue_uifields_FieldNumber = function() {
	haxevx_vuex_core_VComponent.call(this);
	this.mixins = [troshx_sos_vue_uifields_BaseNumMixin.getSampleInstance()];
};
troshx_sos_vue_uifields_FieldNumber.__name__ = true;
troshx_sos_vue_uifields_FieldNumber.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_FieldNumber.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Template: function() {
		return "<div>\r\n\t\t\t<label v-if=\"label\">{{ label }}:&nbsp;</label>\r\n\t\t\t<input type=\"number\"  :disabled=\"disabled\" number v-on:input=\"inputHandler($" + "event.target)\" :value=\"obj[prop]\" :min=\"min\" :max=\"max\" :step=\"step\"></input>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_FieldNumber;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, min : { required : false, type : Number}, disabled : { required : false, "default" : false, type : Boolean}, max : { required : false, type : Number}, step : { required : false, type : Number}};
	}
	,__class__: troshx_sos_vue_uifields_FieldNumber
});
var troshx_sos_vue_uifields_FieldString = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_FieldString.__name__ = true;
troshx_sos_vue_uifields_FieldString.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_FieldString.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Template: function() {
		return "<div>\r\n\t\t\t<label v-if=\"label\">{{ label }}:&nbsp;</label>\r\n\t\t\t<input type=\"text\" v-model=\"obj[prop]\" :disabled=\"disabled\"></input>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_FieldString;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, disabled : { required : false, "default" : false, type : Boolean}};
	}
	,__class__: troshx_sos_vue_uifields_FieldString
});
var troshx_sos_vue_uifields_FieldTextArea = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_FieldTextArea.__name__ = true;
troshx_sos_vue_uifields_FieldTextArea.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_FieldTextArea.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Template: function() {
		return "<div>\r\n\t\t\t<label v-if=\"label\">{{ label }}:&nbsp;</label>\r\n\t\t\t<textarea v-model=\"obj[prop]\" :disabled=\"disabled\"></textarea>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_FieldTextArea;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, disabled : { required : false, "default" : false, type : Boolean}};
	}
	,__class__: troshx_sos_vue_uifields_FieldTextArea
});
var troshx_sos_vue_uifields_HitLocationMultiSelector = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_HitLocationMultiSelector.__name__ = true;
troshx_sos_vue_uifields_HitLocationMultiSelector.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_HitLocationMultiSelector.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Components: function() {
		var _m_ = { };
		_m_["comp"] = new troshx_sos_vue_uifields_Bitmask();
		return _m_;
	}
	,get_labels: function() {
		var bd = this.body;
		var collect = [];
		var hitLocations = bd.hitLocations;
		var _g1 = 0;
		var _g = hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			collect.push(hitLocations[i].name);
		}
		return collect;
	}
	,Render: function(c) {
		var props = { label : this.label, obj : this.obj, prop : this.prop, labels : this.labels};
		return c("comp",{ props : props});
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_HitLocationMultiSelector;
		var clsP = cls.prototype;
		this.components = this.Components();
		this.render = clsP.Render;
		this.computed = { labels : clsP.get_labels};
		this.methods = { get_labels : clsP.get_labels};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, body : { required : true, type : Object}, disabled : { required : false, "default" : false, type : Boolean}};
	}
	,__class__: troshx_sos_vue_uifields_HitLocationMultiSelector
});
var troshx_sos_vue_uifields_HitLocationSelector = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_HitLocationSelector.__name__ = true;
troshx_sos_vue_uifields_HitLocationSelector.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_HitLocationSelector.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Components: function() {
		var _m_ = { };
		_m_["comp"] = new troshx_sos_vue_uifields_SingleSelection();
		return _m_;
	}
	,get_labels: function() {
		var bd = this.body;
		var collect = [];
		var hitLocations = bd.hitLocations;
		var _g1 = 0;
		var _g = hitLocations.length;
		while(_g1 < _g) {
			var i = _g1++;
			collect.push(hitLocations[i].name);
		}
		return collect;
	}
	,Render: function(c) {
		var props = { label : this.label, obj : this.obj, prop : this.prop, labels : this.labels};
		return c("comp",{ props : props});
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_HitLocationSelector;
		var clsP = cls.prototype;
		this.components = this.Components();
		this.render = clsP.Render;
		this.computed = { labels : clsP.get_labels};
		this.methods = { get_labels : clsP.get_labels};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, body : { required : true, type : Object}, disabled : { required : false, "default" : false, type : Boolean}};
	}
	,__class__: troshx_sos_vue_uifields_HitLocationSelector
});
var troshx_sos_vue_uifields_MoneyField = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_MoneyField.__name__ = true;
troshx_sos_vue_uifields_MoneyField.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_MoneyField.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	get_current: function() {
		return this.obj[this.prop];
	}
	,Template: function() {
		return "<div>\r\n\t\t\t<h6>Money:</h6>\r\n\t\t\t<label><input type=\"number\" step=\"1\" v-model.number=\"current.gp\" :disabled=\"disabled\"></input>&nbsp;GP</label> &nbsp;\r\n\t\t\t<label><input type=\"number\" step=\"1\" v-model.number=\"current.sp\" :disabled=\"disabled\"></input>&nbsp;SP</label> &nbsp;\r\n\t\t\t<label><input type=\"number\" step=\"1\" v-model.number=\"current.cp\" :disabled=\"disabled\"></input>&nbsp;CP</label> &nbsp;\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_MoneyField;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.computed = { current : clsP.get_current};
		this.methods = { get_current : clsP.get_current};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, disabled : { required : false, "default" : false, type : Boolean}};
	}
	,__class__: troshx_sos_vue_uifields_MoneyField
});
var troshx_sos_vue_uifields_SingleSelection = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_uifields_SingleSelection.__name__ = true;
troshx_sos_vue_uifields_SingleSelection.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_uifields_SingleSelection.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	valueAtIndex: function(i) {
		if(this.values != null) {
			return this.values[i];
		} else {
			return i;
		}
	}
	,Template: function() {
		return "<div>\r\n\t\t\t<label v-if=\"label\">{{ label }}</label>:<br/>\r\n\t\t\t<select v-model=\"obj[prop]\" :disabled=\"disabled\">\r\n\t\t\t\t<option v-for=\"(li, i) in labels\" :value=\"valueAtIndex(i)\" :disabled=\"!(validateOptionFunc == null || validateOptionFunc())\">{{ li }}</option> \r\n\t\t\t</select>\r\n\t\t</div>";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_uifields_SingleSelection;
		var clsP = cls.prototype;
		this.template = this.Template();
		this.methods = { valueAtIndex : clsP.valueAtIndex};
		this.props = { label : { required : false, "default" : null, type : String}, prop : { required : true}, obj : { required : true}, values : { required : false, type : Array}, disabled : { required : false, "default" : false, type : Boolean}, validateOptionFunc : { required : false, type : Function}, labels : { required : true, type : Array}};
	}
	,__class__: troshx_sos_vue_uifields_SingleSelection
});
var troshx_sos_vue_uifields_UI = function() { };
troshx_sos_vue_uifields_UI.__name__ = true;
troshx_sos_vue_uifields_UI.getComponents = function() {
	if(troshx_sos_vue_uifields_UI.COMPONENTS != null) {
		return troshx_sos_vue_uifields_UI.COMPONENTS;
	} else {
		return troshx_sos_vue_uifields_UI.COMPONENTS = troshx_sos_vue_uifields_UI.getNewSetOfComponents();
	}
};
troshx_sos_vue_uifields_UI.getNewSetOfComponents = function(excludeArray) {
	if(excludeArray == null) {
		excludeArray = false;
	}
	var dyn = { };
	if(!excludeArray) {
		dyn["ArrayOf"] = new troshx_sos_vue_uifields_ArrayOf();
	}
	dyn["Bitmask"] = new troshx_sos_vue_uifields_Bitmask();
	dyn["FieldNumber"] = new troshx_sos_vue_uifields_FieldNumber();
	dyn["FieldInt"] = new troshx_sos_vue_uifields_FieldInt();
	dyn["FieldString"] = new troshx_sos_vue_uifields_FieldString();
	dyn["FieldTextArea"] = new troshx_sos_vue_uifields_FieldTextArea();
	dyn["SingleSelection"] = new troshx_sos_vue_uifields_SingleSelection();
	dyn["Money"] = new troshx_sos_vue_uifields_MoneyField();
	dyn["HitLocationSelector"] = new troshx_sos_vue_uifields_HitLocationSelector();
	dyn["HitLocationMultiSelector"] = new troshx_sos_vue_uifields_HitLocationMultiSelector();
	return dyn;
};
troshx_sos_vue_uifields_UI.getTypeMapToComponentNames = function() {
	if(troshx_sos_vue_uifields_UI.TYPES != null) {
		return troshx_sos_vue_uifields_UI.TYPES;
	} else {
		return troshx_sos_vue_uifields_UI.TYPES = troshx_sos_vue_uifields_UI.getNewTypeMapToComponentNames();
	}
};
troshx_sos_vue_uifields_UI.getNewTypeMapToComponentNames = function() {
	return { "Array" : "ArrayOf", "Bitmask" : "Bitmask", "Float" : "FieldNumber", "Int" : "FieldInt", "String" : "FieldString", "textarea" : "FieldTextArea", "SingleSelection" : "SingleSelection", "HitLocationSelector" : "HitLocationSelector", "HitLocationMultiSelector" : "HitLocationMultiSelector", "Money" : "Money"};
};
var troshx_sos_vue_widgets_BoonBaneApplyDetails = function() {
	haxevx_vuex_core_VComponent.call(this);
};
troshx_sos_vue_widgets_BoonBaneApplyDetails.__name__ = true;
troshx_sos_vue_widgets_BoonBaneApplyDetails.getSlug = function(name) {
	return "bb-detail-" + name.split(" ").join("-").toLowerCase();
};
troshx_sos_vue_widgets_BoonBaneApplyDetails.__super__ = haxevx_vuex_core_VComponent;
troshx_sos_vue_widgets_BoonBaneApplyDetails.prototype = $extend(haxevx_vuex_core_VComponent.prototype,{
	Components: function() {
		return troshx_sos_vue_uifields_UI.getComponents();
	}
	,get_uiFields: function() {
		return this.assign.getUIFields();
	}
	,get_bb: function() {
		return this.assign.getBoonOrBane();
	}
	,get_qty: function() {
		return this.assign.getQty();
	}
	,get_cost: function() {
		return this.assign.getCost(this.assign.rank);
	}
	,get_titleheader: function() {
		return this.bb.name + (!this.assign.ingame ? " [" + this.clampCost + (this.remainingPoints != null ? "/" + (this.remainingPoints + this.clampCost) : "") + "]" : "");
	}
	,get_clampCost: function() {
		return Math.max(this.cost,this.bb.costs[0]) | 0;
	}
	,get_locked: function() {
		return this.assign._forcePermanent;
	}
	,get_isCanceled: function() {
		return this.assign._canceled;
	}
	,get_typeMap: function() {
		return troshx_sos_vue_uifields_UI.getTypeMapToComponentNames();
	}
	,get_slug: function() {
		return "bb-detail-" + this.bb.name.split(" ").join("-").toLowerCase();
	}
	,Template: function() {
		return "\r\n\t\t\t<div class=\"bb-detail\" v-show=\"assign.__hasUIFields__ && !isCanceled\" :id=\"slug\">\r\n\t\t\t\t<h4>{{ titleheader }}</h4>\r\n\t\t\t\t<div>\t\r\n\t\t\t\t\t<div v-for=\"(li, i) in uiFields\" :is=\"typeMap[li.type]\" :obj=\"assign\" v-bind=\"li\" :key=\"li.prop\"></div>\r\n\t\t\t\t</div>\r\n\t\t\t</div>\r\n\t\t";
	}
	,_Init: function() {
		var cls = troshx_sos_vue_widgets_BoonBaneApplyDetails;
		var clsP = cls.prototype;
		this.components = this.Components();
		this.template = this.Template();
		this.computed = { uiFields : clsP.get_uiFields, bb : clsP.get_bb, qty : clsP.get_qty, cost : clsP.get_cost, titleheader : clsP.get_titleheader, clampCost : clsP.get_clampCost, locked : clsP.get_locked, isCanceled : clsP.get_isCanceled, typeMap : clsP.get_typeMap, slug : clsP.get_slug};
		this.methods = { get_uiFields : clsP.get_uiFields, get_bb : clsP.get_bb, get_qty : clsP.get_qty, get_cost : clsP.get_cost, get_titleheader : clsP.get_titleheader, get_clampCost : clsP.get_clampCost, get_locked : clsP.get_locked, get_isCanceled : clsP.get_isCanceled, get_typeMap : clsP.get_typeMap, get_slug : clsP.get_slug};
		this.props = { assign : { required : true, type : Object}, remainingPoints : { required : false, type : Number}};
	}
	,__class__: troshx_sos_vue_widgets_BoonBaneApplyDetails
});
var troshx_tros_ManueverSheet = $hx_exports["troshx"]["tros"]["ManueverSheet"] = function() { };
troshx_tros_ManueverSheet.__name__ = true;
troshx_tros_ManueverSheet.setAsDefensiveList = function(arr) {
	var i = arr.length;
	while(--i > -1) arr[i].type = 1;
	return arr;
};
troshx_tros_ManueverSheet.setAsOffensiveList = function(arr) {
	var i = arr.length;
	while(--i > -1) arr[i].type = 2;
	return arr;
};
troshx_tros_ManueverSheet.isDamagingManuever = function(ms) {
	if(!(ms == "cut" || ms == "spike" || ms == "thrust")) {
		return ms == "bash";
	} else {
		return true;
	}
};
troshx_tros_ManueverSheet.damageMod_add1 = function(damage,cManuever) {
	return damage + 1;
};
troshx_tros_ManueverSheet.emptyResolveMethod = function() {
};
troshx_tros_ManueverSheet.getDefensiveManueverById = function(id) {
	var _this = troshx_tros_ManueverSheet.defensiveMeleeHash;
	return troshx_tros_ManueverSheet.defensiveMelee[__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]];
};
troshx_tros_ManueverSheet.getOffensiveManueverById = function(id) {
	var _this = troshx_tros_ManueverSheet.offensiveMeleeHash;
	return troshx_tros_ManueverSheet.offensiveMelee[__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]];
};
troshx_tros_ManueverSheet.createHashIndex = function(arr) {
	var obj = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var key = arr[i].id;
		if(__map_reserved[key] != null) {
			obj.setReserved(key,i);
		} else {
			obj.h[key] = i;
		}
	}
	return obj;
};
troshx_tros_ManueverSheet.getMaskWithHashIndexer = function(arrOfIds,hash) {
	var val = 0;
	var i = arrOfIds.length;
	while(--i > -1) {
		var prop = arrOfIds[i];
		if(__map_reserved[prop] != null ? hash.existsReserved(prop) : hash.h.hasOwnProperty(prop)) {
			val = val | 1 << (__map_reserved[prop] != null ? hash.getReserved(prop) : hash.h[prop]);
		}
	}
	return val;
};
troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor = function(arr) {
	return troshx_tros_ManueverSheet.getMaskWithHashIndexer(arr,troshx_tros_ManueverSheet.offensiveMeleeHash);
};
troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor = function(arr) {
	return troshx_tros_ManueverSheet.getMaskWithHashIndexer(arr,troshx_tros_ManueverSheet.defensiveMeleeHash);
};
troshx_tros_ManueverSheet.getManueverListArray = function(attacking) {
	if(attacking) {
		return troshx_tros_ManueverSheet.offensiveMelee;
	} else {
		return troshx_tros_ManueverSheet.defensiveMelee;
	}
};
var troshx_tros_ProfeciencySheet = function() { };
troshx_tros_ProfeciencySheet.__name__ = true;
troshx_tros_ProfeciencySheet.getProfeciency = function(id) {
	var _this = troshx_tros_ProfeciencySheet.listHashIndexer;
	return troshx_tros_ProfeciencySheet.LIST[__map_reserved[id] != null ? _this.getReserved(id) : _this.h[id]];
};
troshx_tros_ProfeciencySheet.createHashIndex = function(arr) {
	var obj = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var key = arr[i].id;
		if(__map_reserved[key] != null) {
			obj.setReserved(key,i);
		} else {
			obj.h[key] = i;
		}
	}
	return obj;
};
troshx_tros_ProfeciencySheet.resolveProfManueverCostChoice = function(id,arr,charSheet) {
	if(id == "counter") {
		if(charSheet.weaponOffhand != null && charSheet.weaponOffhand.shield) {
			return arr[0];
		} else {
			return arr[1];
		}
	} else if(id == "parry") {
		if(charSheet.weaponOffhand != null && charSheet.weaponOffhand.shield) {
			return arr[0];
		} else {
			return arr[1];
		}
	}
	return arr[0];
};
var troshx_tros_WeaponSheet = $hx_exports["troshx"]["tros"]["WeaponSheet"] = function() {
};
troshx_tros_WeaponSheet.__name__ = true;
troshx_tros_WeaponSheet.getWeaponByName = function(name) {
	var _this = troshx_tros_WeaponSheet.HASH;
	if(__map_reserved[name] != null) {
		return _this.getReserved(name);
	} else {
		return _this.h[name];
	}
};
troshx_tros_WeaponSheet.weaponNameIsShield = function(name) {
	var weap = troshx_tros_WeaponSheet.getWeaponByName(name);
	if(weap != null) {
		return weap.shield;
	} else {
		return false;
	}
};
troshx_tros_WeaponSheet.weaponIsShield = function(weapon) {
	return weapon.shield;
};
troshx_tros_WeaponSheet.createHashLookupViaName = function(arr) {
	var obj = new haxe_ds_StringMap();
	var _g1 = 0;
	var _g = arr.length;
	while(_g1 < _g) {
		var i = _g1++;
		var lookinFor = arr[i];
		var key = lookinFor.name;
		if(__map_reserved[key] != null) {
			obj.setReserved(key,lookinFor);
		} else {
			obj.h[key] = lookinFor;
		}
	}
	return obj;
};
troshx_tros_WeaponSheet.find = function(name) {
	var _this = troshx_tros_WeaponSheet.HASH;
	if(__map_reserved["name"] != null) {
		return _this.getReserved("name");
	} else {
		return _this.h["name"];
	}
};
troshx_tros_WeaponSheet.prototype = {
	__class__: troshx_tros_WeaponSheet
};
var troshx_util_LibUtil = function() { };
troshx_util_LibUtil.__name__ = true;
troshx_util_LibUtil.validInt = function(val) {
	if(val != null) {
		return !isNaN(val);
	} else {
		return false;
	}
};
troshx_util_LibUtil["as"] = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
troshx_util_LibUtil.asNoInline = function(obj,type) {
	if(js_Boot.__instanceof(obj,type)) {
		return obj;
	} else {
		return null;
	}
};
troshx_util_LibUtil.tryParseFloat = function(val) {
	return parseFloat(val);
};
troshx_util_LibUtil.tryParseInt = function(val) {
	return Std.parseInt(val);
};
troshx_util_LibUtil.field = function(of,field) {
	return of[field];
};
troshx_util_LibUtil.setField = function(of,field,value) {
	of[field] = value;
};
troshx_util_LibUtil.setFieldChain = function(of,field,value) {
	of[field] = value;
	return value;
};
troshx_util_LibUtil.arrayToList = function(arr) {
	var list = new List();
	var _g = 0;
	while(_g < arr.length) {
		var val = arr[_g];
		++_g;
		list.add(val);
	}
	return list;
};
troshx_util_LibUtil.getArrayItemAtIndex = function(arr,index) {
	return arr[index];
};
troshx_util_LibUtil.getListItemAtIndex = function(list,index) {
	if(index < 0 || index >= list.length) {
		return null;
	}
	var iter_head = list.h;
	var _g1 = 0;
	var _g = index;
	while(_g1 < _g) {
		var i = _g1++;
		var val = iter_head.item;
		iter_head = iter_head.next;
	}
	var val1 = iter_head.item;
	iter_head = iter_head.next;
	return val1;
};
troshx_util_LibUtil.clearArray = function(arr) {
	arr.length = 0;
};
troshx_util_LibUtil.truncateArray = function(arr,fromIndex) {
	arr.length = fromIndex;
};
troshx_util_LibUtil.findForList = function(list,f) {
	var _g_head = list.h;
	while(_g_head != null) {
		var val = _g_head.item;
		_g_head = _g_head.next;
		var i = val;
		if(f(i)) {
			return i;
		}
	}
	return null;
};
troshx_util_LibUtil.minI = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.maxI = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.minI_ = function(a,b) {
	if(a < b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.maxI_ = function(a,b) {
	if(a >= b) {
		return a;
	} else {
		return b;
	}
};
troshx_util_LibUtil.removeArrayItemAtIndex = function(arr,index) {
	arr.splice(index,1);
};
var troshx_util_StringHashId = function() { };
troshx_util_StringHashId.__name__ = true;
troshx_util_StringHashId.get = function() {
	return "i" + troshx_util_StringHashId.COUNT++;
};
var $_, $fid = 0;
function $bind(o,m) { if( m == null ) return null; if( m.__id__ == null ) m.__id__ = $fid++; var f; if( o.hx__closures__ == null ) o.hx__closures__ = {}; else f = o.hx__closures__[m.__id__]; if( f == null ) { f = function(){ return f.method.apply(f.scope, arguments); }; f.scope = o; f.method = m; o.hx__closures__[m.__id__] = f; } return f; }
String.prototype.__class__ = String;
String.__name__ = true;
Array.__name__ = true;
var Int = { __name__ : ["Int"]};
var Dynamic = { __name__ : ["Dynamic"]};
var Float = Number;
Float.__name__ = ["Float"];
var Bool = Boolean;
Bool.__ename__ = ["Bool"];
var Class = { __name__ : ["Class"]};
var Enum = { };
var __map_reserved = {}
msignal_SlotList.NIL = new msignal_SlotList(null,null);
haxevx_vuex_core_ModuleStack.stack = [];
js_Boot.__toStr = ({ }).toString;
troshx_components_FightState.__meta__ = { fields : { target : { ref : null}}};
troshx_components_FightState.GOT_INITIATIVE = 2;
troshx_components_FightState.CONTESTING_INITIATIVE = 1;
troshx_components_FightState.NO_INITIATIVE = 0;
troshx_components_FightState.REROLL_INITIATIVE = -1;
troshx_components_FightState.UNCERTAIN_INITATIVE = -10;
troshx_components_FightState.UNCERTAIN_INITIATIVE_RESOLVED = 10;
troshx_components_FightState.ORIENTATION_NONE = 0;
troshx_components_FightState.ORIENTATION_DEFENSIVE = 1;
troshx_components_FightState.ORIENTATION_CAUTIOUS = 2;
troshx_components_FightState.ORIENTATION_AGGRESSIVE = 3;
troshx_components_FightState.ORIENTATION_STRINGS = ["None","Defensive","Cautious","Aggressive"];
troshx_core_BodyChar.D_DESTROY_PART = 1;
troshx_core_BodyChar.D_DEATH = 2;
troshx_core_BodyChar.WOUND_TYPE_CUT = 1;
troshx_core_BodyChar.WOUND_TYPE_PIERCE = 2;
troshx_core_BodyChar.WOUND_TYPE_BLUNT_TRAUMA = 4;
troshx_core_BodyChar.WOUND_D_DESTROY = 1;
troshx_core_BodyChar.WOUND_D_DEATH = 2;
troshx_core_Manuever.EVASIVE_TRUE = 1;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE = 2;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE_TARGET = 4;
troshx_core_Manuever.EVASIVE_UNTARGET_FROM_ENEMY = 8;
troshx_core_Manuever.EVASIVE_UNTARGET = 16;
troshx_core_Manuever.EVASIVE_NO_INITAITIVE_MUTUAL = 6;
troshx_core_Manuever.EVASIVE_UNTARGET_MUTUAL = 24;
troshx_core_Manuever.MANUEVER_HAND_NONE = 0;
troshx_core_Manuever.MANUEVER_HAND_MASTER = 1;
troshx_core_Manuever.MANUEVER_HAND_SECONDARY = 2;
troshx_core_Manuever.MANUEVER_HAND_BOTH = 3;
troshx_core_Manuever.MANUEVER_TYPE_MELEE = 0;
troshx_core_Manuever.MANUEVER_TYPE_RANGED = 1;
troshx_core_Manuever.DAMAGE_TYPE_NONE = 0;
troshx_core_Manuever.DAMAGE_TYPE_CUTTING = 1;
troshx_core_Manuever.DAMAGE_TYPE_PUNCTURING = 2;
troshx_core_Manuever.DAMAGE_TYPE_BLUDGEONING = 3;
troshx_core_Manuever.ATTACK_TYPE_STRIKE = 1;
troshx_core_Manuever.ATTACK_TYPE_THRUST = 2;
troshx_core_Manuever.DEFEND_TYPE_OFFHAND = 1;
troshx_core_Manuever.DEFEND_TYPE_MASTERHAND = 2;
troshx_core_Manuever.TYPE_NONE = 0;
troshx_core_Manuever.TYPE_DEFENSIVE = 1;
troshx_core_Manuever.TYPE_OFFENSIVE = 2;
troshx_core_Weapon.__rtti = "<class path=\"troshx.core.Weapon\" params=\"\">\n\t<ATTR_BASE_NONE public=\"1\" get=\"inline\" set=\"null\" expr=\"-1\" line=\"39\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>-1</e></m></meta>\n\t</ATTR_BASE_NONE>\n\t<ATTR_BASE_STRENGTH public=\"1\" get=\"inline\" set=\"null\" expr=\"0\" line=\"40\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>0</e></m></meta>\n\t</ATTR_BASE_STRENGTH>\n\t<HOOK_STRIKE get=\"inline\" set=\"null\" expr=\"1\" line=\"42\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>1</e></m></meta>\n\t</HOOK_STRIKE>\n\t<HOOK_THRUST get=\"inline\" set=\"null\" expr=\"2\" line=\"43\" static=\"1\">\n\t\t<x path=\"Int\"/>\n\t\t<meta><m n=\":value\"><e>2</e></m></meta>\n\t</HOOK_THRUST>\n\t<createDyn public=\"1\" set=\"method\" line=\"129\" static=\"1\"><f a=\"name:profGroups:properties\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<d/>\n\t<c path=\"troshx.core.Weapon\"/>\n</f></createDyn>\n\t<atn public=\"1\"><x path=\"Int\"/></atn>\n\t<atn2 public=\"1\"><x path=\"Int\"/></atn2>\n\t<dtn public=\"1\"><x path=\"Int\"/></dtn>\n\t<dntT public=\"1\"><x path=\"Int\"/></dntT>\n\t<dtn2 public=\"1\"><x path=\"Int\"/></dtn2>\n\t<damage public=\"1\"><x path=\"Int\"/></damage>\n\t<damage2 public=\"1\"><x path=\"Int\"/></damage2>\n\t<damage3 public=\"1\"><x path=\"Int\"/></damage3>\n\t<shield public=\"1\"><x path=\"Bool\"/></shield>\n\t<profeciencies public=\"1\"><c path=\"Array\"><c path=\"String\"/></c></profeciencies>\n\t<name public=\"1\"><c path=\"String\"/></name>\n\t<drawCutModifier public=\"1\"><x path=\"Int\"/></drawCutModifier>\n\t<attrBaseIndex public=\"1\"><x path=\"Int\"/></attrBaseIndex>\n\t<twoHanded public=\"1\"><x path=\"Bool\"/></twoHanded>\n\t<rangedWeapon public=\"1\"><x path=\"Bool\"/></rangedWeapon>\n\t<cpPenalty public=\"1\"><x path=\"Float\"/></cpPenalty>\n\t<movePenalty public=\"1\"><x path=\"Float\"/></movePenalty>\n\t<shieldLimit public=\"1\"><x path=\"Int\"/></shieldLimit>\n\t<blunt public=\"1\"><x path=\"Bool\"/></blunt>\n\t<range public=\"1\"><x path=\"Int\"/></range>\n\t<hooking public=\"1\"><x path=\"Int\"/></hooking>\n\t<getDamageTo public=\"1\" set=\"method\" line=\"46\"><f a=\"body:manuever:targetZone:margin:strength\">\n\t<c path=\"troshx.core.BodyChar\"/>\n\t<c path=\"troshx.core.Manuever\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n\t<x path=\"Int\"/>\n</f></getDamageTo>\n\t<getHookingATN public=\"1\" set=\"method\" line=\"65\">\n\t\t<f a=\"?tieBiasToThrust\" v=\"false\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ tieBiasToThrust : false }</e></m></meta>\n\t</getHookingATN>\n\t<getHookingATNType public=\"1\" set=\"method\" line=\"79\">\n\t\t<f a=\"?tieBiasToThrust\" v=\"false\">\n\t\t\t<x path=\"Bool\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ tieBiasToThrust : false }</e></m></meta>\n\t</getHookingATNType>\n\t<getInlineTest public=\"1\" get=\"inline\" set=\"null\" line=\"87\"><f a=\"\"><x path=\"Float\"/></f></getInlineTest>\n\t<weaponListInlineTest public=\"1\"><c path=\"Array\"><c path=\"troshx.core.Weapon\"/></c></weaponListInlineTest>\n\t<getInlineTest2 public=\"1\" get=\"inline\" set=\"null\" line=\"97\">\n\t\t<f a=\"?val:?val2\" v=\"0:5\">\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t\t<x path=\"Int\"/>\n\t\t</f>\n\t\t<meta><m n=\":value\"><e>{ val2 : 5, val : 0 }</e></m></meta>\n\t</getInlineTest2>\n\t<new public=\"1\" set=\"method\" line=\"106\"><f a=\"name:profGroups\">\n\t<c path=\"String\"/>\n\t<c path=\"Array\"><c path=\"String\"/></c>\n\t<x path=\"Void\"/>\n</f></new>\n\t<meta>\n\t\t<m n=\":directlyUsed\"/>\n\t\t<m n=\":expose\"/>\n\t\t<m n=\":rtti\"/>\n\t</meta>\n</class>";
troshx_core_Weapon.ATTR_BASE_NONE = -1;
troshx_core_Weapon.ATTR_BASE_STRENGTH = 0;
troshx_core_Weapon.HOOK_STRIKE = 1;
troshx_core_Weapon.HOOK_THRUST = 2;
troshx_sos_core_BoonBane.__GOOD_EYES__BAD_EYES = 1;
troshx_sos_core_BoonBane.__GOOD_EARS_BAD_EARS = 2;
troshx_sos_core_BoonBane.__GOOD_EARS_BAD_NOSE = 4;
troshx_sos_core_BoonBane.__RICH__POOR = 8;
troshx_sos_core_BoonBane.__TRUE_GRIT = 16;
troshx_sos_core_BoonBane.__ROBUST_FRAIL = 32;
troshx_sos_core_BoonBane.__BLIND__ONE_EYED_BANE = 64;
troshx_sos_core_BoonBane.__CRAVEN__HONORABLE = 128;
troshx_sos_core_BoonBane.__SHELTERED = 256;
troshx_sos_core_BoonBane.__HONORABLE__COMPLETE_MONSTER = 512;
troshx_sos_core_BoonBane.__TALL__SHORT = 1024;
troshx_sos_core_BoonBane.CHARACTER_CREATION_ONLY = 1;
troshx_sos_core_BoonBane.CANNOT_BE_REMOVED = 2;
troshx_sos_core_BoonBane.TIMES_INFINITE = -1;
troshx_sos_core_BoonBane.TIMES_VARYING = -2;
troshx_sos_bnb_Allies.COST_1 = 1;
troshx_sos_bnb_Allies.COST_2 = 5;
troshx_sos_bnb_Allies.COST_3 = 10;
troshx_sos_core_BaneAssign.MAX_BANE_EARNABLE = 15;
troshx_sos_bnb_Wanted.ALIVE = 1;
troshx_sos_bnb_Wanted.DEAD = 2;
troshx_sos_bnb_Wanted.ALIVE_ALIVE = 3;
troshx_sos_bnb_Estate.WEALTH_PER_QTY = 2;
troshx_sos_bnb_BrokenLimbAssign.LEFT_ARM = 1;
troshx_sos_bnb_BrokenLimbAssign.RIGHT_ARM = 2;
troshx_sos_bnb_BrokenLimbAssign.LEFT_LEG = 4;
troshx_sos_bnb_BrokenLimbAssign.RIGHT_LEG = 8;
troshx_sos_bnb_BrokenLimbAssign.BOTH_LEGS = 12;
troshx_sos_bnb_CrippledLimbAssign.LEFT_ARM = 1;
troshx_sos_bnb_CrippledLimbAssign.RIGHT_ARM = 2;
troshx_sos_bnb_CrippledLimbAssign.LEFT_LEG = 4;
troshx_sos_bnb_CrippledLimbAssign.RIGHT_LEG = 8;
troshx_sos_bnb_CrippledLimbAssign.BOTH_LEGS = 12;
troshx_sos_bnb_CrippledLimbAssign.BOTH_ARMS = 3;
troshx_sos_bnb_Debt.CASH_MULTIPLIERS = [1,1.5,2];
troshx_sos_bnb_Favor.COST_1 = 1;
troshx_sos_bnb_Favor.COST_2 = 3;
troshx_sos_bnb_ImpressiveVoice.COST = 2;
troshx_sos_bnb_ImpressiveVoiceAssign.POWERFUL = 1;
troshx_sos_bnb_ImpressiveVoiceAssign.GRATING = 2;
troshx_sos_bnb_ImpressiveVoiceAssign.SOOTHING = 4;
troshx_sos_bnb_Language.COST_SINGLE = 1;
troshx_sos_bnb_Language.COST_2 = 2;
troshx_sos_bnb_Language.COST_3 = 3;
troshx_sos_bnb_LastingPain.COST_MINOR = 4;
troshx_sos_bnb_LastingPain.COST_MAJOR = 8;
troshx_sos_bnb_SeveredLimb.COST_3 = 18;
troshx_sos_bnb_SeveredLimb.COST_2 = 15;
troshx_sos_bnb_SeveredLimb.COST_1 = 10;
troshx_sos_bnb_SeveredLimbAssign.HAND = 17;
troshx_sos_bnb_SeveredLimbAssign.LOWER_ARM = 229376;
troshx_sos_bnb_SeveredLimbAssign.FULL_ARM = 245776;
troshx_sos_bnb_SeveredLimbAssign.FOOT = 13;
troshx_sos_bnb_SeveredLimbAssign.LOWER_LEG = 14336;
troshx_sos_bnb_SeveredLimbAssign.FULL_LEG = 15360;
troshx_sos_bnb_SeveredLimbAssign.LEVEL_1_AREAS = 29;
troshx_sos_bnb_SeveredLimbAssign.LEVEL_2_AREAS = 243712;
troshx_sos_bnb_SeveredLimbAssign.LEVEL_3_AREAS = 261136;
troshx_sos_chargen_CharGenData.INT_MAX = 2147483647;
troshx_sos_chargen_CharGenData.CATEGORY_RACE = 0;
troshx_sos_chargen_CharGenData.CATEGORY_ATTRIBUTES = 1;
troshx_sos_chargen_CharGenData.CATEGORY_BNB = 2;
troshx_sos_chargen_CharGenData.ATTRIBUTE_START_MAX = 8;
troshx_sos_chargen_CharGenData.MORTAL_MAX = 12;
troshx_sos_core_Item.UID_COUNT = 0;
troshx_sos_core_Item.FLAG_TWO_HANDED = 1;
troshx_sos_core_Item.FLAG_STRAPPED = 2;
troshx_sos_core_Item.EYE_CORRECTIVE = 4;
troshx_sos_core_Item.CRUTCH = 8;
troshx_sos_core_Item.MASK_HANDED = 3;
troshx_sos_core_Item.CP = 0;
troshx_sos_core_Item.SP = 1;
troshx_sos_core_Item.GP = 2;
troshx_sos_core_Armor.HALF = 1;
troshx_sos_core_Armor.WEAK_SPOT = 2;
troshx_sos_core_Armor.WEAK_SPOT_SYMBOL = "☄";
troshx_sos_core_ArmorSpecial.HARD = 1;
troshx_sos_core_ArmorSpecial.MAIL = 2;
troshx_sos_core_ArmorSpecial.TEXTILE = 4;
troshx_sos_core_ArmorSpecial.BULLETPROOF = 8;
troshx_sos_core_Humanoid.SWING_DOWNWARD_HEAD = 0;
troshx_sos_core_Humanoid.SWING_UPWARD_HEAD = 1;
troshx_sos_core_Humanoid.SWING_NECK = 2;
troshx_sos_core_Humanoid.SWING_TORSO = 3;
troshx_sos_core_Humanoid.SWING_UPPER_ARM = 4;
troshx_sos_core_Humanoid.SWING_LOWER_ARM = 5;
troshx_sos_core_Humanoid.SWING_UPPER_LEG = 6;
troshx_sos_core_Humanoid.SWING_LOWER_LEG = 7;
troshx_sos_core_Humanoid.SWING_GROIN = 8;
troshx_sos_core_Humanoid.thrustStartIndex = 9;
troshx_sos_core_Humanoid.THRUST_HEAD = 9;
troshx_sos_core_Humanoid.THRUST_NECK = 10;
troshx_sos_core_Humanoid.THRUST_CHEST = 11;
troshx_sos_core_Humanoid.THRUST_BELLY = 12;
troshx_sos_core_Humanoid.THRUST_UPPER_ARM = 13;
troshx_sos_core_Humanoid.THRUST_LOWER_ARM = 14;
troshx_sos_core_Humanoid.THRUST_GROIN = 15;
troshx_sos_core_Humanoid.THRUST_UPPER_LEG = 16;
troshx_sos_core_Humanoid.THRUST_LOWER_LEG = 17;
troshx_sos_core_Humanoid.UPPER_HEAD = 0;
troshx_sos_core_Humanoid.FACE = 1;
troshx_sos_core_Humanoid.LOWER_HEAD = 2;
troshx_sos_core_Humanoid.NECK = 3;
troshx_sos_core_Humanoid.SHOULDER = 4;
troshx_sos_core_Humanoid.CHEST = 5;
troshx_sos_core_Humanoid.SIDE = 6;
troshx_sos_core_Humanoid.BELLY = 7;
troshx_sos_core_Humanoid.HIP = 8;
troshx_sos_core_Humanoid.GROIN = 9;
troshx_sos_core_Humanoid.THIGH = 10;
troshx_sos_core_Humanoid.KNEE = 11;
troshx_sos_core_Humanoid.SHIN = 12;
troshx_sos_core_Humanoid.FOOT = 13;
troshx_sos_core_Humanoid.UPPER_ARM = 14;
troshx_sos_core_Humanoid.ELBOW = 15;
troshx_sos_core_Humanoid.FOREARM = 16;
troshx_sos_core_Humanoid.HAND = 17;
troshx_sos_core_Humanoid.UPPER_BACK = 18;
troshx_sos_core_Humanoid.LOWER_BACK = 19;
troshx_sos_core_Humanoid.FULL_ARM = 245776;
troshx_sos_core_Humanoid.FULL_LEG = 15360;
troshx_sos_core_Humanoid.FULL_TORSO = 480;
troshx_sos_core_Humanoid.LOWER_ARM = 229376;
troshx_sos_core_Humanoid.LOWER_LEG = 14336;
troshx_sos_core_SpanningTool.HAND = 0;
troshx_sos_core_SpanningTool.LEVER = 1;
troshx_sos_core_SpanningTool.SCREW = 2;
troshx_sos_core_SpanningTool.STIRRUP = 3;
troshx_sos_core_SpanningTool.WINDLASS = 4;
troshx_sos_core_SpanningTool.WINCH = 5;
troshx_sos_core_SpanningTool.CRANK = 6;
troshx_sos_core_DamageType.CUTTING = 0;
troshx_sos_core_DamageType.PIERCING = 1;
troshx_sos_core_DamageType.BLUDGEONING = 2;
troshx_sos_core_DamageType.UNARMED = 3;
troshx_sos_core_DamageType.FALLING = 4;
troshx_sos_core_DamageType.BURN = 5;
troshx_sos_core_DamageType.ELECTRICAL = 6;
troshx_sos_core_DamageType.COLD = 7;
troshx_sos_core_FiringMechanism.CAPLOCK = 0;
troshx_sos_core_FiringMechanism.FIRELOCK = 1;
troshx_sos_core_FiringMechanism.FLINTLOCK = 2;
troshx_sos_core_FiringMechanism.MATCHLOCK = 3;
troshx_sos_core_FiringMechanism.NEEDLEFIRE = 4;
troshx_sos_core_FiringMechanism.SNAPLOCK = 5;
troshx_sos_core_FiringMechanism.WHEELOCK = 6;
troshx_sos_core_Weapon.REACH_HA = 1;
troshx_sos_core_Weapon.REACH_H = 2;
troshx_sos_core_Weapon.REACH_S = 3;
troshx_sos_core_Weapon.REACH_M = 4;
troshx_sos_core_Weapon.REACH_L = 5;
troshx_sos_core_Weapon.REACH_VL = 6;
troshx_sos_core_Weapon.REACH_EL = 7;
troshx_sos_core_Weapon.REACH_LL = 8;
troshx_sos_core_Ammunition.BALL = 0;
troshx_sos_core_Ammunition.BUCK_AND_BALL = 1;
troshx_sos_core_Ammunition.HEAVY_SHOT = 2;
troshx_sos_core_Ammunition.RIFLE_BALL = 3;
troshx_sos_core_Ammunition.SHOT = 4;
troshx_sos_core_Ammunition.SPIKE = 5;
troshx_sos_core_LoadingMechanism.MANUAL = 0;
troshx_sos_core_LoadingMechanism.BRASS_CATRIDGE = 1;
troshx_sos_core_LoadingMechanism.PAPER_CATRIDGE = 2;
troshx_sos_core_LoadingMechanism.PAPER_MACHE_CATRIDGE = 3;
troshx_sos_core_Inventory.HELD_MASTER = 1;
troshx_sos_core_Inventory.HELD_OFF = 2;
troshx_sos_core_Inventory.HELD_BOTH = 3;
troshx_sos_core_Inventory.UNHELD_UNSPECIFIED = 0;
troshx_sos_core_Inventory.UNHELD_SHEATH_HOLSTER = 1;
troshx_sos_core_Inventory.UNHELD_STRAPPED_ARM = 2;
troshx_sos_core_Inventory.UNHELD_STRAPPED_SHOULDER = 3;
troshx_sos_core_Inventory.UNHELD_BACK = 4;
troshx_sos_core_Inventory.UNHELD_CONCEALED = 5;
troshx_sos_core_Inventory.UNHELD_FORCE_DISABLED = 6;
troshx_sos_core_Inventory.PREFER_UNHELD_PACKED = 1;
troshx_sos_core_Inventory.PREFER_UNHELD_DROPPED = 2;
troshx_sos_core_Inventory.PREFER_UNHELD_EQUIPPED = 4;
troshx_sos_core_Inventory.UID_COUNT = 0;
troshx_sos_core_MeleeSpecial.BRACE = 1;
troshx_sos_core_MeleeSpecial.CALVARY_SWORD = 2;
troshx_sos_core_MeleeSpecial.COMPANION_WEAPON = 4;
troshx_sos_core_MeleeSpecial.COUCHED_CHARGE = 8;
troshx_sos_core_MeleeSpecial.FLUID_THRUSTS = 16;
troshx_sos_core_MeleeSpecial.FORWARD_SWEPT = 32;
troshx_sos_core_MeleeSpecial.FREAKISHLY_LARGE = 64;
troshx_sos_core_MeleeSpecial.HAND_OFF = 128;
troshx_sos_core_MeleeSpecial.HEAVY_WEAPON = 256;
troshx_sos_core_MeleeSpecial.HOOK = 512;
troshx_sos_core_MeleeSpecial.LIGHT_BLADE = 1024;
troshx_sos_core_MeleeSpecial.PARRYING_TEETH = 2048;
troshx_sos_core_MeleeSpecial.SWINGING_SLOT = 4096;
troshx_sos_core_MeleeSpecial.THIN_BLADE = 8192;
troshx_sos_core_MeleeSpecial.THRUSTING_SLOT = 16384;
troshx_sos_core_MeleeSpecial.TIGHT_GRIP = 32768;
troshx_sos_core_MeleeSpecial.WEAPON_ATTACHMENT = 65536;
troshx_sos_core_MeleeSpecial.TOTAL_FLAGS = 17;
troshx_sos_core_MissileSpecial.BLUDGEON = 1;
troshx_sos_core_MissileSpecial.NARROW = 2;
troshx_sos_core_MissileSpecial.SHIELD_STICK = 4;
troshx_sos_core_MissileSpecial.AP_FIRST_HIT_ONLY = 8;
troshx_sos_core_MissileSpecial.CHEAT_ATTACHMENT = 16;
troshx_sos_core_MissileSpecial.TOTAL_FLAGS = 5;
troshx_sos_core_Modifier.ATTR_STR = 0;
troshx_sos_core_Modifier.ATTR_AGI = 1;
troshx_sos_core_Modifier.ATTR_END = 2;
troshx_sos_core_Modifier.ATTR_HLT = 3;
troshx_sos_core_Modifier.ATTR_WIL = 4;
troshx_sos_core_Modifier.ATTR_WIT = 5;
troshx_sos_core_Modifier.ATTR_INT = 6;
troshx_sos_core_Modifier.ATTR_PER = 7;
troshx_sos_core_Modifier.CMP_ADR = 8;
troshx_sos_core_Modifier.CMP_MOB = 9;
troshx_sos_core_Modifier.CMP_CAR = 10;
troshx_sos_core_Modifier.CMP_CHA = 11;
troshx_sos_core_Modifier.CMP_TOU = 12;
troshx_sos_core_Modifier.CP = 13;
troshx_sos_core_Modifier.REACH = 14;
troshx_sos_core_Modifier.MP = 15;
troshx_sos_core_Modifier.STARTING_WEALTH = 16;
troshx_sos_core_Modifier.STARTING_MONEY = 17;
troshx_sos_core_Modifier.STARTING_GRIT = 18;
troshx_sos_core_Profeciency.TYPE_MELEE = 0;
troshx_sos_core_Profeciency.TYPE_RANGED = 1;
troshx_sos_core_Profeciency.M_1H_SWORD = 0;
troshx_sos_core_Profeciency.M_1H_BLUNT = 1;
troshx_sos_core_Profeciency.M_2H_BLUNT = 2;
troshx_sos_core_Profeciency.M_2H_SWORD = 3;
troshx_sos_core_Profeciency.M_SPEAR = 4;
troshx_sos_core_Profeciency.M_POLEARM = 5;
troshx_sos_core_Profeciency.M_DAGGER = 6;
troshx_sos_core_Profeciency.M_WRESTLING = 7;
troshx_sos_core_Profeciency.M_PUGILISM = 8;
troshx_sos_core_Profeciency.TOTAL_M = 9;
troshx_sos_core_Profeciency.R_BOW = 0;
troshx_sos_core_Profeciency.R_SLING = 1;
troshx_sos_core_Profeciency.R_CROSSBOW = 2;
troshx_sos_core_Profeciency.R_FIREARM = 3;
troshx_sos_core_Profeciency.R_THROWING = 4;
troshx_sos_core_Profeciency.TOTAL_R = 5;
troshx_sos_core_Profeciency.SEPERATOR = "_$_";
troshx_sos_core_Shield.SIZE_SMALL = 0;
troshx_sos_core_Shield.SIZE_MEDIUM = 1;
troshx_sos_core_Shield.SIZE_LARGE = 2;
troshx_sos_core_Shield.STRAP_ARM = 0;
troshx_sos_core_Shield.STRAP_SHOULDER = 1;
troshx_sos_core_Skill.ATTRIB_NONE = 0;
troshx_sos_core_Skill.ATTRIB_STR = 1;
troshx_sos_core_Skill.ATTRIB_AGI = 2;
troshx_sos_core_Skill.ATTRIB_END = 3;
troshx_sos_core_Skill.ATTRIB_HLT = 4;
troshx_sos_core_Skill.ATTRIB_WIL = 5;
troshx_sos_core_Skill.ATTRIB_WIT = 6;
troshx_sos_core_Skill.ATTRIB_INT = 7;
troshx_sos_core_Skill.ATTRIB_PER = 8;
troshx_sos_core_Skill.ATTRIB_VARIOUS = -1;
troshx_sos_core_CustomMelee.PISTOL = 1;
troshx_sos_core_CustomMelee.DRAGON = 2;
troshx_sos_core_CustomMelee.CUSTOM_HILT = 1;
troshx_sos_core_CustomMelee.RIDICULOUSLY_SHARP = 2;
troshx_sos_core_CustomMelee.EXQUISITE_DECORATION = 4;
troshx_sos_core_CustomMelee.BIZARRE_GIMMICK = 8;
troshx_sos_core_Wound.UNIQUE_COUNT = 0;
troshx_sos_sheets_CharSheet.GENDER_MALE = 0;
troshx_sos_sheets_CharSheet.GENDER_FEMALE = 1;
troshx_sos_vue_inputs_NumericInput.TEMPLATE = "<input type=\"number\" number :value=\"obj[prop]\" v-on:input=\"inputHandler($" + "event.target)\" :class=\"{invalid:!valid}\" :min=\"min\" :max=\"max\"></input>";
troshx_sos_vue_inputs_impl_AttributeInput.NAME = "AttributeInput";
troshx_sos_vue_inputs_impl_BoonBaneInput.NAME = "BoonBaneInput";
troshx_sos_vue_inputs_impl_CategoryPCPInput.NAME = "CategoryPCPInput";
troshx_sos_vue_uifields_ArrayOf.NAME = "ArrayOf";
troshx_sos_vue_uifields_Bitmask.NAME = "Bitmask";
troshx_sos_vue_uifields_FieldInt.NAME = "FieldInt";
troshx_sos_vue_uifields_FieldNumber.NAME = "FieldNumber";
troshx_sos_vue_uifields_FieldString.NAME = "FieldString";
troshx_sos_vue_uifields_FieldTextArea.NAME = "FieldTextArea";
troshx_sos_vue_uifields_HitLocationMultiSelector.NAME = "HitLocationMultiSelector";
troshx_sos_vue_uifields_HitLocationSelector.NAME = "HitLocationSelector";
troshx_sos_vue_uifields_MoneyField.NAME = "Money";
troshx_sos_vue_uifields_SingleSelection.NAME = "SingleSelection";
troshx_sos_vue_widgets_BoonBaneApplyDetails.NAME = "bb-apply";
troshx_tros_ManueverSheet.offensiveMelee = troshx_tros_ManueverSheet.setAsOffensiveList([new troshx_core_Manuever("cut","Cut")._dmgType(1)._atkTypes(1),new troshx_core_Manuever("cut2","Greater Cut",1)._dmgType(1)._atkTypes(1)._customDamage(troshx_tros_ManueverSheet.damageMod_add1),new troshx_core_Manuever("bash","Bash")._dmgType(3)._atkTypes(1),new troshx_core_Manuever("bash2","Greater Bash",1)._dmgType(3)._atkTypes(1)._customDamage(troshx_tros_ManueverSheet.damageMod_add1),new troshx_core_Manuever("beat","Beat")._lev(4)._atkTypes(1)._customRequire()._customResolve(),new troshx_core_Manuever("bindstrike","Bind and Strike")._customRequire()._customResolve(),new troshx_core_Manuever("thrust","Thrust")._customReflex()._dmgType(2)._atkTypes(2),new troshx_core_Manuever("spike","Spike")._dmgType(3)._atkTypes(2),new troshx_core_Manuever("spike2","Greater Spike",1)._dmgType(3)._atkTypes(2)._customDamage(troshx_tros_ManueverSheet.damageMod_add1),new troshx_core_Manuever("punch","Punch")._tn(5)._range(1)._dmgType(3)._customDamage(),new troshx_core_Manuever("kick","Kick")._dmgType(3)._tn(7)._customDamage()._range(2)._regions(0)._rangeMin(1),new troshx_core_Manuever("disarm","Disarm",1)._lev(4)._customRequire()._atkTypes(1)._customResolve(),new troshx_core_Manuever("doubleattack","Double Attack")._customRequire()._customSplit(),new troshx_core_Manuever("drawcut","Draw Cut")._lev(2)._atkTypes(1)._dmgType(1)._customDamage()._customRange()._customRequire(),new troshx_core_Manuever("evasiveattack","Evasive Attack")._lev(6)._atkTypes(1)._customRequire()._customPreResolve(),new troshx_core_Manuever("feintandthrust","Feint and Thrust")._lev(3)._atkTypes(2)._customPreResolve()._spamPenalize(1,true),new troshx_core_Manuever("feintandcut","Feint and Cut")._lev(5)._atkTypes(1)._customPreResolve()._spamPenalize(1,true),new troshx_core_Manuever("grapple","Grapple")._tn(5)._customResolve(),new troshx_core_Manuever("headbutt","Head Butt")._tn(6)._range(1)._regions(0)._dmgType(3)._customDamage(),new troshx_core_Manuever("hook","Hook")._customResolve()._regions(0),new troshx_core_Manuever("masterstrike","Master Strike")._lev(15)._customRequire()._customSplit(),new troshx_core_Manuever("murderstroke","Murder Stroke")._lev(5)._tn(6)._range(1)._customRequire()._regions(0)._dmgType(3)._atkTypes(1)._customPreResolve()._customDamage(),new troshx_core_Manuever("pommelbash","Pommel Bash")._lev(5)._tn(7)._range(1)._customRequire()._dmgType(3)._customDamage(),new troshx_core_Manuever("quickdraw","Quick Draw")._lev(6)._customResolve(),new troshx_core_Manuever("blockstrike","Block & Strike")._customRequire()._customSplit()._stanceModifier(0),new troshx_core_Manuever("stopshort","Stop Short")._lev(3)._customResolve()._spamPenalize(1),new troshx_core_Manuever("toss","Toss")._customRequire()._tn(7)._customResolve(),new troshx_core_Manuever("twitching","Twitching")._lev(8)._customSplit()._customResolve()]);
troshx_tros_ManueverSheet.defensiveMelee = troshx_tros_ManueverSheet.setAsDefensiveList([new troshx_core_Manuever("block","Block")._atkTypes(1),new troshx_core_Manuever("parry","Parry")._atkTypes(2),new troshx_core_Manuever("fullevade","Full Evasion")._tn(4)._stanceModifier(0)._evasive(30),new troshx_core_Manuever("partialevade","Partial Evasion")._tn(7)._evasive(2),new troshx_core_Manuever("duckweave","Duck & Weave")._tn(9)._customResolve()._evasive(0),new troshx_core_Manuever("blockopenstrike","Block Open and Strike")._lev(6)._atkTypes(1)._customResolve()._stanceModifier(0),new troshx_core_Manuever("counter","Counter")._atkTypes(2)._customResolve(),new troshx_core_Manuever("disarm","Disarm",1)._lev(4)._atkTypes(2)._customResolve(),new troshx_core_Manuever("expulsion","Expulsion")._lev(5)._atkTypes(2)._customResolve(),new troshx_core_Manuever("grapple","Grapple")._tn(5)._customResolve(),new troshx_core_Manuever("masterstrike","Master Strike")._lev(15)._customRequire()._customSplit(),new troshx_core_Manuever("overrun","Overrun")._lev(12)._tn(7)._customSplit(),new troshx_core_Manuever("quickdraw","Quick Draw")._lev(6)._atkTypes(2)._customResolve(),new troshx_core_Manuever("rota","Rota")._customRequire()._lev(3)._atkTypes(2)._customResolve()]);
troshx_tros_ManueverSheet.offensiveMeleeHash = troshx_tros_ManueverSheet.createHashIndex(troshx_tros_ManueverSheet.offensiveMelee);
troshx_tros_ManueverSheet.defensiveMeleeHash = troshx_tros_ManueverSheet.createHashIndex(troshx_tros_ManueverSheet.defensiveMelee);
troshx_tros_ProfeciencySheet.LIST = [new troshx_core_Profeciency("swordshield","Sword and Shield",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["bindstrike","cut","cut2","feintcut","feintthrust","blockstrike","thrust","thrust2","twitching","masterstrike","disarm"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["block","blockopenstrike","counter","parry","disarm","masterstrike","overrun","parry","rota"]),{ "blockopenstrike" : 2, "masterstrike" : 6},{ "blockopenstrike" : 2, "counter" : [3,2], "disarm" : 3, "masterstrike" : 6, "overrun" : 4, "parry" : [1,0], "rota" : 2},{ "caserapiers" : 4, "cutthrust" : 2, "dagger" : 2, "doppelhander" : 4, "greatlongsword" : 2, "massweaponshield" : 1, "polearms" : 4, "poleaxe" : 4, "pugilism" : 4, "rapier" : 4, "wrestling" : 4}),new troshx_core_Profeciency("cutthrust","Cut and Thrust",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["beat","bindstrike","cut","disarm","doubleattack","drawcut","feint","masterstrike","quickdraw","blockstrike","stopshort","thrust","toss","twitch"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["block","counter","disarm","expulsion","grapple","masterstrike","overrun","parry","rota"]),{ "disarm" : 1, "masterstrike" : 6, "quickdraw" : 2, "twitch" : 2},{ "counter" : 2, "disarm" : 3, "expulsion" : 2, "grapple" : 2, "masterstrike" : 6, "overrun" : 3},{ "caserapiers" : 3, "dagger" : 2, "doppelhander" : 4, "greatlongsword" : 3, "massweaponshield" : 2, "polearms" : 3, "poleaxe" : 4, "pugilism" : 2, "rapier" : 2, "swordshield" : 2, "wrestling" : 3}),new troshx_core_Profeciency("rapier","Rapier",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["beat","bindstrike","disarm","doubleattack","feintthrust","masterstrike","blockstrike","stopshort","thrust","toss"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["block","counter","disarm","expulsion","grapple","masterstrike","overrun","parry"]),{ "disarm" : 1, "feintthrust" : 1, "masterstrike" : 6},{ "counter" : 3, "disarm" : 3, "expulsion" : 2, "grapple" : 2, "masterstrike" : 6, "overrun" : 3, "parry" : 0},{ "caserapiers" : 1, "cutthrust" : 2, "dagger" : 2, "doppelhander" : 4, "greatlongsword" : 4, "massweaponshield" : 4, "polearms" : 3, "poleaxe" : 4, "pugilism" : 2, "swordshield" : 3, "wrestling" : 3}),new troshx_core_Profeciency("pugilism","Pugilism",troshx_tros_ManueverSheet.createOffensiveMeleeMaskFor(["disarm","grapple","kick","punch"]),troshx_tros_ManueverSheet.createDefensiveMeleeMaskFor(["disarm","grapple","parry"]),{ "disarm" : 2, "grapple" : [2,4], "kick" : 1},{ "disarm" : 4, "grapple" : 2},{ "caserapiers" : 4, "cutthrust" : 4, "dagger" : 1, "doppelhander" : 4, "greatlongsword" : 4, "massweaponshield" : 3, "polearms" : 4, "poleaxe" : 4, "rapier" : 3, "swordshield" : 4, "wrestling" : 1})];
troshx_tros_ProfeciencySheet.listHashIndexer = troshx_tros_ProfeciencySheet.createHashIndex(troshx_tros_ProfeciencySheet.LIST);
troshx_tros_WeaponSheet.LIST = [troshx_core_Weapon.createDyn("Short Sword",["cutthrust","swordshield"],{ "range" : 1, "atn" : 7, "atn2" : 5, "dtn" : 7, "damage" : -1, "damage2" : 1}),troshx_core_Weapon.createDyn("Kick",["pugilism"],{ "range" : 0, "atn" : 7, "dtn" : 8, "shieldLimit" : 1, "damage" : -1, "blunt" : true}),troshx_core_Weapon.createDyn("Punch",["pugilism"],{ "range" : 0, "atn" : 5, "dtn" : 6, "shieldLimit" : 1, "damage" : -2, "blunt" : true}),troshx_core_Weapon.createDyn("Gladius",["swordshield"],{ "range" : 1, "atn" : 6, "atn2" : 6, "dtn" : 7, "damage" : 0, "damage2" : 1, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Light Mace",["mace"],{ "range" : 1, "atn" : 6, "atn2" : 6, "dtn" : 7, "damage" : 1, "damage2" : 0, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Blunted Sword",["swordshield","cutthrust"],{ "range" : 2, "atn" : 6, "atn2" : 6, "dtn" : 6, "damage" : 0, "damage2" : 0, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Arming Sword",["swordshield","cutthrust"],{ "range" : 2, "atn" : 6, "atn2" : 7, "dtn" : 6, "damage" : 1, "damage2" : 0, "drawCutModifier" : 0}),troshx_core_Weapon.createDyn("Rapier",["rapier","caserapiers"],{ "range" : 3, "atn" : 7, "atn2" : 5, "dtn" : 8, "dtnT" : 6, "damage" : -3, "damage2" : 2, "drawCutModifier" : 1}),troshx_core_Weapon.createDyn("Hand Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 7, "dtn2" : 9}),troshx_core_Weapon.createDyn("Small Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 6, "dtn2" : 8}),troshx_core_Weapon.createDyn("Medium Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 5, "dtn2" : 7, "cpPenalty" : 0.5, "movePenalty" : 0.5}),troshx_core_Weapon.createDyn("Large Shield",["swordshield","massweaponshield"],{ "shield" : true, "dtn" : 5, "dtn2" : 6, "cpPenalty" : 0.5, "movePenalty" : 1})];
troshx_tros_WeaponSheet.HASH = troshx_tros_WeaponSheet.createHashLookupViaName(troshx_tros_WeaponSheet.LIST);
troshx_util_StringHashId.COUNT = 0;
MainSOSCharGenTest.main();
})(typeof exports != "undefined" ? exports : typeof window != "undefined" ? window : typeof self != "undefined" ? self : this, typeof window != "undefined" ? window : typeof global != "undefined" ? global : typeof self != "undefined" ? self : this);
